
LoRa_L4A6RG_WaterDetect_V1q4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011830  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  080119e0  080119e0  000219e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801228c  0801228c  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  0801228c  0801228c  0002228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012294  08012294  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012294  08012294  00022294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012298  08012298  00022298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0801229c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000220  080124a4  00030220  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  080124a4  00030968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000248bf  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e4  00000000  00000000  00054af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00058fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001960  00000000  00000000  0005aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031717  00000000  00000000  0005c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002073c  00000000  00000000  0008db6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e1ee  00000000  00000000  000ae2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001dc499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008828  00000000  00000000  001dc4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000220 	.word	0x20000220
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080119c8 	.word	0x080119c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000224 	.word	0x20000224
 80001ec:	080119c8 	.word	0x080119c8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	0000      	movs	r0, r0
	...

08001030 <ADC1_Conv>:

/* Private typedef -----------------------------------------------------------*/
ADC1_t ADC_1;

void ADC1_Conv(ADC_HandleTypeDef *hadc)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	466b      	mov	r3, sp
 800103a:	461d      	mov	r5, r3
	//ADC start, LED status = 0
	HAL_GPIO_WritePin(GPIOD, RedLED , GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	4887      	ldr	r0, [pc, #540]	; (8001260 <ADC1_Conv+0x230>)
 8001044:	f005 fe46 	bl	8006cd4 <HAL_GPIO_WritePin>
	unsigned char Count_in, Count_Sum;
	unsigned char Count_Sum_value = 30;//adc value Sum count
 8001048:	231e      	movs	r3, #30
 800104a:	757b      	strb	r3, [r7, #21]
	uint16_t BufferValuelist[Count_Sum_value];
 800104c:	7d7c      	ldrb	r4, [r7, #21]
 800104e:	4623      	mov	r3, r4
 8001050:	3b01      	subs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	b2e0      	uxtb	r0, r4
 8001056:	f04f 0100 	mov.w	r1, #0
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	010b      	lsls	r3, r1, #4
 8001064:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001068:	0102      	lsls	r2, r0, #4
 800106a:	b2e0      	uxtb	r0, r4
 800106c:	f04f 0100 	mov.w	r1, #0
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	010b      	lsls	r3, r1, #4
 800107a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800107e:	0102      	lsls	r2, r0, #4
 8001080:	4623      	mov	r3, r4
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	3307      	adds	r3, #7
 8001086:	08db      	lsrs	r3, r3, #3
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	ebad 0d03 	sub.w	sp, sp, r3
 800108e:	466b      	mov	r3, sp
 8001090:	3301      	adds	r3, #1
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 60
 8001098:	2300      	movs	r3, #0
 800109a:	75fb      	strb	r3, [r7, #23]
 800109c:	e03d      	b.n	800111a <ADC1_Conv+0xea>
    {
    	for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
 800109e:	2300      	movs	r3, #0
 80010a0:	75bb      	strb	r3, [r7, #22]
 80010a2:	e031      	b.n	8001108 <ADC1_Conv+0xd8>
    	{
    		/*##-1- Start the conversion process #######################################*/
    		HAL_ADC_Start(hadc);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f003 fa71 	bl	800458c <HAL_ADC_Start>
    			the peripheral; if it?�s busy you need to wait for the end of current
    			conversion before starting a new one.
    			For simplicity reasons, this example is just waiting till the end of the
    	 	 	conversion, but application may perform other tasks while conversion
    			operation is ongoing. */
    		HAL_ADC_PollForConversion(hadc, 50);
 80010aa:	2132      	movs	r1, #50	; 0x32
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f003 fb5b 	bl	8004768 <HAL_ADC_PollForConversion>
    
    			/* Check if the continous conversion of regular channel is finished */
    		while(!HAL_IS_BIT_SET(HAL_ADC_GetState(hadc), HAL_ADC_STATE_REG_EOC)){};
 80010b2:	bf00      	nop
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f004 f849 	bl	800514c <HAL_ADC_GetState>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c4:	d1f6      	bne.n	80010b4 <ADC1_Conv+0x84>
    		/*##-3- Get the converted value of regular channel  ######################*/
    		ADC_1.BufferValue[Count_in] = HAL_ADC_GetValue(hadc);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f003 fc26 	bl	8004918 <HAL_ADC_GetValue>
 80010cc:	4602      	mov	r2, r0
 80010ce:	7dbb      	ldrb	r3, [r7, #22]
 80010d0:	b291      	uxth	r1, r2
 80010d2:	4a64      	ldr	r2, [pc, #400]	; (8001264 <ADC1_Conv+0x234>)
 80010d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            ADC_1.BufferValue_Sum[Count_in] += ADC_1.BufferValue[Count_in];
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	4a62      	ldr	r2, [pc, #392]	; (8001264 <ADC1_Conv+0x234>)
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	7dbb      	ldrb	r3, [r7, #22]
 80010e4:	495f      	ldr	r1, [pc, #380]	; (8001264 <ADC1_Conv+0x234>)
 80010e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010ea:	4619      	mov	r1, r3
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	440a      	add	r2, r1
 80010f0:	495c      	ldr	r1, [pc, #368]	; (8001264 <ADC1_Conv+0x234>)
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	605a      	str	r2, [r3, #4]
            ADC_1.BufferValue[Count_in]=0;//clear adc bufferValue
 80010f8:	7dbb      	ldrb	r3, [r7, #22]
 80010fa:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <ADC1_Conv+0x234>)
 80010fc:	2100      	movs	r1, #0
 80010fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
 8001102:	7dbb      	ldrb	r3, [r7, #22]
 8001104:	3301      	adds	r3, #1
 8001106:	75bb      	strb	r3, [r7, #22]
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d9ca      	bls.n	80010a4 <ADC1_Conv+0x74>
    	}
    	HAL_ADC_Stop(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f003 faf6 	bl	8004700 <HAL_ADC_Stop>
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 60
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	3301      	adds	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
 800111a:	7dfa      	ldrb	r2, [r7, #23]
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3bd      	bcc.n	800109e <ADC1_Conv+0x6e>
    }//End adc value sum by count 60

    for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Calculate the ADC value average Convert to the Temp value
 8001122:	2300      	movs	r3, #0
 8001124:	75bb      	strb	r3, [r7, #22]
 8001126:	e02c      	b.n	8001182 <ADC1_Conv+0x152>
    {
        ADC_1.BufferValue_Avg[Count_in] = ADC_1.BufferValue_Sum[Count_in]/Count_Sum_value ;
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <ADC1_Conv+0x234>)
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	7d7b      	ldrb	r3, [r7, #21]
 8001134:	fbb2 f2f3 	udiv	r2, r2, r3
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	b291      	uxth	r1, r2
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <ADC1_Conv+0x234>)
 800113e:	3304      	adds	r3, #4
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	460a      	mov	r2, r1
 8001146:	809a      	strh	r2, [r3, #4]

        //ADC voltage digital valve, max:4095
        ADC_1.Vol[Count_in]=ADC_1.BufferValue_Avg[Count_in];
 8001148:	7dbb      	ldrb	r3, [r7, #22]
 800114a:	7dba      	ldrb	r2, [r7, #22]
 800114c:	4945      	ldr	r1, [pc, #276]	; (8001264 <ADC1_Conv+0x234>)
 800114e:	3304      	adds	r3, #4
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	440b      	add	r3, r1
 8001154:	8898      	ldrh	r0, [r3, #4]
 8001156:	4943      	ldr	r1, [pc, #268]	; (8001264 <ADC1_Conv+0x234>)
 8001158:	f102 0308 	add.w	r3, r2, #8
 800115c:	4602      	mov	r2, r0
 800115e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

        ADC_1.BufferValue_Sum[Count_in]=0;//clear Sum ValueV
 8001162:	7dbb      	ldrb	r3, [r7, #22]
 8001164:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <ADC1_Conv+0x234>)
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
        ADC_1.BufferValue_Avg[Count_in]=0;//clear avg Value
 800116e:	7dbb      	ldrb	r3, [r7, #22]
 8001170:	4a3c      	ldr	r2, [pc, #240]	; (8001264 <ADC1_Conv+0x234>)
 8001172:	3304      	adds	r3, #4
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	809a      	strh	r2, [r3, #4]
    for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Calculate the ADC value average Convert to the Temp value
 800117c:	7dbb      	ldrb	r3, [r7, #22]
 800117e:	3301      	adds	r3, #1
 8001180:	75bb      	strb	r3, [r7, #22]
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d9cf      	bls.n	8001128 <ADC1_Conv+0xf8>

    }
    //Calculate Vdda_mv, Vrefint(Internal voltage reference) --------------------
    //get Internal voltage reference calibration, value:1656, 1.213V
    uint16_t Vref_cal ;
    Vref_cal =*((uint16_t*)VREFINT_CAL_ADDR);
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <ADC1_Conv+0x238>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	817b      	strh	r3, [r7, #10]
    //Calculate real reference voltage by ADC1 :Vdda_mv
    ADC_1.Vdda_mv = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_1.Vol[1], LL_ADC_RESOLUTION_12B);
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <ADC1_Conv+0x238>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001198:	fb03 f302 	mul.w	r3, r3, r2
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <ADC1_Conv+0x234>)
 800119e:	8a52      	ldrh	r2, [r2, #18]
 80011a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <ADC1_Conv+0x234>)
 80011a8:	829a      	strh	r2, [r3, #20]
//    	ADC_1.BatStatus = 1;
//    ADC_1.BatV =(float)ADC_1.Vdda_mv/1000*ADC_1.Vol[0]/4095*3.06+0.1;
//    if(ADC_1.BatV > 3.3)
//    	ADC_1.BatV = 3.65;
//    if(ADC_1.BatV >= 3.0)
    ADC_1.BatVTemp =(float)ADC_1.Vdda_mv/1000*ADC_1.Vol[0]/4095*3.06+0.1;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <ADC1_Conv+0x234>)
 80011ac:	8a9b      	ldrh	r3, [r3, #20]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800126c <ADC1_Conv+0x23c>
 80011ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <ADC1_Conv+0x234>)
 80011c0:	8a1b      	ldrh	r3, [r3, #16]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001270 <ADC1_Conv+0x240>
 80011d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011d6:	ee16 0a90 	vmov	r0, s13
 80011da:	f7ff f9d5 	bl	8000588 <__aeabi_f2d>
 80011de:	a31a      	add	r3, pc, #104	; (adr r3, 8001248 <ADC1_Conv+0x218>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa28 	bl	8000638 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	a317      	add	r3, pc, #92	; (adr r3, 8001250 <ADC1_Conv+0x220>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f869 	bl	80002cc <__adddf3>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fd11 	bl	8000c28 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <ADC1_Conv+0x234>)
 800120a:	61d3      	str	r3, [r2, #28]
    if(ADC_1.BatVTemp > 3.24)
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <ADC1_Conv+0x234>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9b9 	bl	8000588 <__aeabi_f2d>
 8001216:	a310      	add	r3, pc, #64	; (adr r3, 8001258 <ADC1_Conv+0x228>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fc9c 	bl	8000b58 <__aeabi_dcmpgt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <ADC1_Conv+0x1fc>
    	ADC_1.BatVTemp = 3.65;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <ADC1_Conv+0x234>)
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <ADC1_Conv+0x244>)
 800122a:	61da      	str	r2, [r3, #28]
//        ADC_1.BatStatus = 0;
//       else
//        ADC_1.BatStatus = 1;
    //------------------------------------------------------------------
    //ADC end cycle, LED status =1
    HAL_GPIO_WritePin(GPIOD, RedLED , GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <ADC1_Conv+0x230>)
 8001234:	f005 fd4e 	bl	8006cd4 <HAL_GPIO_WritePin>
 8001238:	46ad      	mov	sp, r5
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	47ae147b 	.word	0x47ae147b
 800124c:	40087ae1 	.word	0x40087ae1
 8001250:	9999999a 	.word	0x9999999a
 8001254:	3fb99999 	.word	0x3fb99999
 8001258:	1eb851ec 	.word	0x1eb851ec
 800125c:	4009eb85 	.word	0x4009eb85
 8001260:	48000c00 	.word	0x48000c00
 8001264:	20000264 	.word	0x20000264
 8001268:	1fff75aa 	.word	0x1fff75aa
 800126c:	447a0000 	.word	0x447a0000
 8001270:	457ff000 	.word	0x457ff000
 8001274:	4069999a 	.word	0x4069999a

08001278 <LoRa_USART>:

//long frrrr[16];//test frequency setup array
/* Private variables ---------------------------------------------------------*/

void LoRa_USART(UART_HandleTypeDef *huart, IWDG_HandleTypeDef *hiwdg, ADC_HandleTypeDef *hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
//	LoRaInit(huart);//test init
    while(USARTLoRa.ResStatus!=LoRa_Sleep)
 8001284:	e237      	b.n	80016f6 <LoRa_USART+0x47e>
    {
		switch(USARTLoRa.Status)
 8001286:	4bb2      	ldr	r3, [pc, #712]	; (8001550 <LoRa_USART+0x2d8>)
 8001288:	f893 34e8 	ldrb.w	r3, [r3, #1256]	; 0x4e8
 800128c:	2b08      	cmp	r3, #8
 800128e:	f200 8232 	bhi.w	80016f6 <LoRa_USART+0x47e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <LoRa_USART+0x20>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012bd 	.word	0x080012bd
 800129c:	080012e9 	.word	0x080012e9
 80012a0:	08001317 	.word	0x08001317
 80012a4:	08001355 	.word	0x08001355
 80012a8:	080013a9 	.word	0x080013a9
 80012ac:	080013f9 	.word	0x080013f9
 80012b0:	080015c1 	.word	0x080015c1
 80012b4:	0800164d 	.word	0x0800164d
 80012b8:	0800167b 	.word	0x0800167b
	    {
			case WakeUp:
				USARTLoRa.RxCount=0;
 80012bc:	4ba4      	ldr	r3, [pc, #656]	; (8001550 <LoRa_USART+0x2d8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
				WakeUpTrigger(huart);
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f001 f9a7 	bl	8002618 <WakeUpTrigger>
				if(USARTLoRa.ResStatus!=LoRa_HDRest)
 80012ca:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <LoRa_USART+0x2d8>)
 80012cc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80012d0:	2b18      	cmp	r3, #24
 80012d2:	d004      	beq.n	80012de <LoRa_USART+0x66>
					USARTLoRa.Status=CheckJoinST;
 80012d4:	4b9e      	ldr	r3, [pc, #632]	; (8001550 <LoRa_USART+0x2d8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 80012dc:	e20b      	b.n	80016f6 <LoRa_USART+0x47e>
				else
					USARTLoRa.ResStatus=LoRa_OK;
 80012de:	4b9c      	ldr	r3, [pc, #624]	; (8001550 <LoRa_USART+0x2d8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
				break;
 80012e6:	e206      	b.n	80016f6 <LoRa_USART+0x47e>

			case CheckJoinST:
				USARTLoRa.ResStatus=CheckJoinStatus(huart);
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f001 f9f3 	bl	80026d4 <CheckJoinStatus>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b97      	ldr	r3, [pc, #604]	; (8001550 <LoRa_USART+0x2d8>)
 80012f4:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
				if(USARTLoRa.ResStatus==LoRa_joined)
 80012f8:	4b95      	ldr	r3, [pc, #596]	; (8001550 <LoRa_USART+0x2d8>)
 80012fa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80012fe:	2b13      	cmp	r3, #19
 8001300:	d104      	bne.n	800130c <LoRa_USART+0x94>
				 	USARTLoRa.Status=SendData;
 8001302:	4b93      	ldr	r3, [pc, #588]	; (8001550 <LoRa_USART+0x2d8>)
 8001304:	2205      	movs	r2, #5
 8001306:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800130a:	e1f4      	b.n	80016f6 <LoRa_USART+0x47e>
				else
					USARTLoRa.Status=Init;
 800130c:	4b90      	ldr	r3, [pc, #576]	; (8001550 <LoRa_USART+0x2d8>)
 800130e:	2202      	movs	r2, #2
 8001310:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
				break;
 8001314:	e1ef      	b.n	80016f6 <LoRa_USART+0x47e>

	    	case Init:
	    		//IWDG_Refresh
	    		HAL_IWDG_Refresh(hiwdg);
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f005 fd3a 	bl	8006d90 <HAL_IWDG_Refresh>
	    		//-------Reset Factor--------
	    		LoRaFactorReset(huart);
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f001 f949 	bl	80025b4 <LoRaFactorReset>
	    		//-------Reset chip--------
	    		LoRaChipReset(huart);
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f001 f914 	bl	8002550 <LoRaChipReset>
	    		USARTLoRa.ResStatus=LoRaInit(huart);
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f9f9 	bl	8001720 <LoRaInit>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b87      	ldr	r3, [pc, #540]	; (8001550 <LoRa_USART+0x2d8>)
 8001334:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	    		if(USARTLoRa.ResStatus==LoRa_OK)
 8001338:	4b85      	ldr	r3, [pc, #532]	; (8001550 <LoRa_USART+0x2d8>)
 800133a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 81d9 	bne.w	80016f6 <LoRa_USART+0x47e>
	    		{
	    			LoRaChipReset(huart);
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f001 f903 	bl	8002550 <LoRaChipReset>
	    			USARTLoRa.Status=AdrTxconfSet;
 800134a:	4b81      	ldr	r3, [pc, #516]	; (8001550 <LoRa_USART+0x2d8>)
 800134c:	2203      	movs	r2, #3
 800134e:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
	    		}

	    		break;
 8001352:	e1d0      	b.n	80016f6 <LoRa_USART+0x47e>

	    	case AdrTxconfSet:
	    		//-------Reset chip--------
	    		LoRaChipReset(huart);
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f001 f8fb 	bl	8002550 <LoRaChipReset>
	    		USARTLoRa.ResStatus=AdrOff(huart);
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 fbd0 	bl	8001b00 <AdrOff>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b7a      	ldr	r3, [pc, #488]	; (8001550 <LoRa_USART+0x2d8>)
 8001366:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	    		if(USARTLoRa.ResStatus==LoRa_OK)
 800136a:	4b79      	ldr	r3, [pc, #484]	; (8001550 <LoRa_USART+0x2d8>)
 800136c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 81c0 	bne.w	80016f6 <LoRa_USART+0x47e>
	    		{
	    			//-------Reset chip--------
	    			LoRaChipReset(huart);
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f001 f8ea 	bl	8002550 <LoRaChipReset>
	    			USARTLoRa.ResStatus=TxConfirmOff(huart);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fbf7 	bl	8001b70 <TxConfirmOff>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <LoRa_USART+0x2d8>)
 8001388:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	    			if(USARTLoRa.ResStatus==LoRa_OK)
 800138c:	4b70      	ldr	r3, [pc, #448]	; (8001550 <LoRa_USART+0x2d8>)
 800138e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 81af 	bne.w	80016f6 <LoRa_USART+0x47e>
	    			{	//-------Reset chip--------
	    				LoRaChipReset(huart);
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f001 f8d9 	bl	8002550 <LoRaChipReset>
	    				USARTLoRa.Status=JoinABP;
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <LoRa_USART+0x2d8>)
 80013a0:	2204      	movs	r2, #4
 80013a2:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
	    			}

	    		}
	    		break;
 80013a6:	e1a6      	b.n	80016f6 <LoRa_USART+0x47e>

	    	case JoinABP:
	    		//IWDG_Refresh
	    		HAL_IWDG_Refresh(hiwdg);
 80013a8:	68b8      	ldr	r0, [r7, #8]
 80013aa:	f005 fcf1 	bl	8006d90 <HAL_IWDG_Refresh>
	    		//-------Reset chip--------
	    		LoRaChipReset(huart);
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f001 f8ce 	bl	8002550 <LoRaChipReset>
	    		USARTLoRa.ResStatus=ActiveABPMode(huart);
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 fc13 	bl	8001be0 <ActiveABPMode>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b64      	ldr	r3, [pc, #400]	; (8001550 <LoRa_USART+0x2d8>)
 80013c0:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	    		if(USARTLoRa.ResStatus==LoRa_OK)
 80013c4:	4b62      	ldr	r3, [pc, #392]	; (8001550 <LoRa_USART+0x2d8>)
 80013c6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d104      	bne.n	80013d8 <LoRa_USART+0x160>
	    			USARTLoRa.Status=SendData;
 80013ce:	4b60      	ldr	r3, [pc, #384]	; (8001550 <LoRa_USART+0x2d8>)
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 80013d6:	e18e      	b.n	80016f6 <LoRa_USART+0x47e>
	    		else if(USARTLoRa.ResStatus==LoRa_Join_keys_not_init || USARTLoRa.ResStatus==LoRa_unexpected_Err)
 80013d8:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <LoRa_USART+0x2d8>)
 80013da:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d005      	beq.n	80013ee <LoRa_USART+0x176>
 80013e2:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <LoRa_USART+0x2d8>)
 80013e4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80013e8:	2b17      	cmp	r3, #23
 80013ea:	f040 8184 	bne.w	80016f6 <LoRa_USART+0x47e>
	    			//-------if ActiveABPMode fail, Reset chip--------
	    			USARTLoRa.Status=Init;
 80013ee:	4b58      	ldr	r3, [pc, #352]	; (8001550 <LoRa_USART+0x2d8>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
	    		break;
 80013f6:	e17e      	b.n	80016f6 <LoRa_USART+0x47e>

	    	case SendData:
	    		//IWDG_Refresh
	    		HAL_IWDG_Refresh(hiwdg);
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	f005 fcc9 	bl	8006d90 <HAL_IWDG_Refresh>

	    		USARTLoRa.sendflag = 1;
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <LoRa_USART+0x2d8>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
            	if(USARTLoRa.sendflag ==1)
 8001404:	4b52      	ldr	r3, [pc, #328]	; (8001550 <LoRa_USART+0x2d8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8174 	beq.w	80016f6 <LoRa_USART+0x47e>
            		//------Data Format transfer int & float to hex------------------------------------------------------------------
					//transfer data to string array:DataStrBuffer

            		//***********Put the Sensor Data Here to Transmit by LoRa*****************
            		//TODO:--Wayne20210528
            		sprintf(USARTLoRa.DataStrBuffer,"%.2f,%d,%d", ADC_1.BatV, SendAlarmCount,ADC_1.BatStatus);
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <LoRa_USART+0x2dc>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8b8 	bl	8000588 <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	494e      	ldr	r1, [pc, #312]	; (8001558 <LoRa_USART+0x2e0>)
 800141e:	8809      	ldrh	r1, [r1, #0]
 8001420:	4608      	mov	r0, r1
 8001422:	494c      	ldr	r1, [pc, #304]	; (8001554 <LoRa_USART+0x2dc>)
 8001424:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8001428:	9101      	str	r1, [sp, #4]
 800142a:	9000      	str	r0, [sp, #0]
 800142c:	494b      	ldr	r1, [pc, #300]	; (800155c <LoRa_USART+0x2e4>)
 800142e:	484c      	ldr	r0, [pc, #304]	; (8001560 <LoRa_USART+0x2e8>)
 8001430:	f00c fd24 	bl	800de7c <siprintf>
//            		memset( ADC_1.Vol, 0, strlen(ADC_1.Vol) ); //clear ADC_1.Vol
            		//************************************************************************

            		//transfer data to hex array:DataHexBuffer
            		USARTLoRa.DataStrSize = min(Uart_Buffer_Size, strlen(USARTLoRa.DataStrBuffer));
 8001434:	484a      	ldr	r0, [pc, #296]	; (8001560 <LoRa_USART+0x2e8>)
 8001436:	f7fe fee5 	bl	8000204 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	2b76      	cmp	r3, #118	; 0x76
 800143e:	d804      	bhi.n	800144a <LoRa_USART+0x1d2>
 8001440:	4847      	ldr	r0, [pc, #284]	; (8001560 <LoRa_USART+0x2e8>)
 8001442:	f7fe fedf 	bl	8000204 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	e000      	b.n	800144c <LoRa_USART+0x1d4>
 800144a:	2376      	movs	r3, #118	; 0x76
 800144c:	4a40      	ldr	r2, [pc, #256]	; (8001550 <LoRa_USART+0x2d8>)
 800144e:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
            		static char toHexn, n;
            		memset( USARTLoRa.DataHexBuffer, 0, strlen(USARTLoRa.DataHexBuffer) ); //clear DataHexBuffer
 8001452:	4844      	ldr	r0, [pc, #272]	; (8001564 <LoRa_USART+0x2ec>)
 8001454:	f7fe fed6 	bl	8000204 <strlen>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	2100      	movs	r1, #0
 800145e:	4841      	ldr	r0, [pc, #260]	; (8001564 <LoRa_USART+0x2ec>)
 8001460:	f00b fe84 	bl	800d16c <memset>
					for(toHexn=0; toHexn < USARTLoRa.DataStrSize; toHexn++)
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <LoRa_USART+0x2f0>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e035      	b.n	80014d8 <LoRa_USART+0x260>
					{
						memset( USARTLoRa.DataHextemp, 0, strlen(USARTLoRa.DataHextemp) ); //clear DataHextemp
 800146c:	483f      	ldr	r0, [pc, #252]	; (800156c <LoRa_USART+0x2f4>)
 800146e:	f7fe fec9 	bl	8000204 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	483c      	ldr	r0, [pc, #240]	; (800156c <LoRa_USART+0x2f4>)
 800147a:	f00b fe77 	bl	800d16c <memset>
						sprintf(USARTLoRa.DataHextemp,"%x",USARTLoRa.DataStrBuffer[toHexn]);
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <LoRa_USART+0x2f0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <LoRa_USART+0x2d8>)
 8001486:	4413      	add	r3, r2
 8001488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148c:	461a      	mov	r2, r3
 800148e:	4938      	ldr	r1, [pc, #224]	; (8001570 <LoRa_USART+0x2f8>)
 8001490:	4836      	ldr	r0, [pc, #216]	; (800156c <LoRa_USART+0x2f4>)
 8001492:	f00c fcf3 	bl	800de7c <siprintf>
						USARTLoRa.DataHexBuffer[n]=USARTLoRa.DataHextemp[0];
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <LoRa_USART+0x2fc>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <LoRa_USART+0x2d8>)
 800149e:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <LoRa_USART+0x2d8>)
 80014a4:	440b      	add	r3, r1
 80014a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
						USARTLoRa.DataHexBuffer[n+1]=USARTLoRa.DataHextemp[1];
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <LoRa_USART+0x2fc>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <LoRa_USART+0x2d8>)
 80014b2:	f892 1117 	ldrb.w	r1, [r2, #279]	; 0x117
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <LoRa_USART+0x2d8>)
 80014b8:	4413      	add	r3, r2
 80014ba:	460a      	mov	r2, r1
 80014bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
						n+=2;
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <LoRa_USART+0x2fc>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	3302      	adds	r3, #2
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <LoRa_USART+0x2fc>)
 80014ca:	701a      	strb	r2, [r3, #0]
					for(toHexn=0; toHexn < USARTLoRa.DataStrSize; toHexn++)
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <LoRa_USART+0x2f0>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <LoRa_USART+0x2f0>)
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <LoRa_USART+0x2f0>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <LoRa_USART+0x2d8>)
 80014e0:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3c1      	bcc.n	800146c <LoRa_USART+0x1f4>
					}
					n = 0;
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <LoRa_USART+0x2fc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
					//--------------------------------------------------------------------------------------------------------------------
					//transmit LED status
					HAL_GPIO_WritePin(LoRa_TxLED_Port, LoRa_TxLED , GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2102      	movs	r1, #2
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f005 fbed 	bl	8006cd4 <HAL_GPIO_WritePin>

					LoRaTransmitData(huart);
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 fba6 	bl	8001c4c <LoRaTransmitData>
					USARTLoRa.ResStatus=Check_Tx1stResMsg();
 8001500:	f000 fe14 	bl	800212c <Check_Tx1stResMsg>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <LoRa_USART+0x2d8>)
 800150a:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
					if(USARTLoRa.ResStatus==LoRa_OK)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <LoRa_USART+0x2d8>)
 8001510:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001514:	2b00      	cmp	r3, #0
 8001516:	d104      	bne.n	8001522 <LoRa_USART+0x2aa>
	    				USARTLoRa.Status = waitTxRes;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <LoRa_USART+0x2d8>)
 800151a:	2206      	movs	r2, #6
 800151c:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 8001520:	e033      	b.n	800158a <LoRa_USART+0x312>
	    			else if(USARTLoRa.ResStatus==LoRa_Response_Uplink)
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <LoRa_USART+0x2d8>)
 8001524:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001528:	2b19      	cmp	r3, #25
 800152a:	d107      	bne.n	800153c <LoRa_USART+0x2c4>
	    			{
	    				USARTLoRa.TxRevUplinkflag = true;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <LoRa_USART+0x2d8>)
 800152e:	2201      	movs	r2, #1
 8001530:	71da      	strb	r2, [r3, #7]
	    				USARTLoRa.Status = waitTxRes;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <LoRa_USART+0x2d8>)
 8001534:	2206      	movs	r2, #6
 8001536:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800153a:	e026      	b.n	800158a <LoRa_USART+0x312>
	    			}
	    			else if(USARTLoRa.ResStatus==LoRa_Tx_not_joined)
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LoRa_USART+0x2d8>)
 800153e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d118      	bne.n	8001578 <LoRa_USART+0x300>
	    				USARTLoRa.Status = JoinABP;
 8001546:	4b02      	ldr	r3, [pc, #8]	; (8001550 <LoRa_USART+0x2d8>)
 8001548:	2204      	movs	r2, #4
 800154a:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800154e:	e01c      	b.n	800158a <LoRa_USART+0x312>
 8001550:	200002a0 	.word	0x200002a0
 8001554:	20000264 	.word	0x20000264
 8001558:	200007fe 	.word	0x200007fe
 800155c:	080119e0 	.word	0x080119e0
 8001560:	200002c0 	.word	0x200002c0
 8001564:	20000340 	.word	0x20000340
 8001568:	2000023d 	.word	0x2000023d
 800156c:	200003b6 	.word	0x200003b6
 8001570:	080119ec 	.word	0x080119ec
 8001574:	2000023e 	.word	0x2000023e

	    			else if(USARTLoRa.ResStatus==LoRa_unexpected_Err)
 8001578:	4b64      	ldr	r3, [pc, #400]	; (800170c <LoRa_USART+0x494>)
 800157a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800157e:	2b17      	cmp	r3, #23
 8001580:	d103      	bne.n	800158a <LoRa_USART+0x312>
	    				USARTLoRa.Status = JoinABP;
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <LoRa_USART+0x494>)
 8001584:	2204      	movs	r2, #4
 8001586:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
// 	    			else
// 	    				receive_data_dubug();
		    		//battery light loading voltage
	    			HAL_Delay(320);
 800158a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800158e:	f002 fc3b 	bl	8003e08 <HAL_Delay>
	    			ADC1_Conv(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fd4c 	bl	8001030 <ADC1_Conv>
	    			ADC_1.BatVHeavyload=ADC_1.BatVTemp;
 8001598:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <LoRa_USART+0x498>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a5c      	ldr	r2, [pc, #368]	; (8001710 <LoRa_USART+0x498>)
 800159e:	6253      	str	r3, [r2, #36]	; 0x24

	    			//ADC LED status
					HAL_GPIO_WritePin(ADC_LED_Port, ADC_LED , GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2104      	movs	r1, #4
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f005 fb94 	bl	8006cd4 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 80015ac:	200a      	movs	r0, #10
 80015ae:	f002 fc2b 	bl	8003e08 <HAL_Delay>
					HAL_GPIO_WritePin(ADC_LED_Port, ADC_LED , GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2104      	movs	r1, #4
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f005 fb8b 	bl	8006cd4 <HAL_GPIO_WritePin>
            	}
	    		break;
 80015be:	e09a      	b.n	80016f6 <LoRa_USART+0x47e>

	    	case waitTxRes:
	    		USARTLoRa.ResStatus=Check_Tx2ndResMsg();
 80015c0:	f000 fef8 	bl	80023b4 <Check_Tx2ndResMsg>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <LoRa_USART+0x494>)
 80015ca:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	    		if(USARTLoRa.ResStatus==LoRa_Response_Downlink)
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <LoRa_USART+0x494>)
 80015d0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80015d4:	2b1a      	cmp	r3, #26
 80015d6:	d104      	bne.n	80015e2 <LoRa_USART+0x36a>
	    			USARTLoRa.Status = EnterSleepMode;
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <LoRa_USART+0x494>)
 80015da:	2207      	movs	r2, #7
 80015dc:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 80015e0:	e02d      	b.n	800163e <LoRa_USART+0x3c6>
	    		else if(USARTLoRa.ResStatus==LoRa_OK && USARTLoRa.TxRevUplinkflag == true)
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <LoRa_USART+0x494>)
 80015e4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10b      	bne.n	8001604 <LoRa_USART+0x38c>
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <LoRa_USART+0x494>)
 80015ee:	79db      	ldrb	r3, [r3, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <LoRa_USART+0x38c>
	    		{
	    			USARTLoRa.TxRevUplinkflag = false;
 80015f4:	4b45      	ldr	r3, [pc, #276]	; (800170c <LoRa_USART+0x494>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	71da      	strb	r2, [r3, #7]
	    			USARTLoRa.Status = JoinABP;
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <LoRa_USART+0x494>)
 80015fc:	2204      	movs	r2, #4
 80015fe:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 8001602:	e01c      	b.n	800163e <LoRa_USART+0x3c6>
	    		}
	    		else if(USARTLoRa.ResStatus==LoRa_OK)
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <LoRa_USART+0x494>)
 8001606:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800160a:	2b00      	cmp	r3, #0
 800160c:	d104      	bne.n	8001618 <LoRa_USART+0x3a0>
	    			USARTLoRa.Status = EnterSleepMode;
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <LoRa_USART+0x494>)
 8001610:	2207      	movs	r2, #7
 8001612:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 8001616:	e012      	b.n	800163e <LoRa_USART+0x3c6>
	    		else if( USARTLoRa.ResStatus == LoRa_Tx2_err)
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <LoRa_USART+0x494>)
 800161a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d104      	bne.n	800162c <LoRa_USART+0x3b4>
	    			USARTLoRa.Status = SendData;
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <LoRa_USART+0x494>)
 8001624:	2205      	movs	r2, #5
 8001626:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800162a:	e008      	b.n	800163e <LoRa_USART+0x3c6>
	    		else if( USARTLoRa.ResStatus == LoRa_unexpected_Err)
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <LoRa_USART+0x494>)
 800162e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001632:	2b17      	cmp	r3, #23
 8001634:	d103      	bne.n	800163e <LoRa_USART+0x3c6>
	    			USARTLoRa.Status = Init;
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <LoRa_USART+0x494>)
 8001638:	2202      	movs	r2, #2
 800163a:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
	    		//transmit LED status
	    		HAL_GPIO_WritePin(LoRa_TxLED_Port, LoRa_TxLED , GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2102      	movs	r1, #2
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f005 fb45 	bl	8006cd4 <HAL_GPIO_WritePin>
	    		break;
 800164a:	e054      	b.n	80016f6 <LoRa_USART+0x47e>

	    	case EnterSleepMode:
				USARTLoRa.ResStatus=EnterSleep(huart);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f001 f861 	bl	8002714 <EnterSleep>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <LoRa_USART+0x494>)
 8001658:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
				if(USARTLoRa.ResStatus==LoRa_Sleep)
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <LoRa_USART+0x494>)
 800165e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001662:	2b15      	cmp	r3, #21
 8001664:	d104      	bne.n	8001670 <LoRa_USART+0x3f8>
					USARTLoRa.Status=WakeUp;
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <LoRa_USART+0x494>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800166e:	e042      	b.n	80016f6 <LoRa_USART+0x47e>
				else
					USARTLoRa.Status = Init;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <LoRa_USART+0x494>)
 8001672:	2202      	movs	r2, #2
 8001674:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
				break;
 8001678:	e03d      	b.n	80016f6 <LoRa_USART+0x47e>

	    	case CMDdebug:
	    		LoRaCommand(huart, "mac get_ch_count");
 800167a:	4926      	ldr	r1, [pc, #152]	; (8001714 <LoRa_USART+0x49c>)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 fb01 	bl	8001c84 <LoRaCommand>
	    		while(!USARTLoRa.Revflag);
 8001682:	bf00      	nop
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <LoRa_USART+0x494>)
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f8      	bne.n	8001684 <LoRa_USART+0x40c>
				USARTLoRa.Revflag = 0;
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <LoRa_USART+0x494>)
 8001694:	2200      	movs	r2, #0
 8001696:	705a      	strb	r2, [r3, #1]
	    		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> v1.6.5\n");
 8001698:	481f      	ldr	r0, [pc, #124]	; (8001718 <LoRa_USART+0x4a0>)
 800169a:	f000 fb3d 	bl	8001d18 <LoRaResCheck>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <LoRa_USART+0x494>)
 80016a4:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	    		if(USARTLoRa.ResStatus == LoRa_OK)
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <LoRa_USART+0x494>)
 80016aa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <LoRa_USART+0x43e>
	    			__NOP();
 80016b2:	bf00      	nop
 80016b4:	e000      	b.n	80016b8 <LoRa_USART+0x440>
	    		else
	    			__NOP();
 80016b6:	bf00      	nop
				LoRaCommand(huart, "mac get_tx_confirm");
 80016b8:	4918      	ldr	r1, [pc, #96]	; (800171c <LoRa_USART+0x4a4>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 fae2 	bl	8001c84 <LoRaCommand>
				while(!USARTLoRa.Revflag);
 80016c0:	bf00      	nop
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <LoRa_USART+0x494>)
 80016c4:	785b      	ldrb	r3, [r3, #1]
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f8      	bne.n	80016c2 <LoRa_USART+0x44a>
				USARTLoRa.Revflag = 0;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <LoRa_USART+0x494>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	705a      	strb	r2, [r3, #1]
	    		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> v1.6.5\n");
 80016d6:	4810      	ldr	r0, [pc, #64]	; (8001718 <LoRa_USART+0x4a0>)
 80016d8:	f000 fb1e 	bl	8001d18 <LoRaResCheck>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <LoRa_USART+0x494>)
 80016e2:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	    		if(USARTLoRa.ResStatus == LoRa_OK)
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <LoRa_USART+0x494>)
 80016e8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <LoRa_USART+0x47c>
	    			__NOP();
 80016f0:	bf00      	nop
 80016f2:	e000      	b.n	80016f6 <LoRa_USART+0x47e>
	    		else
	    			__NOP();
 80016f4:	bf00      	nop
    while(USARTLoRa.ResStatus!=LoRa_Sleep)
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <LoRa_USART+0x494>)
 80016f8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80016fc:	2b15      	cmp	r3, #21
 80016fe:	f47f adc2 	bne.w	8001286 <LoRa_USART+0xe>

	    }
	}
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200002a0 	.word	0x200002a0
 8001710:	20000264 	.word	0x20000264
 8001714:	080119f0 	.word	0x080119f0
 8001718:	08011a04 	.word	0x08011a04
 800171c:	08011a14 	.word	0x08011a14

08001720 <LoRaInit>:



LoRa_StatusTypeDef LoRaInit(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b09c      	sub	sp, #112	; 0x70
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//---------------Set 0~15 channel radio frequency-------------------------
	LoRaCFStatus=LoRa_CF_FEQ;
 8001728:	4bba      	ldr	r3, [pc, #744]	; (8001a14 <LoRaInit+0x2f4>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
	char c;
	uint32_t ferqoffset;
	ferqoffset = RadioFreq;
 800172e:	4bba      	ldr	r3, [pc, #744]	; (8001a18 <LoRaInit+0x2f8>)
 8001730:	66bb      	str	r3, [r7, #104]	; 0x68
	for(c=0;c<=15;c++)
 8001732:	2300      	movs	r3, #0
 8001734:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001738:	e044      	b.n	80017c4 <LoRaInit+0xa4>
	{
		char frequcmd[32];
		sprintf(frequcmd,"mac set_ch_freq %d %d",c, ferqoffset);
 800173a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800173e:	f107 0008 	add.w	r0, r7, #8
 8001742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001744:	49b5      	ldr	r1, [pc, #724]	; (8001a1c <LoRaInit+0x2fc>)
 8001746:	f00c fb99 	bl	800de7c <siprintf>
		LoRaCommand(huart, frequcmd);
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fa97 	bl	8001c84 <LoRaCommand>
		USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001756:	49b2      	ldr	r1, [pc, #712]	; (8001a20 <LoRaInit+0x300>)
 8001758:	48b2      	ldr	r0, [pc, #712]	; (8001a24 <LoRaInit+0x304>)
 800175a:	f000 fc1d 	bl	8001f98 <Check_2ResMsg>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4bb1      	ldr	r3, [pc, #708]	; (8001a28 <LoRaInit+0x308>)
 8001764:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
		if(USARTLoRa.ResStatus!=LoRa_OK)
 8001768:	4baf      	ldr	r3, [pc, #700]	; (8001a28 <LoRaInit+0x308>)
 800176a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <LoRaInit+0x5a>
			return USARTLoRa.ResStatus;
 8001772:	4bad      	ldr	r3, [pc, #692]	; (8001a28 <LoRaInit+0x308>)
 8001774:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001778:	e1b4      	b.n	8001ae4 <LoRaInit+0x3c4>
		//Save configure
		USARTLoRa.ResStatus=LoRaSaveCF(huart);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f001 f802 	bl	8002784 <LoRaSaveCF>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4ba8      	ldr	r3, [pc, #672]	; (8001a28 <LoRaInit+0x308>)
 8001786:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
		if(USARTLoRa.ResStatus != LoRa_OK)
 800178a:	4ba7      	ldr	r3, [pc, #668]	; (8001a28 <LoRaInit+0x308>)
 800178c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <LoRaInit+0x7c>
			return USARTLoRa.ResStatus;
 8001794:	4ba4      	ldr	r3, [pc, #656]	; (8001a28 <LoRaInit+0x308>)
 8001796:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800179a:	e1a3      	b.n	8001ae4 <LoRaInit+0x3c4>
		//offset 200KHz
//		frrrr[c]=ferqoffset;//TEST frequency setup Array
		ferqoffset = ferqoffset + 200000;
 800179c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800179e:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80017a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80017a6:	66bb      	str	r3, [r7, #104]	; 0x68
		if((c+1)%Gateway_Channel==0)
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	3301      	adds	r3, #1
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <LoRaInit+0x9a>
			ferqoffset = RadioFreq;
 80017b6:	4b98      	ldr	r3, [pc, #608]	; (8001a18 <LoRaInit+0x2f8>)
 80017b8:	66bb      	str	r3, [r7, #104]	; 0x68
	for(c=0;c<=15;c++)
 80017ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017be:	3301      	adds	r3, #1
 80017c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80017c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d9b6      	bls.n	800173a <LoRaInit+0x1a>
	}

	//----------------Set loraChannel Bandwidth------------------------------------
	char ChBWcmd[32];
	sprintf(ChBWcmd,"mac set_ch_count %d %d", loraChannel, BandWidth);
 80017cc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80017d0:	237d      	movs	r3, #125	; 0x7d
 80017d2:	2208      	movs	r2, #8
 80017d4:	4995      	ldr	r1, [pc, #596]	; (8001a2c <LoRaInit+0x30c>)
 80017d6:	f00c fb51 	bl	800de7c <siprintf>
	LoRaCommand(huart, ChBWcmd);
 80017da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fa4f 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 80017e6:	498e      	ldr	r1, [pc, #568]	; (8001a20 <LoRaInit+0x300>)
 80017e8:	488e      	ldr	r0, [pc, #568]	; (8001a24 <LoRaInit+0x304>)
 80017ea:	f000 fbd5 	bl	8001f98 <Check_2ResMsg>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b8d      	ldr	r3, [pc, #564]	; (8001a28 <LoRaInit+0x308>)
 80017f4:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 80017f8:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <LoRaInit+0x308>)
 80017fa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <LoRaInit+0xea>
		return USARTLoRa.ResStatus;
 8001802:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <LoRaInit+0x308>)
 8001804:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001808:	e16c      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 ffba 	bl	8002784 <LoRaSaveCF>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <LoRaInit+0x308>)
 8001816:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 800181a:	4b83      	ldr	r3, [pc, #524]	; (8001a28 <LoRaInit+0x308>)
 800181c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <LoRaInit+0x10c>
		return USARTLoRa.ResStatus;
 8001824:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <LoRaInit+0x308>)
 8001826:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800182a:	e15b      	b.n	8001ae4 <LoRaInit+0x3c4>

	//----------------Set Data rate(SF)--------------------------------------
	LoRaCommand(huart, CF_SFDataRate);
 800182c:	4980      	ldr	r1, [pc, #512]	; (8001a30 <LoRaInit+0x310>)
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fa28 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001834:	497a      	ldr	r1, [pc, #488]	; (8001a20 <LoRaInit+0x300>)
 8001836:	487b      	ldr	r0, [pc, #492]	; (8001a24 <LoRaInit+0x304>)
 8001838:	f000 fbae 	bl	8001f98 <Check_2ResMsg>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <LoRaInit+0x308>)
 8001842:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <LoRaInit+0x308>)
 8001848:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <LoRaInit+0x138>
		return USARTLoRa.ResStatus;
 8001850:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <LoRaInit+0x308>)
 8001852:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001856:	e145      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 ff93 	bl	8002784 <LoRaSaveCF>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b71      	ldr	r3, [pc, #452]	; (8001a28 <LoRaInit+0x308>)
 8001864:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001868:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <LoRaInit+0x308>)
 800186a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <LoRaInit+0x15a>
		return USARTLoRa.ResStatus;
 8001872:	4b6d      	ldr	r3, [pc, #436]	; (8001a28 <LoRaInit+0x308>)
 8001874:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001878:	e134      	b.n	8001ae4 <LoRaInit+0x3c4>

	//----------------Set MaxEIRP--------------------------------------
	LoRaCommand(huart, CF_MaxEIRP);
 800187a:	496e      	ldr	r1, [pc, #440]	; (8001a34 <LoRaInit+0x314>)
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fa01 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001882:	4967      	ldr	r1, [pc, #412]	; (8001a20 <LoRaInit+0x300>)
 8001884:	4867      	ldr	r0, [pc, #412]	; (8001a24 <LoRaInit+0x304>)
 8001886:	f000 fb87 	bl	8001f98 <Check_2ResMsg>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b66      	ldr	r3, [pc, #408]	; (8001a28 <LoRaInit+0x308>)
 8001890:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001894:	4b64      	ldr	r3, [pc, #400]	; (8001a28 <LoRaInit+0x308>)
 8001896:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <LoRaInit+0x186>
		return USARTLoRa.ResStatus;
 800189e:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <LoRaInit+0x308>)
 80018a0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80018a4:	e11e      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 ff6c 	bl	8002784 <LoRaSaveCF>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <LoRaInit+0x308>)
 80018b2:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <LoRaInit+0x308>)
 80018b8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <LoRaInit+0x1a8>
		return USARTLoRa.ResStatus;
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <LoRaInit+0x308>)
 80018c2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80018c6:	e10d      	b.n	8001ae4 <LoRaInit+0x3c4>

	//----------------Set Transmit Power--------------------------------------
	char txpowercmd[32];
	sprintf(txpowercmd,"mac set_power %d", TxPower);
 80018c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018cc:	2214      	movs	r2, #20
 80018ce:	495a      	ldr	r1, [pc, #360]	; (8001a38 <LoRaInit+0x318>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00c fad3 	bl	800de7c <siprintf>
	LoRaCommand(huart, txpowercmd);
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	4619      	mov	r1, r3
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f9d1 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 80018e2:	494f      	ldr	r1, [pc, #316]	; (8001a20 <LoRaInit+0x300>)
 80018e4:	484f      	ldr	r0, [pc, #316]	; (8001a24 <LoRaInit+0x304>)
 80018e6:	f000 fb57 	bl	8001f98 <Check_2ResMsg>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <LoRaInit+0x308>)
 80018f0:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 80018f4:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <LoRaInit+0x308>)
 80018f6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <LoRaInit+0x1e6>
		return USARTLoRa.ResStatus;
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <LoRaInit+0x308>)
 8001900:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001904:	e0ee      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 ff3c 	bl	8002784 <LoRaSaveCF>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b45      	ldr	r3, [pc, #276]	; (8001a28 <LoRaInit+0x308>)
 8001912:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001916:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <LoRaInit+0x308>)
 8001918:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <LoRaInit+0x208>
		return USARTLoRa.ResStatus;
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <LoRaInit+0x308>)
 8001922:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001926:	e0dd      	b.n	8001ae4 <LoRaInit+0x3c4>

	//----------------Set Device EUI--------------------------------------
	LoRaCommand(huart, CF_DevEUI);
 8001928:	4944      	ldr	r1, [pc, #272]	; (8001a3c <LoRaInit+0x31c>)
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f9aa 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001930:	493b      	ldr	r1, [pc, #236]	; (8001a20 <LoRaInit+0x300>)
 8001932:	483c      	ldr	r0, [pc, #240]	; (8001a24 <LoRaInit+0x304>)
 8001934:	f000 fb30 	bl	8001f98 <Check_2ResMsg>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <LoRaInit+0x308>)
 800193e:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <LoRaInit+0x308>)
 8001944:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <LoRaInit+0x234>
		return USARTLoRa.ResStatus;
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <LoRaInit+0x308>)
 800194e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001952:	e0c7      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 ff15 	bl	8002784 <LoRaSaveCF>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <LoRaInit+0x308>)
 8001960:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001964:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <LoRaInit+0x308>)
 8001966:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <LoRaInit+0x256>
		return USARTLoRa.ResStatus;
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <LoRaInit+0x308>)
 8001970:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001974:	e0b6      	b.n	8001ae4 <LoRaInit+0x3c4>

	//----------------Set Application EUI--------------------------------------
	LoRaCommand(huart, CF_AppEUI);
 8001976:	4932      	ldr	r1, [pc, #200]	; (8001a40 <LoRaInit+0x320>)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f983 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 800197e:	4928      	ldr	r1, [pc, #160]	; (8001a20 <LoRaInit+0x300>)
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <LoRaInit+0x304>)
 8001982:	f000 fb09 	bl	8001f98 <Check_2ResMsg>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <LoRaInit+0x308>)
 800198c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <LoRaInit+0x308>)
 8001992:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <LoRaInit+0x282>
		return USARTLoRa.ResStatus;
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <LoRaInit+0x308>)
 800199c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80019a0:	e0a0      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 feee 	bl	8002784 <LoRaSaveCF>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <LoRaInit+0x308>)
 80019ae:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <LoRaInit+0x308>)
 80019b4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <LoRaInit+0x2a4>
		return USARTLoRa.ResStatus;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <LoRaInit+0x308>)
 80019be:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80019c2:	e08f      	b.n	8001ae4 <LoRaInit+0x3c4>

	//----------------Set Device Address--------------------------------------
	LoRaCommand(huart, CF_DevAddr);
 80019c4:	491f      	ldr	r1, [pc, #124]	; (8001a44 <LoRaInit+0x324>)
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f95c 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 80019cc:	4914      	ldr	r1, [pc, #80]	; (8001a20 <LoRaInit+0x300>)
 80019ce:	4815      	ldr	r0, [pc, #84]	; (8001a24 <LoRaInit+0x304>)
 80019d0:	f000 fae2 	bl	8001f98 <Check_2ResMsg>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <LoRaInit+0x308>)
 80019da:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <LoRaInit+0x308>)
 80019e0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <LoRaInit+0x2d0>
		return USARTLoRa.ResStatus;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <LoRaInit+0x308>)
 80019ea:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80019ee:	e079      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fec7 	bl	8002784 <LoRaSaveCF>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <LoRaInit+0x308>)
 80019fc:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <LoRaInit+0x308>)
 8001a02:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01e      	beq.n	8001a48 <LoRaInit+0x328>
		return USARTLoRa.ResStatus;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <LoRaInit+0x308>)
 8001a0c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001a10:	e068      	b.n	8001ae4 <LoRaInit+0x3c4>
 8001a12:	bf00      	nop
 8001a14:	2000023c 	.word	0x2000023c
 8001a18:	3703dcc0 	.word	0x3703dcc0
 8001a1c:	08011a28 	.word	0x08011a28
 8001a20:	08011a40 	.word	0x08011a40
 8001a24:	08011a50 	.word	0x08011a50
 8001a28:	200002a0 	.word	0x200002a0
 8001a2c:	08011a5c 	.word	0x08011a5c
 8001a30:	08011a74 	.word	0x08011a74
 8001a34:	08011a84 	.word	0x08011a84
 8001a38:	08011a98 	.word	0x08011a98
 8001a3c:	08011aac 	.word	0x08011aac
 8001a40:	08011acc 	.word	0x08011acc
 8001a44:	08011aec 	.word	0x08011aec

	//----------------Set Network Session Key--------------------------------------
	LoRaCommand(huart, CF_NwksKey);
 8001a48:	4928      	ldr	r1, [pc, #160]	; (8001aec <LoRaInit+0x3cc>)
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f91a 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001a50:	4927      	ldr	r1, [pc, #156]	; (8001af0 <LoRaInit+0x3d0>)
 8001a52:	4828      	ldr	r0, [pc, #160]	; (8001af4 <LoRaInit+0x3d4>)
 8001a54:	f000 faa0 	bl	8001f98 <Check_2ResMsg>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <LoRaInit+0x3d8>)
 8001a5e:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <LoRaInit+0x3d8>)
 8001a64:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <LoRaInit+0x354>
		return USARTLoRa.ResStatus;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <LoRaInit+0x3d8>)
 8001a6e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001a72:	e037      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fe85 	bl	8002784 <LoRaSaveCF>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <LoRaInit+0x3d8>)
 8001a80:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <LoRaInit+0x3d8>)
 8001a86:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <LoRaInit+0x376>
		return USARTLoRa.ResStatus;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <LoRaInit+0x3d8>)
 8001a90:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001a94:	e026      	b.n	8001ae4 <LoRaInit+0x3c4>

	//----------------Set Application Session Key--------------------------------------
	LoRaCommand(huart, CF_AppsKey);
 8001a96:	4919      	ldr	r1, [pc, #100]	; (8001afc <LoRaInit+0x3dc>)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f8f3 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001a9e:	4914      	ldr	r1, [pc, #80]	; (8001af0 <LoRaInit+0x3d0>)
 8001aa0:	4814      	ldr	r0, [pc, #80]	; (8001af4 <LoRaInit+0x3d4>)
 8001aa2:	f000 fa79 	bl	8001f98 <Check_2ResMsg>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <LoRaInit+0x3d8>)
 8001aac:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <LoRaInit+0x3d8>)
 8001ab2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <LoRaInit+0x3a2>
		return USARTLoRa.ResStatus;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <LoRaInit+0x3d8>)
 8001abc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001ac0:	e010      	b.n	8001ae4 <LoRaInit+0x3c4>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fe5e 	bl	8002784 <LoRaSaveCF>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <LoRaInit+0x3d8>)
 8001ace:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <LoRaInit+0x3d8>)
 8001ad4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <LoRaInit+0x3c4>
		return USARTLoRa.ResStatus;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <LoRaInit+0x3d8>)
 8001ade:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001ae2:	e7ff      	b.n	8001ae4 <LoRaInit+0x3c4>
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3770      	adds	r7, #112	; 0x70
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	08011b08 	.word	0x08011b08
 8001af0:	08011a40 	.word	0x08011a40
 8001af4:	08011a50 	.word	0x08011a50
 8001af8:	200002a0 	.word	0x200002a0
 8001afc:	08011b3c 	.word	0x08011b3c

08001b00 <AdrOff>:


LoRa_StatusTypeDef AdrOff(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	//----------------Turn off auto Data rate--------------------------------------
	LoRaCommand(huart, ADRoff);
 8001b08:	4915      	ldr	r1, [pc, #84]	; (8001b60 <AdrOff+0x60>)
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8ba 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001b10:	4914      	ldr	r1, [pc, #80]	; (8001b64 <AdrOff+0x64>)
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <AdrOff+0x68>)
 8001b14:	f000 fa40 	bl	8001f98 <Check_2ResMsg>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <AdrOff+0x6c>)
 8001b1e:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <AdrOff+0x6c>)
 8001b24:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <AdrOff+0x34>
		return USARTLoRa.ResStatus;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <AdrOff+0x6c>)
 8001b2e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001b32:	e010      	b.n	8001b56 <AdrOff+0x56>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fe25 	bl	8002784 <LoRaSaveCF>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <AdrOff+0x6c>)
 8001b40:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <AdrOff+0x6c>)
 8001b46:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <AdrOff+0x56>
		return USARTLoRa.ResStatus;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <AdrOff+0x6c>)
 8001b50:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001b54:	e7ff      	b.n	8001b56 <AdrOff+0x56>
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	08011b70 	.word	0x08011b70
 8001b64:	08011a40 	.word	0x08011a40
 8001b68:	08011a50 	.word	0x08011a50
 8001b6c:	200002a0 	.word	0x200002a0

08001b70 <TxConfirmOff>:
LoRa_StatusTypeDef TxConfirmOff(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	//----------------Off Tx Confirm--------------------------------------
	LoRaCommand(huart, Offtxconfirm);
 8001b78:	4915      	ldr	r1, [pc, #84]	; (8001bd0 <TxConfirmOff+0x60>)
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f882 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8001b80:	4914      	ldr	r1, [pc, #80]	; (8001bd4 <TxConfirmOff+0x64>)
 8001b82:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <TxConfirmOff+0x68>)
 8001b84:	f000 fa08 	bl	8001f98 <Check_2ResMsg>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <TxConfirmOff+0x6c>)
 8001b8e:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <TxConfirmOff+0x6c>)
 8001b94:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <TxConfirmOff+0x34>
		return USARTLoRa.ResStatus;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <TxConfirmOff+0x6c>)
 8001b9e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001ba2:	e010      	b.n	8001bc6 <TxConfirmOff+0x56>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fded 	bl	8002784 <LoRaSaveCF>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <TxConfirmOff+0x6c>)
 8001bb0:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <TxConfirmOff+0x6c>)
 8001bb6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <TxConfirmOff+0x56>
		return USARTLoRa.ResStatus;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <TxConfirmOff+0x6c>)
 8001bc0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001bc4:	e7ff      	b.n	8001bc6 <TxConfirmOff+0x56>

}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	08011b80 	.word	0x08011b80
 8001bd4:	08011a40 	.word	0x08011a40
 8001bd8:	08011a50 	.word	0x08011a50
 8001bdc:	200002a0 	.word	0x200002a0

08001be0 <ActiveABPMode>:

LoRa_StatusTypeDef ActiveABPMode(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, ActiveABP);
 8001be8:	4914      	ldr	r1, [pc, #80]	; (8001c3c <ActiveABPMode+0x5c>)
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f84a 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_JoinResMsg();
 8001bf0:	f000 fa2a 	bl	8002048 <Check_JoinResMsg>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <ActiveABPMode+0x60>)
 8001bfa:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus == LoRa_OK)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <ActiveABPMode+0x60>)
 8001c00:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d111      	bne.n	8001c2c <ActiveABPMode+0x4c>
	{
		USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> accepted\n", "\n\r>> unsuccess\n");
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <ActiveABPMode+0x64>)
 8001c0a:	480f      	ldr	r0, [pc, #60]	; (8001c48 <ActiveABPMode+0x68>)
 8001c0c:	f000 f9c4 	bl	8001f98 <Check_2ResMsg>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <ActiveABPMode+0x60>)
 8001c16:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
		if(USARTLoRa.ResStatus != LoRa_OK)
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <ActiveABPMode+0x60>)
 8001c1c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <ActiveABPMode+0x54>
			return USARTLoRa.ResStatus;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <ActiveABPMode+0x60>)
 8001c26:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001c2a:	e003      	b.n	8001c34 <ActiveABPMode+0x54>
	}
	else
		return USARTLoRa.ResStatus;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <ActiveABPMode+0x60>)
 8001c2e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001c32:	e7ff      	b.n	8001c34 <ActiveABPMode+0x54>
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	08011b98 	.word	0x08011b98
 8001c40:	200002a0 	.word	0x200002a0
 8001c44:	08011ba8 	.word	0x08011ba8
 8001c48:	08011bb8 	.word	0x08011bb8

08001c4c <LoRaTransmitData>:

void LoRaTransmitData(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0a0      	sub	sp, #128	; 0x80
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	char RoLaTxCMD[Uart_Buffer_Size];
    sprintf(RoLaTxCMD,"%s%s",SendUcfP1, USARTLoRa.DataHexBuffer);
 8001c54:	f107 0008 	add.w	r0, r7, #8
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <LoRaTransmitData+0x2c>)
 8001c5a:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <LoRaTransmitData+0x30>)
 8001c5c:	4908      	ldr	r1, [pc, #32]	; (8001c80 <LoRaTransmitData+0x34>)
 8001c5e:	f00c f90d 	bl	800de7c <siprintf>
	LoRaCommand(huart, RoLaTxCMD);
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f80b 	bl	8001c84 <LoRaCommand>
}
 8001c6e:	bf00      	nop
 8001c70:	3780      	adds	r7, #128	; 0x80
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000340 	.word	0x20000340
 8001c7c:	08011bc8 	.word	0x08011bc8
 8001c80:	08011bd8 	.word	0x08011bd8

08001c84 <LoRaCommand>:



void LoRaCommand(UART_HandleTypeDef *huart,  uint32_t *cmd)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	//clear usart Rx Count
	USARTLoRa.RxCount=0;
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <LoRaCommand+0x8c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
	USARTLoRa.RevStrCount=0;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <LoRaCommand+0x8c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
	USARTLoRa.RevStrEndCount=0;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <LoRaCommand+0x8c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8

	memset(USARTLoRa.buffer, 0, strlen(USARTLoRa.buffer) ); //clear usart buffer
 8001ca6:	481b      	ldr	r0, [pc, #108]	; (8001d14 <LoRaCommand+0x90>)
 8001ca8:	f7fe faac 	bl	8000204 <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <LoRaCommand+0x90>)
 8001cb4:	f00b fa5a 	bl	800d16c <memset>
	sprintf(USARTLoRa.buffer,cmd);
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	4816      	ldr	r0, [pc, #88]	; (8001d14 <LoRaCommand+0x90>)
 8001cbc:	f00c f8de 	bl	800de7c <siprintf>
	USARTLoRa.bufferSize = min(Uart_Buffer_Size, strlen(USARTLoRa.buffer));
 8001cc0:	4814      	ldr	r0, [pc, #80]	; (8001d14 <LoRaCommand+0x90>)
 8001cc2:	f7fe fa9f 	bl	8000204 <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b76      	cmp	r3, #118	; 0x76
 8001cca:	d804      	bhi.n	8001cd6 <LoRaCommand+0x52>
 8001ccc:	4811      	ldr	r0, [pc, #68]	; (8001d14 <LoRaCommand+0x90>)
 8001cce:	f7fe fa99 	bl	8000204 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	e000      	b.n	8001cd8 <LoRaCommand+0x54>
 8001cd6:	2376      	movs	r3, #118	; 0x76
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoRaCommand+0x8c>)
 8001cda:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
	USARTLoRa.sendTimeout = 50 ;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <LoRaCommand+0x8c>)
 8001ce0:	2232      	movs	r2, #50	; 0x32
 8001ce2:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
	* @param huart   UART handle.
	* @param pData   Pointer to data buffer.
	* @param Size    Amount of data to be received.
	* @param Timeout Timeout duration.(ms)
	*/
	while(HAL_UART_Transmit(huart, &USARTLoRa.buffer, USARTLoRa.bufferSize, USARTLoRa.sendTimeout )!=HAL_OK);
 8001ce6:	bf00      	nop
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LoRaCommand+0x8c>)
 8001cea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <LoRaCommand+0x8c>)
 8001cf2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 8001cf6:	4907      	ldr	r1, [pc, #28]	; (8001d14 <LoRaCommand+0x90>)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f007 fcc5 	bl	8009688 <HAL_UART_Transmit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f1      	bne.n	8001ce8 <LoRaCommand+0x64>

}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200002a0 	.word	0x200002a0
 8001d14:	200003c0 	.word	0x200003c0

08001d18 <LoRaResCheck>:
LoRa_StatusTypeDef LoRaResCheck(uint32_t *Res)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

	//while(!USARTLoRa.Revflag);
	memset(USARTLoRa.Res_Check, 0, strlen(USARTLoRa.Res_Check) ); //clear LoRa response check string
 8001d20:	483a      	ldr	r0, [pc, #232]	; (8001e0c <LoRaResCheck+0xf4>)
 8001d22:	f7fe fa6f 	bl	8000204 <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4837      	ldr	r0, [pc, #220]	; (8001e0c <LoRaResCheck+0xf4>)
 8001d2e:	f00b fa1d 	bl	800d16c <memset>
	sprintf(USARTLoRa.Res_Check,Res);
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4835      	ldr	r0, [pc, #212]	; (8001e0c <LoRaResCheck+0xf4>)
 8001d36:	f00c f8a1 	bl	800de7c <siprintf>
	//USARTLoRa.Revflag=0;

	memset(USARTLoRa.RevDatabk, 0, strlen(USARTLoRa.RevDatabk) ); //clear LoRa response check string
 8001d3a:	4835      	ldr	r0, [pc, #212]	; (8001e10 <LoRaResCheck+0xf8>)
 8001d3c:	f7fe fa62 	bl	8000204 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	2100      	movs	r1, #0
 8001d46:	4832      	ldr	r0, [pc, #200]	; (8001e10 <LoRaResCheck+0xf8>)
 8001d48:	f00b fa10 	bl	800d16c <memset>
	sprintf(USARTLoRa.RevDatabk, USARTLoRa.RevData);
 8001d4c:	4931      	ldr	r1, [pc, #196]	; (8001e14 <LoRaResCheck+0xfc>)
 8001d4e:	4830      	ldr	r0, [pc, #192]	; (8001e10 <LoRaResCheck+0xf8>)
 8001d50:	f00c f894 	bl	800de7c <siprintf>

	char txResLHead_Check[] = "\n\r>> mac comm";
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <LoRaResCheck+0x100>)
 8001d56:	f107 0408 	add.w	r4, r7, #8
 8001d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5c:	c407      	stmia	r4!, {r0, r1, r2}
 8001d5e:	8023      	strh	r3, [r4, #0]


	if(strcmp(USARTLoRa.Res_Check, txResLHead_Check ) == 0)
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	4619      	mov	r1, r3
 8001d66:	4829      	ldr	r0, [pc, #164]	; (8001e0c <LoRaResCheck+0xf4>)
 8001d68:	f7fe fa42 	bl	80001f0 <strcmp>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d134      	bne.n	8001ddc <LoRaResCheck+0xc4>
	{
		int8_t c;
		for(c=0;c<=15;c++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
 8001d76:	e012      	b.n	8001d9e <LoRaResCheck+0x86>
		{
			USARTLoRa.txResLHead[c]=USARTLoRa.RevData[c];
 8001d78:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d80:	4926      	ldr	r1, [pc, #152]	; (8001e1c <LoRaResCheck+0x104>)
 8001d82:	440a      	add	r2, r1
 8001d84:	f892 11a0 	ldrb.w	r1, [r2, #416]	; 0x1a0
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <LoRaResCheck+0x104>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		for(c=0;c<=15;c++)
 8001d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	75fb      	strb	r3, [r7, #23]
 8001d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	dde8      	ble.n	8001d78 <LoRaResCheck+0x60>
		}
		if(strcmp( USARTLoRa.txResLHead, USARTLoRa.Res_Check ) == 0)
 8001da6:	4919      	ldr	r1, [pc, #100]	; (8001e0c <LoRaResCheck+0xf4>)
 8001da8:	481d      	ldr	r0, [pc, #116]	; (8001e20 <LoRaResCheck+0x108>)
 8001daa:	f7fe fa21 	bl	80001f0 <strcmp>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d127      	bne.n	8001e04 <LoRaResCheck+0xec>
		{
			memset(USARTLoRa.txResLHead, 0, strlen(USARTLoRa.txResLHead) ); //clear LoRa txResLHead
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <LoRaResCheck+0x108>)
 8001db6:	f7fe fa25 	bl	8000204 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4817      	ldr	r0, [pc, #92]	; (8001e20 <LoRaResCheck+0x108>)
 8001dc2:	f00b f9d3 	bl	800d16c <memset>
			memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8001dc6:	4813      	ldr	r0, [pc, #76]	; (8001e14 <LoRaResCheck+0xfc>)
 8001dc8:	f7fe fa1c 	bl	8000204 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4810      	ldr	r0, [pc, #64]	; (8001e14 <LoRaResCheck+0xfc>)
 8001dd4:	f00b f9ca 	bl	800d16c <memset>
			return LoRa_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e013      	b.n	8001e04 <LoRaResCheck+0xec>
		}
	}
	else if(strcmp( USARTLoRa.RevData, USARTLoRa.Res_Check ) == 0)
 8001ddc:	490b      	ldr	r1, [pc, #44]	; (8001e0c <LoRaResCheck+0xf4>)
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <LoRaResCheck+0xfc>)
 8001de0:	f7fe fa06 	bl	80001f0 <strcmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10a      	bne.n	8001e00 <LoRaResCheck+0xe8>
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <LoRaResCheck+0xfc>)
 8001dec:	f7fe fa0a 	bl	8000204 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	2100      	movs	r1, #0
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <LoRaResCheck+0xfc>)
 8001df8:	f00b f9b8 	bl	800d16c <memset>
		return LoRa_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e001      	b.n	8001e04 <LoRaResCheck+0xec>
	}
	else
	{
		return LoRa_Res_Err;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e7ff      	b.n	8001e04 <LoRaResCheck+0xec>
	}
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	20000752 	.word	0x20000752
 8001e10:	200004a0 	.word	0x200004a0
 8001e14:	20000440 	.word	0x20000440
 8001e18:	08011be0 	.word	0x08011be0
 8001e1c:	200002a0 	.word	0x200002a0
 8001e20:	200005c0 	.word	0x200005c0

08001e24 <LoRaTxResCheck>:

 LoRa_StatusTypeDef LoRaTxResCheck(uint8_t *pData, uint32_t *Res)
{
 8001e24:	b5b0      	push	{r4, r5, r7, lr}
 8001e26:	b090      	sub	sp, #64	; 0x40
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	memset(USARTLoRa.Res_Check, 0, strlen(USARTLoRa.Res_Check) ); //clear LoRa response check string
 8001e2e:	4854      	ldr	r0, [pc, #336]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001e30:	f7fe f9e8 	bl	8000204 <strlen>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4851      	ldr	r0, [pc, #324]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001e3c:	f00b f996 	bl	800d16c <memset>
	sprintf(USARTLoRa.Res_Check,Res);
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	484f      	ldr	r0, [pc, #316]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001e44:	f00c f81a 	bl	800de7c <siprintf>

	memset(USARTLoRa.RevDatabk, 0, strlen(USARTLoRa.RevDatabk) ); //clear LoRa response check string
 8001e48:	484e      	ldr	r0, [pc, #312]	; (8001f84 <LoRaTxResCheck+0x160>)
 8001e4a:	f7fe f9db 	bl	8000204 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	2100      	movs	r1, #0
 8001e54:	484b      	ldr	r0, [pc, #300]	; (8001f84 <LoRaTxResCheck+0x160>)
 8001e56:	f00b f989 	bl	800d16c <memset>
	sprintf(USARTLoRa.RevDatabk, pData);
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4849      	ldr	r0, [pc, #292]	; (8001f84 <LoRaTxResCheck+0x160>)
 8001e5e:	f00c f80d 	bl	800de7c <siprintf>

	char Uplink_Check[] = "\n\r>> mac command (uplink)";
 8001e62:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <LoRaTxResCheck+0x164>)
 8001e64:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001e68:	461d      	mov	r5, r3
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e72:	c403      	stmia	r4!, {r0, r1}
 8001e74:	8022      	strh	r2, [r4, #0]
	char Downlink_Check[] = "\n\r>> mac command (downlink)";
 8001e76:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <LoRaTxResCheck+0x168>)
 8001e78:	f107 0408 	add.w	r4, r7, #8
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if(strcmp(USARTLoRa.Res_Check, Uplink_Check ) == 0)
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	4619      	mov	r1, r3
 8001e90:	483b      	ldr	r0, [pc, #236]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001e92:	f7fe f9ad 	bl	80001f0 <strcmp>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d12c      	bne.n	8001ef6 <LoRaTxResCheck+0xd2>
	{
		int8_t c;
		for(c=0;c<25;c++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001ea2:	e012      	b.n	8001eca <LoRaTxResCheck+0xa6>
		{
			USARTLoRa.txResLHead[c]=pData[c];
 8001ea4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	441a      	add	r2, r3
 8001eac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001eb0:	7811      	ldrb	r1, [r2, #0]
 8001eb2:	4a37      	ldr	r2, [pc, #220]	; (8001f90 <LoRaTxResCheck+0x16c>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	460a      	mov	r2, r1
 8001eb8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		for(c=0;c<25;c++)
 8001ebc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001eca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ece:	2b18      	cmp	r3, #24
 8001ed0:	dde8      	ble.n	8001ea4 <LoRaTxResCheck+0x80>
		}
		if(strcmp( USARTLoRa.txResLHead, USARTLoRa.Res_Check ) == 0)
 8001ed2:	492b      	ldr	r1, [pc, #172]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001ed4:	482f      	ldr	r0, [pc, #188]	; (8001f94 <LoRaTxResCheck+0x170>)
 8001ed6:	f7fe f98b 	bl	80001f0 <strcmp>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d14b      	bne.n	8001f78 <LoRaTxResCheck+0x154>
		{
			memset(USARTLoRa.txResLHead, 0, strlen(USARTLoRa.txResLHead) ); //clear LoRa txResLHead
 8001ee0:	482c      	ldr	r0, [pc, #176]	; (8001f94 <LoRaTxResCheck+0x170>)
 8001ee2:	f7fe f98f 	bl	8000204 <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2100      	movs	r1, #0
 8001eec:	4829      	ldr	r0, [pc, #164]	; (8001f94 <LoRaTxResCheck+0x170>)
 8001eee:	f00b f93d 	bl	800d16c <memset>

			return LoRa_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e040      	b.n	8001f78 <LoRaTxResCheck+0x154>
		}
	}
	else if(strcmp(USARTLoRa.Res_Check, Downlink_Check ) == 0)
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	4820      	ldr	r0, [pc, #128]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001efe:	f7fe f977 	bl	80001f0 <strcmp>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d12c      	bne.n	8001f62 <LoRaTxResCheck+0x13e>
	{
		int8_t c;
		for(c=0;c<27;c++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f0e:	e012      	b.n	8001f36 <LoRaTxResCheck+0x112>
		{
			USARTLoRa.txResLHead[c]=pData[c];
 8001f10:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	441a      	add	r2, r3
 8001f18:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001f1c:	7811      	ldrb	r1, [r2, #0]
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <LoRaTxResCheck+0x16c>)
 8001f20:	4413      	add	r3, r2
 8001f22:	460a      	mov	r2, r1
 8001f24:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		for(c=0;c<27;c++)
 8001f28:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f36:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001f3a:	2b1a      	cmp	r3, #26
 8001f3c:	dde8      	ble.n	8001f10 <LoRaTxResCheck+0xec>
		}
		if(strcmp( USARTLoRa.txResLHead, USARTLoRa.Res_Check ) == 0)
 8001f3e:	4910      	ldr	r1, [pc, #64]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001f40:	4814      	ldr	r0, [pc, #80]	; (8001f94 <LoRaTxResCheck+0x170>)
 8001f42:	f7fe f955 	bl	80001f0 <strcmp>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d115      	bne.n	8001f78 <LoRaTxResCheck+0x154>
		{
			memset(USARTLoRa.txResLHead, 0, strlen(USARTLoRa.txResLHead) ); //clear LoRa txResLHead
 8001f4c:	4811      	ldr	r0, [pc, #68]	; (8001f94 <LoRaTxResCheck+0x170>)
 8001f4e:	f7fe f959 	bl	8000204 <strlen>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	480e      	ldr	r0, [pc, #56]	; (8001f94 <LoRaTxResCheck+0x170>)
 8001f5a:	f00b f907 	bl	800d16c <memset>

			return LoRa_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e00a      	b.n	8001f78 <LoRaTxResCheck+0x154>
		}
	}
	else if(strcmp( pData, USARTLoRa.Res_Check ) == 0)
 8001f62:	4907      	ldr	r1, [pc, #28]	; (8001f80 <LoRaTxResCheck+0x15c>)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe f943 	bl	80001f0 <strcmp>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <LoRaTxResCheck+0x150>
		return LoRa_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e001      	b.n	8001f78 <LoRaTxResCheck+0x154>
	else
		return LoRa_Res_Err;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e7ff      	b.n	8001f78 <LoRaTxResCheck+0x154>
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3740      	adds	r7, #64	; 0x40
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	20000752 	.word	0x20000752
 8001f84:	200004a0 	.word	0x200004a0
 8001f88:	08011bf0 	.word	0x08011bf0
 8001f8c:	08011c0c 	.word	0x08011c0c
 8001f90:	200002a0 	.word	0x200002a0
 8001f94:	200005c0 	.word	0x200005c0

08001f98 <Check_2ResMsg>:


LoRa_StatusTypeDef Check_2ResMsg(uint32_t *Res1, uint32_t *Res2)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
	//wait data Response
	while(!USARTLoRa.Revflag);
 8001fa2:	bf00      	nop
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <Check_2ResMsg+0x9c>)
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f8      	bne.n	8001fa4 <Check_2ResMsg+0xc>
	USARTLoRa.Revflag=0;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <Check_2ResMsg+0x9c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	705a      	strb	r2, [r3, #1]
	if((USARTLoRa.ResStatus=LoRaResCheck(Res1))==LoRa_OK)
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fead 	bl	8001d18 <LoRaResCheck>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <Check_2ResMsg+0x9c>)
 8001fc4:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <Check_2ResMsg+0x9c>)
 8001fca:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <Check_2ResMsg+0x4a>
	{
		if(Res1 =="\n\r>> joined\n")
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a18      	ldr	r2, [pc, #96]	; (8002038 <Check_2ResMsg+0xa0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <Check_2ResMsg+0x46>
			return LoRa_joined;
 8001fda:	2313      	movs	r3, #19
 8001fdc:	e026      	b.n	800202c <Check_2ResMsg+0x94>
		else
			return LoRa_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e024      	b.n	800202c <Check_2ResMsg+0x94>

	}
	else if((USARTLoRa.ResStatus=LoRaResCheck(Res2))==LoRa_OK)
 8001fe2:	6838      	ldr	r0, [r7, #0]
 8001fe4:	f7ff fe98 	bl	8001d18 <LoRaResCheck>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <Check_2ResMsg+0x9c>)
 8001fee:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <Check_2ResMsg+0x9c>)
 8001ff4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <Check_2ResMsg+0x80>
	{
		if(Res2 =="\n\r>> unjoined\n")
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <Check_2ResMsg+0xa4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <Check_2ResMsg+0x70>
			return LoRa_unjoined;
 8002004:	2314      	movs	r3, #20
 8002006:	e011      	b.n	800202c <Check_2ResMsg+0x94>
		else if(Res2 =="\n\r>> unsuccess\n")
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <Check_2ResMsg+0xa8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <Check_2ResMsg+0x7c>
			return LoRa_Join_FAIL;
 8002010:	2306      	movs	r3, #6
 8002012:	e00b      	b.n	800202c <Check_2ResMsg+0x94>
		else
			return LoRa_Res_Err;
 8002014:	2301      	movs	r3, #1
 8002016:	e009      	b.n	800202c <Check_2ResMsg+0x94>
	}

	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8002018:	480a      	ldr	r0, [pc, #40]	; (8002044 <Check_2ResMsg+0xac>)
 800201a:	f7fe f8f3 	bl	8000204 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	2100      	movs	r1, #0
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <Check_2ResMsg+0xac>)
 8002026:	f00b f8a1 	bl	800d16c <memset>
		return LoRa_unexpected_Err;
 800202a:	2317      	movs	r3, #23
	}
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200002a0 	.word	0x200002a0
 8002038:	08011c28 	.word	0x08011c28
 800203c:	08011c38 	.word	0x08011c38
 8002040:	08011ba8 	.word	0x08011ba8
 8002044:	20000440 	.word	0x20000440

08002048 <Check_JoinResMsg>:

LoRa_StatusTypeDef Check_JoinResMsg()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	//wait data Response
	while(!USARTLoRa.Revflag);
 800204c:	bf00      	nop
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <Check_JoinResMsg+0xc8>)
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f8      	bne.n	800204e <Check_JoinResMsg+0x6>
	USARTLoRa.Revflag=0;
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <Check_JoinResMsg+0xc8>)
 800205e:	2200      	movs	r2, #0
 8002060:	705a      	strb	r2, [r3, #1]
	if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n"))==LoRa_OK)
 8002062:	482c      	ldr	r0, [pc, #176]	; (8002114 <Check_JoinResMsg+0xcc>)
 8002064:	f7ff fe58 	bl	8001d18 <LoRaResCheck>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <Check_JoinResMsg+0xc8>)
 800206e:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002072:	4b27      	ldr	r3, [pc, #156]	; (8002110 <Check_JoinResMsg+0xc8>)
 8002074:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <Check_JoinResMsg+0x38>
		return LoRa_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e045      	b.n	800210c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Invalid\n"))==LoRa_OK)
 8002080:	4825      	ldr	r0, [pc, #148]	; (8002118 <Check_JoinResMsg+0xd0>)
 8002082:	f7ff fe49 	bl	8001d18 <LoRaResCheck>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <Check_JoinResMsg+0xc8>)
 800208c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002090:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <Check_JoinResMsg+0xc8>)
 8002092:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <Check_JoinResMsg+0x56>
		return LoRa_Join_Invalid;
 800209a:	2302      	movs	r3, #2
 800209c:	e036      	b.n	800210c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> keys_not_init\n"))==LoRa_OK)
 800209e:	481f      	ldr	r0, [pc, #124]	; (800211c <Check_JoinResMsg+0xd4>)
 80020a0:	f7ff fe3a 	bl	8001d18 <LoRaResCheck>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <Check_JoinResMsg+0xc8>)
 80020aa:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <Check_JoinResMsg+0xc8>)
 80020b0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <Check_JoinResMsg+0x74>
		return LoRa_Join_keys_not_init;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e027      	b.n	800210c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> no_free_ch\n"))==LoRa_OK)
 80020bc:	4818      	ldr	r0, [pc, #96]	; (8002120 <Check_JoinResMsg+0xd8>)
 80020be:	f7ff fe2b 	bl	8001d18 <LoRaResCheck>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <Check_JoinResMsg+0xc8>)
 80020c8:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <Check_JoinResMsg+0xc8>)
 80020ce:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <Check_JoinResMsg+0x92>
		return LoRa_Join_no_free_ch;
 80020d6:	2304      	movs	r3, #4
 80020d8:	e018      	b.n	800210c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> busy\n"))==LoRa_OK)
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <Check_JoinResMsg+0xdc>)
 80020dc:	f7ff fe1c 	bl	8001d18 <LoRaResCheck>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <Check_JoinResMsg+0xc8>)
 80020e6:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <Check_JoinResMsg+0xc8>)
 80020ec:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <Check_JoinResMsg+0xb0>
		return LoRa_Join_busy;
 80020f4:	2305      	movs	r3, #5
 80020f6:	e009      	b.n	800210c <Check_JoinResMsg+0xc4>
	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <Check_JoinResMsg+0xe0>)
 80020fa:	f7fe f883 	bl	8000204 <strlen>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	2100      	movs	r1, #0
 8002104:	4808      	ldr	r0, [pc, #32]	; (8002128 <Check_JoinResMsg+0xe0>)
 8002106:	f00b f831 	bl	800d16c <memset>
		return LoRa_unexpected_Err;
 800210a:	2317      	movs	r3, #23
	}
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200002a0 	.word	0x200002a0
 8002114:	08011a50 	.word	0x08011a50
 8002118:	08011a40 	.word	0x08011a40
 800211c:	08011c48 	.word	0x08011c48
 8002120:	08011c5c 	.word	0x08011c5c
 8002124:	08011c70 	.word	0x08011c70
 8002128:	20000440 	.word	0x20000440

0800212c <Check_Tx1stResMsg>:

LoRa_StatusTypeDef Check_Tx1stResMsg()
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
	uint8_t TxRevMsgCount;
	for(TxRevMsgCount = 0; TxRevMsgCount < (Max_TxRev1stMsg_Size + 1); TxRevMsgCount++)
 8002132:	2300      	movs	r3, #0
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	e058      	b.n	80021ea <Check_Tx1stResMsg+0xbe>
	{
		while(!USARTLoRa.Revflag)
		{
			USARTLoRa.TxRevTimerflag=1;
 8002138:	4b94      	ldr	r3, [pc, #592]	; (800238c <Check_Tx1stResMsg+0x260>)
 800213a:	2201      	movs	r2, #1
 800213c:	719a      	strb	r2, [r3, #6]
			//if receive time > 25ms, exit wait receive
			if(USARTLoRa.TxRevTimerCount > 25)
 800213e:	4b93      	ldr	r3, [pc, #588]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002140:	f893 34ee 	ldrb.w	r3, [r3, #1262]	; 0x4ee
 8002144:	2b19      	cmp	r3, #25
 8002146:	d807      	bhi.n	8002158 <Check_Tx1stResMsg+0x2c>
		while(!USARTLoRa.Revflag)
 8002148:	4b90      	ldr	r3, [pc, #576]	; (800238c <Check_Tx1stResMsg+0x260>)
 800214a:	785b      	ldrb	r3, [r3, #1]
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <Check_Tx1stResMsg+0xc>
 8002156:	e000      	b.n	800215a <Check_Tx1stResMsg+0x2e>
 				break;
 8002158:	bf00      	nop
		}
		//if receive time > 25ms, End receive 1st Msg
		if(USARTLoRa.TxRevTimerCount > 25 )
 800215a:	4b8c      	ldr	r3, [pc, #560]	; (800238c <Check_Tx1stResMsg+0x260>)
 800215c:	f893 34ee 	ldrb.w	r3, [r3, #1262]	; 0x4ee
 8002160:	2b19      	cmp	r3, #25
 8002162:	d907      	bls.n	8002174 <Check_Tx1stResMsg+0x48>
		{
			USARTLoRa.TxRevTimerCount = 0;
 8002164:	4b89      	ldr	r3, [pc, #548]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002166:	2200      	movs	r2, #0
 8002168:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 			USARTLoRa.TxRevTimerflag= 0 ;
 800216c:	4b87      	ldr	r3, [pc, #540]	; (800238c <Check_Tx1stResMsg+0x260>)
 800216e:	2200      	movs	r2, #0
 8002170:	719a      	strb	r2, [r3, #6]
			break;
 8002172:	e03d      	b.n	80021f0 <Check_Tx1stResMsg+0xc4>
		}
		USARTLoRa.TxRevTimerCount = 0;
 8002174:	4b85      	ldr	r3, [pc, #532]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002176:	2200      	movs	r2, #0
 8002178:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
		USARTLoRa.TxRevTimerflag = 0;
 800217c:	4b83      	ldr	r3, [pc, #524]	; (800238c <Check_Tx1stResMsg+0x260>)
 800217e:	2200      	movs	r2, #0
 8002180:	719a      	strb	r2, [r3, #6]
        
		USARTLoRa.Revflag=0;       
 8002182:	4b82      	ldr	r3, [pc, #520]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
		memset(USARTLoRa.TxRev1stData[TxRevMsgCount], 0, strlen(USARTLoRa.TxRev1stData[TxRevMsgCount]) ); //clear LoRa response check string
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2246      	movs	r2, #70	; 0x46
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8002194:	4a7d      	ldr	r2, [pc, #500]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002196:	189c      	adds	r4, r3, r2
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2246      	movs	r2, #70	; 0x46
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80021a4:	4a79      	ldr	r2, [pc, #484]	; (800238c <Check_Tx1stResMsg+0x260>)
 80021a6:	4413      	add	r3, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f82b 	bl	8000204 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	4620      	mov	r0, r4
 80021b6:	f00a ffd9 	bl	800d16c <memset>
		sprintf(USARTLoRa.TxRev1stData[TxRevMsgCount], USARTLoRa.RevData);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2246      	movs	r2, #70	; 0x46
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80021c6:	4a71      	ldr	r2, [pc, #452]	; (800238c <Check_Tx1stResMsg+0x260>)
 80021c8:	4413      	add	r3, r2
 80021ca:	4971      	ldr	r1, [pc, #452]	; (8002390 <Check_Tx1stResMsg+0x264>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f00b fe55 	bl	800de7c <siprintf>
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa response check string
 80021d2:	486f      	ldr	r0, [pc, #444]	; (8002390 <Check_Tx1stResMsg+0x264>)
 80021d4:	f7fe f816 	bl	8000204 <strlen>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	2100      	movs	r1, #0
 80021de:	486c      	ldr	r0, [pc, #432]	; (8002390 <Check_Tx1stResMsg+0x264>)
 80021e0:	f00a ffc4 	bl	800d16c <memset>
	for(TxRevMsgCount = 0; TxRevMsgCount < (Max_TxRev1stMsg_Size + 1); TxRevMsgCount++)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	3301      	adds	r3, #1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d9ab      	bls.n	8002148 <Check_Tx1stResMsg+0x1c>
	}
	uint8_t MsgCheckCount;
	for(MsgCheckCount = 0; MsgCheckCount < TxRevMsgCount ; MsgCheckCount++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	71bb      	strb	r3, [r7, #6]
 80021f4:	79ba      	ldrb	r2, [r7, #6]
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f080 80c2 	bcs.w	8002382 <Check_Tx1stResMsg+0x256>
	{
		if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> mac command (uplink)"))==LoRa_OK)
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	2246      	movs	r2, #70	; 0x46
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800220a:	4a60      	ldr	r2, [pc, #384]	; (800238c <Check_Tx1stResMsg+0x260>)
 800220c:	4413      	add	r3, r2
 800220e:	4961      	ldr	r1, [pc, #388]	; (8002394 <Check_Tx1stResMsg+0x268>)
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fe07 	bl	8001e24 <LoRaTxResCheck>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	4b5c      	ldr	r3, [pc, #368]	; (800238c <Check_Tx1stResMsg+0x260>)
 800221c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002220:	4b5a      	ldr	r3, [pc, #360]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002222:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <Check_Tx1stResMsg+0x102>
			return LoRa_Response_Uplink;
 800222a:	2319      	movs	r3, #25
 800222c:	e0a9      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> Ok\n"))==LoRa_OK)
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	2246      	movs	r2, #70	; 0x46
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800223a:	4a54      	ldr	r2, [pc, #336]	; (800238c <Check_Tx1stResMsg+0x260>)
 800223c:	4413      	add	r3, r2
 800223e:	4956      	ldr	r1, [pc, #344]	; (8002398 <Check_Tx1stResMsg+0x26c>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fdef 	bl	8001e24 <LoRaTxResCheck>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	4b50      	ldr	r3, [pc, #320]	; (800238c <Check_Tx1stResMsg+0x260>)
 800224c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002250:	4b4e      	ldr	r3, [pc, #312]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002252:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <Check_Tx1stResMsg+0x132>
			return LoRa_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e091      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> Invalid\n"))==LoRa_OK)
 800225e:	79bb      	ldrb	r3, [r7, #6]
 8002260:	2246      	movs	r2, #70	; 0x46
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800226a:	4a48      	ldr	r2, [pc, #288]	; (800238c <Check_Tx1stResMsg+0x260>)
 800226c:	4413      	add	r3, r2
 800226e:	494b      	ldr	r1, [pc, #300]	; (800239c <Check_Tx1stResMsg+0x270>)
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fdd7 	bl	8001e24 <LoRaTxResCheck>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b44      	ldr	r3, [pc, #272]	; (800238c <Check_Tx1stResMsg+0x260>)
 800227c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002280:	4b42      	ldr	r3, [pc, #264]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002282:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <Check_Tx1stResMsg+0x162>
			return LoRa_Tx_Invalid;
 800228a:	2309      	movs	r3, #9
 800228c:	e079      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> not_joined\n"))==LoRa_OK)
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	2246      	movs	r2, #70	; 0x46
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800229a:	4a3c      	ldr	r2, [pc, #240]	; (800238c <Check_Tx1stResMsg+0x260>)
 800229c:	4413      	add	r3, r2
 800229e:	4940      	ldr	r1, [pc, #256]	; (80023a0 <Check_Tx1stResMsg+0x274>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fdbf 	bl	8001e24 <LoRaTxResCheck>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <Check_Tx1stResMsg+0x260>)
 80022ac:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <Check_Tx1stResMsg+0x260>)
 80022b2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <Check_Tx1stResMsg+0x192>
			return LoRa_Tx_not_joined;
 80022ba:	230a      	movs	r3, #10
 80022bc:	e061      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> no_free_ch\n"))==LoRa_OK)
 80022be:	79bb      	ldrb	r3, [r7, #6]
 80022c0:	2246      	movs	r2, #70	; 0x46
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <Check_Tx1stResMsg+0x260>)
 80022cc:	4413      	add	r3, r2
 80022ce:	4935      	ldr	r1, [pc, #212]	; (80023a4 <Check_Tx1stResMsg+0x278>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fda7 	bl	8001e24 <LoRaTxResCheck>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <Check_Tx1stResMsg+0x260>)
 80022dc:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <Check_Tx1stResMsg+0x260>)
 80022e2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <Check_Tx1stResMsg+0x1c2>
			return LoRa_Tx_no_free_ch;
 80022ea:	230b      	movs	r3, #11
 80022ec:	e049      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> busy\n"))==LoRa_OK)
 80022ee:	79bb      	ldrb	r3, [r7, #6]
 80022f0:	2246      	movs	r2, #70	; 0x46
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80022fa:	4a24      	ldr	r2, [pc, #144]	; (800238c <Check_Tx1stResMsg+0x260>)
 80022fc:	4413      	add	r3, r2
 80022fe:	492a      	ldr	r1, [pc, #168]	; (80023a8 <Check_Tx1stResMsg+0x27c>)
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fd8f 	bl	8001e24 <LoRaTxResCheck>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <Check_Tx1stResMsg+0x260>)
 800230c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002312:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <Check_Tx1stResMsg+0x1f2>
			return LoRa_Tx_busy;
 800231a:	230c      	movs	r3, #12
 800231c:	e031      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> invalid_data_length\n"))==LoRa_OK)
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	2246      	movs	r2, #70	; 0x46
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800232a:	4a18      	ldr	r2, [pc, #96]	; (800238c <Check_Tx1stResMsg+0x260>)
 800232c:	4413      	add	r3, r2
 800232e:	491f      	ldr	r1, [pc, #124]	; (80023ac <Check_Tx1stResMsg+0x280>)
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fd77 	bl	8001e24 <LoRaTxResCheck>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <Check_Tx1stResMsg+0x260>)
 800233c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002342:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <Check_Tx1stResMsg+0x222>
			return LoRa_Tx_invalid_data_length;
 800234a:	230d      	movs	r3, #13
 800234c:	e019      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev1stData[MsgCheckCount],"\n\r>> exceeded_data_length\n"))==LoRa_OK)
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	2246      	movs	r2, #70	; 0x46
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <Check_Tx1stResMsg+0x260>)
 800235c:	4413      	add	r3, r2
 800235e:	4914      	ldr	r1, [pc, #80]	; (80023b0 <Check_Tx1stResMsg+0x284>)
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fd5f 	bl	8001e24 <LoRaTxResCheck>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <Check_Tx1stResMsg+0x260>)
 800236c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <Check_Tx1stResMsg+0x260>)
 8002372:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <Check_Tx1stResMsg+0x252>
			return LoRa_Tx_exceeded_data_length;
 800237a:	230e      	movs	r3, #14
 800237c:	e001      	b.n	8002382 <Check_Tx1stResMsg+0x256>
		else
			return LoRa_unexpected_Err;
 800237e:	2317      	movs	r3, #23
 8002380:	e7ff      	b.n	8002382 <Check_Tx1stResMsg+0x256>
	}   
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	200002a0 	.word	0x200002a0
 8002390:	20000440 	.word	0x20000440
 8002394:	08011bf0 	.word	0x08011bf0
 8002398:	08011a50 	.word	0x08011a50
 800239c:	08011a40 	.word	0x08011a40
 80023a0:	08011c7c 	.word	0x08011c7c
 80023a4:	08011c5c 	.word	0x08011c5c
 80023a8:	08011c70 	.word	0x08011c70
 80023ac:	08011c90 	.word	0x08011c90
 80023b0:	08011cac 	.word	0x08011cac

080023b4 <Check_Tx2ndResMsg>:
LoRa_StatusTypeDef Check_Tx2ndResMsg()
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0

	uint8_t TxRevMsgCount;
	for(TxRevMsgCount = 0; TxRevMsgCount < (Max_TxRev2ndMsg_Size + 1); TxRevMsgCount++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	71fb      	strb	r3, [r7, #7]
 80023be:	e065      	b.n	800248c <Check_Tx2ndResMsg+0xd8>
	{
		if(TxRevMsgCount != 0)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d026      	beq.n	8002414 <Check_Tx2ndResMsg+0x60>
		{
			while(!USARTLoRa.Revflag)
 80023c6:	e007      	b.n	80023d8 <Check_Tx2ndResMsg+0x24>
			{
				USARTLoRa.TxRevTimerflag=1;
 80023c8:	4b5c      	ldr	r3, [pc, #368]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	719a      	strb	r2, [r3, #6]
				//if receive time > 25ms, exit wait receive
				if(USARTLoRa.TxRevTimerCount > 25)
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80023d0:	f893 34ee 	ldrb.w	r3, [r3, #1262]	; 0x4ee
 80023d4:	2b19      	cmp	r3, #25
 80023d6:	d807      	bhi.n	80023e8 <Check_Tx2ndResMsg+0x34>
			while(!USARTLoRa.Revflag)
 80023d8:	4b58      	ldr	r3, [pc, #352]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	f083 0301 	eor.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <Check_Tx2ndResMsg+0x14>
 80023e6:	e000      	b.n	80023ea <Check_Tx2ndResMsg+0x36>
					break;
 80023e8:	bf00      	nop
			}
			//if receive time > 25ms, End receive 1st Msg
			if(USARTLoRa.TxRevTimerCount > 25 )
 80023ea:	4b54      	ldr	r3, [pc, #336]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80023ec:	f893 34ee 	ldrb.w	r3, [r3, #1262]	; 0x4ee
 80023f0:	2b19      	cmp	r3, #25
 80023f2:	d907      	bls.n	8002404 <Check_Tx2ndResMsg+0x50>
			{
				USARTLoRa.TxRevTimerCount = 0;
 80023f4:	4b51      	ldr	r3, [pc, #324]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
				USARTLoRa.TxRevTimerflag= 0 ;
 80023fc:	4b4f      	ldr	r3, [pc, #316]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80023fe:	2200      	movs	r2, #0
 8002400:	719a      	strb	r2, [r3, #6]
				break;
 8002402:	e046      	b.n	8002492 <Check_Tx2ndResMsg+0xde>
			}
			USARTLoRa.TxRevTimerCount = 0;
 8002404:	4b4d      	ldr	r3, [pc, #308]	; (800253c <Check_Tx2ndResMsg+0x188>)
 8002406:	2200      	movs	r2, #0
 8002408:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
			USARTLoRa.TxRevTimerflag = 0;
 800240c:	4b4b      	ldr	r3, [pc, #300]	; (800253c <Check_Tx2ndResMsg+0x188>)
 800240e:	2200      	movs	r2, #0
 8002410:	719a      	strb	r2, [r3, #6]
 8002412:	e007      	b.n	8002424 <Check_Tx2ndResMsg+0x70>
		}
		else
			while(!USARTLoRa.Revflag);
 8002414:	bf00      	nop
 8002416:	4b49      	ldr	r3, [pc, #292]	; (800253c <Check_Tx2ndResMsg+0x188>)
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f8      	bne.n	8002416 <Check_Tx2ndResMsg+0x62>

		USARTLoRa.Revflag=0;
 8002424:	4b45      	ldr	r3, [pc, #276]	; (800253c <Check_Tx2ndResMsg+0x188>)
 8002426:	2200      	movs	r2, #0
 8002428:	705a      	strb	r2, [r3, #1]
	    memset(USARTLoRa.TxRev2ndData[TxRevMsgCount], 0, strlen(USARTLoRa.TxRev2ndData[TxRevMsgCount]) ); //clear LoRa response check string
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2246      	movs	r2, #70	; 0x46
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8002436:	4a41      	ldr	r2, [pc, #260]	; (800253c <Check_Tx2ndResMsg+0x188>)
 8002438:	189c      	adds	r4, r3, r2
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2246      	movs	r2, #70	; 0x46
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8002446:	4a3d      	ldr	r2, [pc, #244]	; (800253c <Check_Tx2ndResMsg+0x188>)
 8002448:	4413      	add	r3, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd feda 	bl	8000204 <strlen>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	2100      	movs	r1, #0
 8002456:	4620      	mov	r0, r4
 8002458:	f00a fe88 	bl	800d16c <memset>
	    sprintf(USARTLoRa.TxRev2ndData[TxRevMsgCount], USARTLoRa.RevData);
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2246      	movs	r2, #70	; 0x46
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8002468:	4a34      	ldr	r2, [pc, #208]	; (800253c <Check_Tx2ndResMsg+0x188>)
 800246a:	4413      	add	r3, r2
 800246c:	4934      	ldr	r1, [pc, #208]	; (8002540 <Check_Tx2ndResMsg+0x18c>)
 800246e:	4618      	mov	r0, r3
 8002470:	f00b fd04 	bl	800de7c <siprintf>
	    memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa response check string
 8002474:	4832      	ldr	r0, [pc, #200]	; (8002540 <Check_Tx2ndResMsg+0x18c>)
 8002476:	f7fd fec5 	bl	8000204 <strlen>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	2100      	movs	r1, #0
 8002480:	482f      	ldr	r0, [pc, #188]	; (8002540 <Check_Tx2ndResMsg+0x18c>)
 8002482:	f00a fe73 	bl	800d16c <memset>
	for(TxRevMsgCount = 0; TxRevMsgCount < (Max_TxRev2ndMsg_Size + 1); TxRevMsgCount++)
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	3301      	adds	r3, #1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d996      	bls.n	80023c0 <Check_Tx2ndResMsg+0xc>
	}
	uint8_t MsgCheckCount;
	for(MsgCheckCount = 0; MsgCheckCount < TxRevMsgCount ; MsgCheckCount++)
 8002492:	2300      	movs	r3, #0
 8002494:	71bb      	strb	r3, [r7, #6]
 8002496:	79ba      	ldrb	r2, [r7, #6]
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	429a      	cmp	r2, r3
 800249c:	d249      	bcs.n	8002532 <Check_Tx2ndResMsg+0x17e>
	{
		if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev2ndData[MsgCheckCount],"\n\r>> mac command (downlink)"))==LoRa_OK)
 800249e:	79bb      	ldrb	r3, [r7, #6]
 80024a0:	2246      	movs	r2, #70	; 0x46
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80024aa:	4a24      	ldr	r2, [pc, #144]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80024ac:	4413      	add	r3, r2
 80024ae:	4925      	ldr	r1, [pc, #148]	; (8002544 <Check_Tx2ndResMsg+0x190>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fcb7 	bl	8001e24 <LoRaTxResCheck>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80024bc:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80024c2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <Check_Tx2ndResMsg+0x11a>
			return LoRa_Response_Downlink;
 80024ca:	231a      	movs	r3, #26
 80024cc:	e031      	b.n	8002532 <Check_Tx2ndResMsg+0x17e>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev2ndData[MsgCheckCount],"\n\r>> tx_ok\n"))==LoRa_OK)
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	2246      	movs	r2, #70	; 0x46
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80024dc:	4413      	add	r3, r2
 80024de:	491a      	ldr	r1, [pc, #104]	; (8002548 <Check_Tx2ndResMsg+0x194>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fc9f 	bl	8001e24 <LoRaTxResCheck>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80024ec:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <Check_Tx2ndResMsg+0x188>)
 80024f2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <Check_Tx2ndResMsg+0x14a>
			return LoRa_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e019      	b.n	8002532 <Check_Tx2ndResMsg+0x17e>
		else if((USARTLoRa.ResStatus=LoRaTxResCheck(&USARTLoRa.TxRev2ndData[MsgCheckCount],"\n\r>> err\n"))==LoRa_OK)
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	2246      	movs	r2, #70	; 0x46
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <Check_Tx2ndResMsg+0x188>)
 800250c:	4413      	add	r3, r2
 800250e:	490f      	ldr	r1, [pc, #60]	; (800254c <Check_Tx2ndResMsg+0x198>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fc87 	bl	8001e24 <LoRaTxResCheck>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <Check_Tx2ndResMsg+0x188>)
 800251c:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <Check_Tx2ndResMsg+0x188>)
 8002522:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <Check_Tx2ndResMsg+0x17a>
			return LoRa_Tx2_err;
 800252a:	230f      	movs	r3, #15
 800252c:	e001      	b.n	8002532 <Check_Tx2ndResMsg+0x17e>
		else
			return LoRa_unexpected_Err;
 800252e:	2317      	movs	r3, #23
 8002530:	e7ff      	b.n	8002532 <Check_Tx2ndResMsg+0x17e>
	}
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	bf00      	nop
 800253c:	200002a0 	.word	0x200002a0
 8002540:	20000440 	.word	0x20000440
 8002544:	08011c0c 	.word	0x08011c0c
 8002548:	08011cc8 	.word	0x08011cc8
 800254c:	08011cd4 	.word	0x08011cd4

08002550 <LoRaChipReset>:

void LoRaChipReset(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	//USARTLoRa.ResetRevflag=1;
	LoRaCommand(huart, LoRaReset);
 8002558:	4913      	ldr	r1, [pc, #76]	; (80025a8 <LoRaChipReset+0x58>)
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fb92 	bl	8001c84 <LoRaCommand>
	//receive reset response
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8002560:	4812      	ldr	r0, [pc, #72]	; (80025ac <LoRaChipReset+0x5c>)
 8002562:	f7fd fe4f 	bl	8000204 <strlen>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	2100      	movs	r1, #0
 800256c:	480f      	ldr	r0, [pc, #60]	; (80025ac <LoRaChipReset+0x5c>)
 800256e:	f00a fdfd 	bl	800d16c <memset>
	while(!USARTLoRa.Revflag);
 8002572:	bf00      	nop
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <LoRaChipReset+0x60>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	f083 0301 	eor.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f8      	bne.n	8002574 <LoRaChipReset+0x24>
	USARTLoRa.Revflag=0;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <LoRaChipReset+0x60>)
 8002584:	2200      	movs	r2, #0
 8002586:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResetRevflag=0;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <LoRaChipReset+0x60>)
 800258a:	2200      	movs	r2, #0
 800258c:	709a      	strb	r2, [r3, #2]
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <LoRaChipReset+0x5c>)
 8002590:	f7fd fe38 	bl	8000204 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	2100      	movs	r1, #0
 800259a:	4804      	ldr	r0, [pc, #16]	; (80025ac <LoRaChipReset+0x5c>)
 800259c:	f00a fde6 	bl	800d16c <memset>
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	08011ce0 	.word	0x08011ce0
 80025ac:	20000440 	.word	0x20000440
 80025b0:	200002a0 	.word	0x200002a0

080025b4 <LoRaFactorReset>:

void LoRaFactorReset(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	//USARTLoRa.ResetRevflag=1;
	LoRaCommand(huart, LoRaFacReset);
 80025bc:	4913      	ldr	r1, [pc, #76]	; (800260c <LoRaFactorReset+0x58>)
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fb60 	bl	8001c84 <LoRaCommand>
	//receive reset response
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80025c4:	4812      	ldr	r0, [pc, #72]	; (8002610 <LoRaFactorReset+0x5c>)
 80025c6:	f7fd fe1d 	bl	8000204 <strlen>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	480f      	ldr	r0, [pc, #60]	; (8002610 <LoRaFactorReset+0x5c>)
 80025d2:	f00a fdcb 	bl	800d16c <memset>
	while(!USARTLoRa.Revflag);
 80025d6:	bf00      	nop
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <LoRaFactorReset+0x60>)
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f8      	bne.n	80025d8 <LoRaFactorReset+0x24>
	USARTLoRa.Revflag=0;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <LoRaFactorReset+0x60>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResetRevflag=0;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <LoRaFactorReset+0x60>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	709a      	strb	r2, [r3, #2]
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80025f2:	4807      	ldr	r0, [pc, #28]	; (8002610 <LoRaFactorReset+0x5c>)
 80025f4:	f7fd fe06 	bl	8000204 <strlen>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	2100      	movs	r1, #0
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <LoRaFactorReset+0x5c>)
 8002600:	f00a fdb4 	bl	800d16c <memset>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	08011cec 	.word	0x08011cec
 8002610:	20000440 	.word	0x20000440
 8002614:	200002a0 	.word	0x200002a0

08002618 <WakeUpTrigger>:

LoRa_StatusTypeDef WakeUpTrigger(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);//Delay 150ms for S76S ready to wake-up
 8002620:	20c8      	movs	r0, #200	; 0xc8
 8002622:	f001 fbf1 	bl	8003e08 <HAL_Delay>
//	uint8_t getuart;
//	getuart=HAL_UART_GetState(huart);
 	LoRaCommand(huart, WKUPtigger);
 8002626:	4926      	ldr	r1, [pc, #152]	; (80026c0 <WakeUpTrigger+0xa8>)
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fb2b 	bl	8001c84 <LoRaCommand>
 	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 800262e:	4825      	ldr	r0, [pc, #148]	; (80026c4 <WakeUpTrigger+0xac>)
 8002630:	f7fd fde8 	bl	8000204 <strlen>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	4822      	ldr	r0, [pc, #136]	; (80026c4 <WakeUpTrigger+0xac>)
 800263c:	f00a fd96 	bl	800d16c <memset>
	//wait data Response
	while(!USARTLoRa.Revflag)
 8002640:	e00b      	b.n	800265a <WakeUpTrigger+0x42>
	{
		LoRachipCrashDetect_HDRST(&htim2);
 8002642:	4821      	ldr	r0, [pc, #132]	; (80026c8 <WakeUpTrigger+0xb0>)
 8002644:	f000 f8ee 	bl	8002824 <LoRachipCrashDetect_HDRST>
		if(USARTLoRa.ResStatus==LoRa_HDRest)
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <WakeUpTrigger+0xb4>)
 800264a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800264e:	2b18      	cmp	r3, #24
 8002650:	d103      	bne.n	800265a <WakeUpTrigger+0x42>
			return USARTLoRa.ResStatus;
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <WakeUpTrigger+0xb4>)
 8002654:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002658:	e02e      	b.n	80026b8 <WakeUpTrigger+0xa0>
	while(!USARTLoRa.Revflag)
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <WakeUpTrigger+0xb4>)
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	f083 0301 	eor.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ec      	bne.n	8002642 <WakeUpTrigger+0x2a>
	}
	LoRachipCrashDetect_Stop(&htim2);
 8002668:	4817      	ldr	r0, [pc, #92]	; (80026c8 <WakeUpTrigger+0xb0>)
 800266a:	f000 f937 	bl	80028dc <LoRachipCrashDetect_Stop>
	USARTLoRa.Revflag = 0;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <WakeUpTrigger+0xb4>)
 8002670:	2200      	movs	r2, #0
 8002672:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Unknown command!\n");
 8002674:	4816      	ldr	r0, [pc, #88]	; (80026d0 <WakeUpTrigger+0xb8>)
 8002676:	f7ff fb4f 	bl	8001d18 <LoRaResCheck>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <WakeUpTrigger+0xb4>)
 8002680:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <WakeUpTrigger+0xb4>)
 8002686:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 800268a:	2b00      	cmp	r3, #0
 800268c:	d013      	beq.n	80026b6 <WakeUpTrigger+0x9e>
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <WakeUpTrigger+0xac>)
 8002690:	f7fd fdb8 	bl	8000204 <strlen>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	2100      	movs	r1, #0
 800269a:	480a      	ldr	r0, [pc, #40]	; (80026c4 <WakeUpTrigger+0xac>)
 800269c:	f00a fd66 	bl	800d16c <memset>
		if(USARTLoRa.ResetRevflag)
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <WakeUpTrigger+0xb4>)
 80026a2:	789b      	ldrb	r3, [r3, #2]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <WakeUpTrigger+0x9a>
		{
			USARTLoRa.ResetRevflag = 0;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <WakeUpTrigger+0xb4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	709a      	strb	r2, [r3, #2]
			return LoRa_PowerUp;
 80026ae:	2312      	movs	r3, #18
 80026b0:	e002      	b.n	80026b8 <WakeUpTrigger+0xa0>
		}
		else
			return LoRa_WaKeUp;
 80026b2:	2311      	movs	r3, #17
 80026b4:	e000      	b.n	80026b8 <WakeUpTrigger+0xa0>
	}
	else
		return LoRa_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	08011d00 	.word	0x08011d00
 80026c4:	20000440 	.word	0x20000440
 80026c8:	200007a0 	.word	0x200007a0
 80026cc:	200002a0 	.word	0x200002a0
 80026d0:	08011d08 	.word	0x08011d08

080026d4 <CheckJoinStatus>:

LoRa_StatusTypeDef CheckJoinStatus(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, CkJoinSt);
 80026dc:	4909      	ldr	r1, [pc, #36]	; (8002704 <CheckJoinStatus+0x30>)
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fad0 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> joined\n", "\n\r>> unjoined\n");
 80026e4:	4908      	ldr	r1, [pc, #32]	; (8002708 <CheckJoinStatus+0x34>)
 80026e6:	4809      	ldr	r0, [pc, #36]	; (800270c <CheckJoinStatus+0x38>)
 80026e8:	f7ff fc56 	bl	8001f98 <Check_2ResMsg>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <CheckJoinStatus+0x3c>)
 80026f2:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	return USARTLoRa.ResStatus;
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <CheckJoinStatus+0x3c>)
 80026f8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9

}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08011d20 	.word	0x08011d20
 8002708:	08011c38 	.word	0x08011c38
 800270c:	08011c28 	.word	0x08011c28
 8002710:	200002a0 	.word	0x200002a0

08002714 <EnterSleep>:

LoRa_StatusTypeDef EnterSleep(UART_HandleTypeDef *huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, Sleep24h);
 800271c:	4915      	ldr	r1, [pc, #84]	; (8002774 <EnterSleep+0x60>)
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fab0 	bl	8001c84 <LoRaCommand>

	//wait data Response
	while(!USARTLoRa.Revflag);
 8002724:	bf00      	nop
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <EnterSleep+0x64>)
 8002728:	785b      	ldrb	r3, [r3, #1]
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f8      	bne.n	8002726 <EnterSleep+0x12>
	USARTLoRa.Revflag = 0;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <EnterSleep+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> sleep 86400 sec uart_on\n");
 800273a:	4810      	ldr	r0, [pc, #64]	; (800277c <EnterSleep+0x68>)
 800273c:	f7ff faec 	bl	8001d18 <LoRaResCheck>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <EnterSleep+0x64>)
 8002746:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus == LoRa_OK)
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <EnterSleep+0x64>)
 800274c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <EnterSleep+0x44>
	{
		return LoRa_Sleep;
 8002754:	2315      	movs	r3, #21
 8002756:	e009      	b.n	800276c <EnterSleep+0x58>
	}
	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <EnterSleep+0x6c>)
 800275a:	f7fd fd53 	bl	8000204 <strlen>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <EnterSleep+0x6c>)
 8002766:	f00a fd01 	bl	800d16c <memset>
		return LoRa_unexpected_Err;
 800276a:	2317      	movs	r3, #23
	}
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	08011d34 	.word	0x08011d34
 8002778:	200002a0 	.word	0x200002a0
 800277c:	08011d4c 	.word	0x08011d4c
 8002780:	20000440 	.word	0x20000440

08002784 <LoRaSaveCF>:

LoRa_StatusTypeDef LoRaSaveCF(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, LoRaSave);
 800278c:	4920      	ldr	r1, [pc, #128]	; (8002810 <LoRaSaveCF+0x8c>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fa78 	bl	8001c84 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8002794:	491f      	ldr	r1, [pc, #124]	; (8002814 <LoRaSaveCF+0x90>)
 8002796:	4820      	ldr	r0, [pc, #128]	; (8002818 <LoRaSaveCF+0x94>)
 8002798:	f7ff fbfe 	bl	8001f98 <Check_2ResMsg>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <LoRaSaveCF+0x98>)
 80027a2:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus != LoRa_OK)
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <LoRaSaveCF+0x98>)
 80027a8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <LoRaSaveCF+0x34>
		return USARTLoRa.ResStatus;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <LoRaSaveCF+0x98>)
 80027b2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80027b6:	e027      	b.n	8002808 <LoRaSaveCF+0x84>

	LoRaCommand(huart, LoRaSave);
 80027b8:	4915      	ldr	r1, [pc, #84]	; (8002810 <LoRaSaveCF+0x8c>)
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fa62 	bl	8001c84 <LoRaCommand>
	//wait data Response
	while(!USARTLoRa.Revflag);
 80027c0:	bf00      	nop
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <LoRaSaveCF+0x98>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f8      	bne.n	80027c2 <LoRaSaveCF+0x3e>
	USARTLoRa.Revflag = 0;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <LoRaSaveCF+0x98>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 80027d6:	4810      	ldr	r0, [pc, #64]	; (8002818 <LoRaSaveCF+0x94>)
 80027d8:	f7ff fa9e 	bl	8001d18 <LoRaResCheck>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <LoRaSaveCF+0x98>)
 80027e2:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
	if(USARTLoRa.ResStatus == LoRa_OK)
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <LoRaSaveCF+0x98>)
 80027e8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <LoRaSaveCF+0x70>
		return LoRa_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e009      	b.n	8002808 <LoRaSaveCF+0x84>
	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80027f4:	480a      	ldr	r0, [pc, #40]	; (8002820 <LoRaSaveCF+0x9c>)
 80027f6:	f7fd fd05 	bl	8000204 <strlen>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	4807      	ldr	r0, [pc, #28]	; (8002820 <LoRaSaveCF+0x9c>)
 8002802:	f00a fcb3 	bl	800d16c <memset>
		return LoRa_unexpected_Err;
 8002806:	2317      	movs	r3, #23
	}
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	08011d6c 	.word	0x08011d6c
 8002814:	08011a40 	.word	0x08011a40
 8002818:	08011a50 	.word	0x08011a50
 800281c:	200002a0 	.word	0x200002a0
 8002820:	20000440 	.word	0x20000440

08002824 <LoRachipCrashDetect_HDRST>:
LoRa_StatusTypeDef LoRachipCrashDetect_HDRST(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	//ChipCrashDetectTimer start
	if(USARTLoRa.CrashDetectStartflag == 0)
 800282c:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 800282e:	791b      	ldrb	r3, [r3, #4]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <LoRachipCrashDetect_HDRST+0x22>
	{
//		HAL_TIM_Base_Start_IT(&htim2);
		USARTLoRa.CrashTimerflag=1;//start timer count
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 800283c:	2201      	movs	r2, #1
 800283e:	715a      	strb	r2, [r3, #5]
		USARTLoRa.CrashDetectStartflag = 1;
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 8002842:	2201      	movs	r2, #1
 8002844:	711a      	strb	r2, [r3, #4]
	}
	//if LoRa chip no response than 500ms, Hardware Reset the chip
	if(USARTLoRa.CrashTimerCount>=500)
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 8002848:	f8b3 34ec 	ldrh.w	r3, [r3, #1260]	; 0x4ec
 800284c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002850:	d33c      	bcc.n	80028cc <LoRachipCrashDetect_HDRST+0xa8>
	{
		LoRachipCrashDetect_Stop(&htim);
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f841 	bl	80028dc <LoRachipCrashDetect_Stop>
		//Hardware Reset
		HAL_GPIO_WritePin(RstPinGroup, RstPin, GPIO_PIN_RESET);
 800285a:	2200      	movs	r2, #0
 800285c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002864:	f004 fa36 	bl	8006cd4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002868:	2001      	movs	r0, #1
 800286a:	f001 facd 	bl	8003e08 <HAL_Delay>
		HAL_GPIO_WritePin(RstPinGroup, RstPin, GPIO_PIN_SET);
 800286e:	2201      	movs	r2, #1
 8002870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002878:	f004 fa2c 	bl	8006cd4 <HAL_GPIO_WritePin>

		//receive reset response
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 800287c:	4816      	ldr	r0, [pc, #88]	; (80028d8 <LoRachipCrashDetect_HDRST+0xb4>)
 800287e:	f7fd fcc1 	bl	8000204 <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	2100      	movs	r1, #0
 8002888:	4813      	ldr	r0, [pc, #76]	; (80028d8 <LoRachipCrashDetect_HDRST+0xb4>)
 800288a:	f00a fc6f 	bl	800d16c <memset>
		while(!USARTLoRa.Revflag);
 800288e:	bf00      	nop
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f8      	bne.n	8002890 <LoRachipCrashDetect_HDRST+0x6c>
		USARTLoRa.Revflag=0;
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	705a      	strb	r2, [r3, #1]
		USARTLoRa.ResetRevflag=0;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	709a      	strb	r2, [r3, #2]
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80028aa:	480b      	ldr	r0, [pc, #44]	; (80028d8 <LoRachipCrashDetect_HDRST+0xb4>)
 80028ac:	f7fd fcaa 	bl	8000204 <strlen>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	4808      	ldr	r0, [pc, #32]	; (80028d8 <LoRachipCrashDetect_HDRST+0xb4>)
 80028b8:	f00a fc58 	bl	800d16c <memset>
		USARTLoRa.ResStatus = LoRa_HDRest;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 80028be:	2218      	movs	r2, #24
 80028c0:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
		return USARTLoRa.ResStatus;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <LoRachipCrashDetect_HDRST+0xb0>)
 80028c6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	; 0x4e9
 80028ca:	e7ff      	b.n	80028cc <LoRachipCrashDetect_HDRST+0xa8>
	}
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200002a0 	.word	0x200002a0
 80028d8:	20000440 	.word	0x20000440

080028dc <LoRachipCrashDetect_Stop>:
void LoRachipCrashDetect_Stop(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	USARTLoRa.CrashTimerCount=0;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <LoRachipCrashDetect_Stop+0x28>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
//	HAL_TIM_Base_Stop_IT(&htim2);
	USARTLoRa.CrashTimerflag=0;//stop timer count
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <LoRachipCrashDetect_Stop+0x28>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	715a      	strb	r2, [r3, #5]
	USARTLoRa.CrashDetectStartflag = 0;
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <LoRachipCrashDetect_Stop+0x28>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	711a      	strb	r2, [r3, #4]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	200002a0 	.word	0x200002a0

08002908 <LoRa_status_init>:
void LoRa_status_init(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	//setup LoRa default status
	USARTLoRa.Status=WakeUp;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <LoRa_status_init+0x2c>)
 8002912:	2200      	movs	r2, #0
 8002914:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
//	USARTLoRa.Status=CMDdebug;

	//initial LoRa receive interrupt flag
	while(HAL_UART_Receive_IT(huart,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 8002918:	bf00      	nop
 800291a:	2201      	movs	r2, #1
 800291c:	4906      	ldr	r1, [pc, #24]	; (8002938 <LoRa_status_init+0x30>)
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f006 ff46 	bl	80097b0 <HAL_UART_Receive_IT>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f7      	bne.n	800291a <LoRa_status_init+0x12>
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200002a0 	.word	0x200002a0
 8002938:	20000436 	.word	0x20000436

0800293c <EnterStandbyPWR_Mode>:
PWRST_t PWRST;
uint8_t IT_source,Wtmr_flag;
uint32_t rtctimers;

void EnterStandbyPWR_Mode(RTC_HandleTypeDef *hrtc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	//-------Wake up Pin setting---------------------

	// Disable all used wakeup sources: Pin2(PC13)
	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 8002944:	2002      	movs	r0, #2
 8002946:	f004 fad3 	bl	8006ef0 <HAL_PWR_DisableWakeUpPin>
	// Clear the related wakeup pin flag
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <EnterStandbyPWR_Mode+0x84>)
 800294c:	221f      	movs	r2, #31
 800294e:	619a      	str	r2, [r3, #24]
	// Re-enable all used wakeup sources: Pin2(PC13)
	HAL_PWREx_EnableInternalWakeUpLine();
 8002950:	f004 fb62 	bl	8007018 <HAL_PWREx_EnableInternalWakeUpLine>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH);
 8002954:	2002      	movs	r0, #2
 8002956:	f004 faab 	bl	8006eb0 <HAL_PWR_EnableWakeUpPin>


	//-------RTC Wake up setting---------------------
//	IT_source =__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_FLAG_WUTF);
//	Wtmr_flag =__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF);
	if ((__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE (hrtc, RTC_FLAG_WUTF) != 0U	&& __HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <EnterStandbyPWR_Mode+0x3a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <EnterStandbyPWR_Mode+0x48>
			|| __HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE (hrtc, RTC_FLAG_WUTF) == 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10f      	bne.n	80029a4 <EnterStandbyPWR_Mode+0x68>
	{
		//Set StnadbyTime
//		PWRST.StandbyTime_Sec = 86400;//24hr
		PWRST.StandbyTime_Sec = 21600;//6hr
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <EnterStandbyPWR_Mode+0x88>)
 8002986:	f245 4260 	movw	r2, #21600	; 0x5460
 800298a:	805a      	strh	r2, [r3, #2]
//		PWRST.StandbyTime_Sec = 5;
		//set RTC WakeUpTimer
//		StandbyTime_Sec > 65536
//		if (HAL_RTCEx_SetWakeUpTimer_IT(hrtc, PWRST.StandbyTime_Sec, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
		//StandbyTime_Sec < 65536
		if (HAL_RTCEx_SetWakeUpTimer_IT(hrtc, PWRST.StandbyTime_Sec, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <EnterStandbyPWR_Mode+0x88>)
 800298e:	885b      	ldrh	r3, [r3, #2]
 8002990:	2204      	movs	r2, #4
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f006 f889 	bl	8008aac <HAL_RTCEx_SetWakeUpTimer_IT>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <EnterStandbyPWR_Mode+0x68>
		{
			Error_Handler();
 80029a0:	f000 ff00 	bl	80037a4 <Error_Handler>
		}
	}
//	rtctimers =HAL_RTCEx_GetWakeUpTimer(&hrtc);

	//-------GPIO state setting of standby mode ---------------------
	HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_11);//LoRa chip reset pin
 80029a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a8:	2000      	movs	r0, #0
 80029aa:	f004 fb45 	bl	8007038 <HAL_PWREx_EnableGPIOPullUp>
	HAL_PWREx_EnablePullUpPullDownConfig();
 80029ae:	f004 fbfb 	bl	80071a8 <HAL_PWREx_EnablePullUpPullDownConfig>

	/* Request to enter STANDBY mode  */
	HAL_PWR_EnterSTANDBYMode();
 80029b2:	f004 fab3 	bl	8006f1c <HAL_PWR_EnterSTANDBYMode>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40007000 	.word	0x40007000
 80029c4:	200007f4 	.word	0x200007f4

080029c8 <EnterAlarmStnadby_Mode>:

void EnterAlarmStnadby_Mode(RTC_HandleTypeDef *hrtc)	//detected alarm, improve wake-up frequency. disable wake-up pin.
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	//-------Wake up Pin setting---------------------

	// Disable all used wakeup sources: Pin2(PC13)
	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 80029d0:	2002      	movs	r0, #2
 80029d2:	f004 fa8d 	bl	8006ef0 <HAL_PWR_DisableWakeUpPin>
	// Clear the related wakeup pin flag
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <EnterAlarmStnadby_Mode+0x2c>)
 80029d8:	221f      	movs	r2, #31
 80029da:	619a      	str	r2, [r3, #24]
	// Re-enable all used wakeup sources: Pin2(PC13)
	HAL_PWREx_EnableInternalWakeUpLine();
 80029dc:	f004 fb1c 	bl	8007018 <HAL_PWREx_EnableInternalWakeUpLine>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH);
 80029e0:	2002      	movs	r0, #2
 80029e2:	f004 fa65 	bl	8006eb0 <HAL_PWR_EnableWakeUpPin>


	/* Request to enter STANDBY mode  */
	HAL_PWR_EnterSTANDBYMode();
 80029e6:	f004 fa99 	bl	8006f1c <HAL_PWR_EnterSTANDBYMode>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40007000 	.word	0x40007000

080029f8 <RUN_PWR_Mode_Init>:

void RUN_PWR_Mode_Init(RTC_HandleTypeDef *hrtc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	//-------Wake up Pin setting---------------------
	  __HAL_RCC_PWR_CLK_ENABLE();//PWR APB1 clock enable
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <RUN_PWR_Mode_Init+0x8c>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <RUN_PWR_Mode_Init+0x8c>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <RUN_PWR_Mode_Init+0x8c>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
//	  IT_source=__HAL_PWR_GET_FLAG(PWR_FLAG_SB);
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB)!=RESET)
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <RUN_PWR_Mode_Init+0x90>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <RUN_PWR_Mode_Init+0x38>
	{		// Clear the related wakeup pin flag
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <RUN_PWR_Mode_Init+0x90>)
 8002a26:	221f      	movs	r2, #31
 8002a28:	619a      	str	r2, [r3, #24]
		// Disable all used wakeup sources: Pin2(PC13)
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	f004 fa60 	bl	8006ef0 <HAL_PWR_DisableWakeUpPin>

	//-------RTC Wake up setting---------------------
//	IT_source =__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_FLAG_WUTF);
//	Wtmr_flag =__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF);
//	rtctimers =HAL_RTCEx_GetWakeUpTimer(&hrtc);
	if ((__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE (hrtc, RTC_FLAG_WUTF) != 0U	&& __HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <RUN_PWR_Mode_Init+0x54>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <RUN_PWR_Mode_Init+0x62>
			|| __HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE (hrtc, RTC_FLAG_WUTF) == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <RUN_PWR_Mode_Init+0x80>
	{
		//Disable RTC WakeUpTimer
		HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f006 f8ba 	bl	8008bd4 <HAL_RTCEx_DeactivateWakeUpTimer>
		//Clear RTC flag
		__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a70:	60da      	str	r2, [r3, #12]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <RUN_PWR_Mode_Init+0x90>)
 8002a74:	221f      	movs	r2, #31
 8002a76:	619a      	str	r2, [r3, #24]
	}
	//-------GPIO state setting of standby mode ---------------------
	HAL_PWREx_DisablePullUpPullDownConfig();//disable function
 8002a78:	f004 fba6 	bl	80071c8 <HAL_PWREx_DisablePullUpPullDownConfig>
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000

08002a8c <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0218 	bic.w	r2, r3, #24
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 0260 	bic.w	r2, r3, #96	; 0x60
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	609a      	str	r2, [r3, #8]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	611a      	str	r2, [r3, #16]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	615a      	str	r2, [r3, #20]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40021000 	.word	0x40021000

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //TODO: EEPROM by Wayne 20211005
  EE_Status ee_status = EE_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b72:	f001 f8d4 	bl	8003d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b76:	f000 f973 	bl	8002e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b7a:	f000 fb71 	bl	8003260 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b7e:	f000 f9fd 	bl	8002f7c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002b82:	f000 fb3d 	bl	8003200 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8002b86:	f000 faa7 	bl	80030d8 <MX_IWDG_Init>
  MX_RTC_Init();
 8002b8a:	f000 fac3 	bl	8003114 <MX_RTC_Init>
  MX_TIM2_Init();
 8002b8e:	f000 fae9 	bl	8003164 <MX_TIM2_Init>
  MX_CRC_Init();
 8002b92:	f000 fa7f 	bl	8003094 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //TODO: EEPROM by Wayne 20211005
   /* Unlock the Flash Program Erase controller */
   HAL_FLASH_Unlock();
 8002b96:	f003 f817 	bl	8005bc8 <HAL_FLASH_Unlock>
 //  uint8_t itt, itt2, itt3;
 //  itt=__HAL_PWR_GET_FLAG(PWR_FLAG_SB);
 //  itt2= __HAL_PWR_GET_FLAG(PWR_FLAG_WU);
 //  itt3=__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE (&hrtc, RTC_FLAG_WUTF);
 //  if(itt == RESET)
   if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8002b9a:	4ba3      	ldr	r3, [pc, #652]	; (8002e28 <main+0x2c0>)
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <main+0x54>
   {
     /* System reset comes from a power-on reset: Forced Erase */
     /* Initialize EEPROM emulation driver (mandatory) */
     ee_status = EE_Init(EE_FORCED_ERASE);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f007 fe98 	bl	800a8dc <EE_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	80fb      	strh	r3, [r7, #6]
     if(ee_status != EE_OK) {Error_Handler();}
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <main+0x70>
 8002bb6:	f000 fdf5 	bl	80037a4 <Error_Handler>
 8002bba:	e00d      	b.n	8002bd8 <main+0x70>
 //    {
 //      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 //    }
     /* System reset comes from a STANDBY wakeup: Conditional Erase*/
     /* Initialize EEPROM emulation driver (mandatory) */
     ee_status = EE_Init(EE_CONDITIONAL_ERASE);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f007 fe8d 	bl	800a8dc <EE_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
     if(ee_status != EE_OK) {Error_Handler();}
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <main+0x68>
 8002bcc:	f000 fdea 	bl	80037a4 <Error_Handler>

     /*EEPROM Read*/
     ee_status = EEPROM_Emu_read();
 8002bd0:	f000 fd2e 	bl	8003630 <EEPROM_Emu_read>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	80fb      	strh	r3, [r7, #6]
   }

//TODO--Wayne20210531
  RUN_PWR_Mode_Init(&hrtc);
 8002bd8:	4894      	ldr	r0, [pc, #592]	; (8002e2c <main+0x2c4>)
 8002bda:	f7ff ff0d 	bl	80029f8 <RUN_PWR_Mode_Init>
  LoRa_status_init(&huart1);
 8002bde:	4894      	ldr	r0, [pc, #592]	; (8002e30 <main+0x2c8>)
 8002be0:	f7ff fe92 	bl	8002908 <LoRa_status_init>
  //TODO for IWDG Freeze By Standby Mode
  IWDGFreezeBySTDBY();
 8002be4:	f000 fc5a 	bl	800349c <IWDGFreezeBySTDBY>
  setting Device power mode:
  PWRST.PowerMode =
  			 	 ---RunMode
  			 	 ---StandbyMode
  */
  PWRST.PowerMode =StandbyMode;
 8002be8:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <main+0x2cc>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	711a      	strb	r2, [r3, #4]
  NodeStatus = DataAcquire;
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <main+0x2d0>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8002bf4:	4891      	ldr	r0, [pc, #580]	; (8002e3c <main+0x2d4>)
 8002bf6:	f006 f8a1 	bl	8008d3c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(NodeStatus)
 8002bfa:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <main+0x2d0>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	f000 80c5 	beq.w	8002d8e <main+0x226>
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	dcf8      	bgt.n	8002bfa <main+0x92>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <main+0xac>
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f000 8094 	beq.w	8002d3a <main+0x1d2>
 8002c12:	e7f2      	b.n	8002bfa <main+0x92>
	  {
	  	case DataAcquire:
	  		//battery light loading voltage
	  		ADC1_Conv(&hadc1);
 8002c14:	488a      	ldr	r0, [pc, #552]	; (8002e40 <main+0x2d8>)
 8002c16:	f7fe fa0b 	bl	8001030 <ADC1_Conv>
	  		ADC_1.BatVLightload=ADC_1.BatVTemp;
 8002c1a:	4b8a      	ldr	r3, [pc, #552]	; (8002e44 <main+0x2dc>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4a89      	ldr	r2, [pc, #548]	; (8002e44 <main+0x2dc>)
 8002c20:	6213      	str	r3, [r2, #32]
	  		//ADC LED status
	  		HAL_GPIO_WritePin(ADC_LED_Port, ADC_LED , GPIO_PIN_SET);
 8002c22:	2201      	movs	r2, #1
 8002c24:	2104      	movs	r1, #4
 8002c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2a:	f004 f853 	bl	8006cd4 <HAL_GPIO_WritePin>
	  		HAL_Delay(10);
 8002c2e:	200a      	movs	r0, #10
 8002c30:	f001 f8ea 	bl	8003e08 <HAL_Delay>
	  		HAL_GPIO_WritePin(ADC_LED_Port, ADC_LED , GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2104      	movs	r1, #4
 8002c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c3c:	f004 f84a 	bl	8006cd4 <HAL_GPIO_WritePin>
	  		//battery minimum Voltage
	  		if(ADC_1.BatVHeavyload!=0)
 8002c40:	4b80      	ldr	r3, [pc, #512]	; (8002e44 <main+0x2dc>)
 8002c42:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	d012      	beq.n	8002c76 <main+0x10e>
	  			ADC_1.BatV=min(ADC_1.BatVLightload, ADC_1.BatVHeavyload);
 8002c50:	4b7c      	ldr	r3, [pc, #496]	; (8002e44 <main+0x2dc>)
 8002c52:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c56:	4b7b      	ldr	r3, [pc, #492]	; (8002e44 <main+0x2dc>)
 8002c58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c64:	d502      	bpl.n	8002c6c <main+0x104>
 8002c66:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <main+0x2dc>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	e001      	b.n	8002c70 <main+0x108>
 8002c6c:	4b75      	ldr	r3, [pc, #468]	; (8002e44 <main+0x2dc>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	4a74      	ldr	r2, [pc, #464]	; (8002e44 <main+0x2dc>)
 8002c72:	6193      	str	r3, [r2, #24]
 8002c74:	e003      	b.n	8002c7e <main+0x116>
	  		else
	  			ADC_1.BatV=ADC_1.BatVLightload;
 8002c76:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <main+0x2dc>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a72      	ldr	r2, [pc, #456]	; (8002e44 <main+0x2dc>)
 8002c7c:	6193      	str	r3, [r2, #24]
                
            //Battery BatVHeavyload Voltage > 3V, send BatVLightload battery Voltage
	  		if(ADC_1.BatV > 3)
 8002c7e:	4b71      	ldr	r3, [pc, #452]	; (8002e44 <main+0x2dc>)
 8002c80:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c84:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c90:	dd07      	ble.n	8002ca2 <main+0x13a>
	  		{
	  		   ADC_1.BatStatus = 0;
 8002c92:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <main+0x2dc>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	  		   ADC_1.BatV=ADC_1.BatVLightload;
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <main+0x2dc>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a69      	ldr	r2, [pc, #420]	; (8002e44 <main+0x2dc>)
 8002ca0:	6193      	str	r3, [r2, #24]

	  		}   
                
	  		//Battery Voltage < 2.8V send low battery alarm
	  		if(ADC_1.BatV >= 2.8)
 8002ca2:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <main+0x2dc>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc6e 	bl	8000588 <__aeabi_f2d>
 8002cac:	a35a      	add	r3, pc, #360	; (adr r3, 8002e18 <main+0x2b0>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd ff47 	bl	8000b44 <__aeabi_dcmpge>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <main+0x15e>
	  			ADC_1.BatStatus = 0;
 8002cbc:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <main+0x2dc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cc4:	e003      	b.n	8002cce <main+0x166>
	  	    else
	  	    	ADC_1.BatStatus = 1;
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <main+0x2dc>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            
	  		//Battery Voltage < 2.35V MCU always standby
	  		if(ADC_1.BatV < 2.35)
 8002cce:	4b5d      	ldr	r3, [pc, #372]	; (8002e44 <main+0x2dc>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc58 	bl	8000588 <__aeabi_f2d>
 8002cd8:	a351      	add	r3, pc, #324	; (adr r3, 8002e20 <main+0x2b8>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd ff1d 	bl	8000b1c <__aeabi_dcmplt>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00f      	beq.n	8002d08 <main+0x1a0>
	  		{
	  			//TODO:Lora chip enter sleep
	  			USARTLoRa.Status=EnterSleepMode;
 8002ce8:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <main+0x2e0>)
 8002cea:	2207      	movs	r2, #7
 8002cec:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
	  			LoRa_USART(&huart1, &hiwdg, &hadc1);
 8002cf0:	4a53      	ldr	r2, [pc, #332]	; (8002e40 <main+0x2d8>)
 8002cf2:	4956      	ldr	r1, [pc, #344]	; (8002e4c <main+0x2e4>)
 8002cf4:	484e      	ldr	r0, [pc, #312]	; (8002e30 <main+0x2c8>)
 8002cf6:	f7fe fabf 	bl	8001278 <LoRa_USART>

	  			/* Wait for any cleanup to complete before entering standby/shutdown mode */
	  			while (ErasingOnGoing == 1) { }
 8002cfa:	bf00      	nop
 8002cfc:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <main+0x2e8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d0fb      	beq.n	8002cfc <main+0x194>

	  			/* Request to enter STANDBY mode  */
	  			HAL_PWR_EnterSTANDBYMode();
 8002d04:	f004 f90a 	bl	8006f1c <HAL_PWR_EnterSTANDBYMode>
	  		}
	  		//detect wake-up pin for sensor status
	  		if(HAL_GPIO_ReadPin(WKUP_GPIO_Port, WKUP_Pin) == GPIO_PIN_SET) //high level by water detected
 8002d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d0c:	4851      	ldr	r0, [pc, #324]	; (8002e54 <main+0x2ec>)
 8002d0e:	f003 ffc9 	bl	8006ca4 <HAL_GPIO_ReadPin>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d109      	bne.n	8002d2c <main+0x1c4>
	  		{
	  			NodeStatus = TransmitWithAlarm;
 8002d18:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <main+0x2d0>)
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	701a      	strb	r2, [r3, #0]
	  			SendAlarmCount++;
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <main+0x2f0>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <main+0x2f0>)
 8002d28:	801a      	strh	r2, [r3, #0]
	  		else//High level by water not detected
	  		{
	  			NodeStatus = TransmitWithPWRST;
	  			SendAlarmCount = 0;
	  		}
	  			break;
 8002d2a:	e073      	b.n	8002e14 <main+0x2ac>
	  			NodeStatus = TransmitWithPWRST;
 8002d2c:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <main+0x2d0>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
	  			SendAlarmCount = 0;
 8002d32:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <main+0x2f0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	801a      	strh	r2, [r3, #0]
	  			break;
 8002d38:	e06c      	b.n	8002e14 <main+0x2ac>

	  	case TransmitWithPWRST:
	  		if(PWRST.PowerMode == StandbyMode)
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <main+0x2cc>)
 8002d3c:	791b      	ldrb	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d011      	beq.n	8002d66 <main+0x1fe>
			{
    			//TODO:Lora send data
	  			LoRa_USART(&huart1, &hiwdg, &hadc1);
 8002d42:	4a3f      	ldr	r2, [pc, #252]	; (8002e40 <main+0x2d8>)
 8002d44:	4941      	ldr	r1, [pc, #260]	; (8002e4c <main+0x2e4>)
 8002d46:	483a      	ldr	r0, [pc, #232]	; (8002e30 <main+0x2c8>)
 8002d48:	f7fe fa96 	bl	8001278 <LoRa_USART>

    			//IWDG_Refresh
    			HAL_IWDG_Refresh(&hiwdg);
 8002d4c:	483f      	ldr	r0, [pc, #252]	; (8002e4c <main+0x2e4>)
 8002d4e:	f004 f81f 	bl	8006d90 <HAL_IWDG_Refresh>

    			//TODO: Write EEPROM 20211005 by Wayne
				ee_status = EEPROM_Emu_write();
 8002d52:	f000 fca7 	bl	80036a4 <EEPROM_Emu_write>
 8002d56:	4603      	mov	r3, r0
 8002d58:	80fb      	strh	r3, [r7, #6]

    			//TODO:MCU Standby Entry
    			EnterStandbyPWR_Mode(&hrtc);
 8002d5a:	4834      	ldr	r0, [pc, #208]	; (8002e2c <main+0x2c4>)
 8002d5c:	f7ff fdee 	bl	800293c <EnterStandbyPWR_Mode>

    			/* This code should never go beyond this point. Reset on Standby wakeup */
    			Error_Handler();
 8002d60:	f000 fd20 	bl	80037a4 <Error_Handler>
    			HAL_IWDG_Refresh(&hiwdg);

    			NodeStatus = DataAcquire;

    		}
	  		  break;
 8002d64:	e056      	b.n	8002e14 <main+0x2ac>
    			USARTLoRa.ResStatus = LoRa_OK;
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <main+0x2e0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
    			LoRa_USART(&huart1, &hiwdg, &hadc1);
 8002d6e:	4a34      	ldr	r2, [pc, #208]	; (8002e40 <main+0x2d8>)
 8002d70:	4936      	ldr	r1, [pc, #216]	; (8002e4c <main+0x2e4>)
 8002d72:	482f      	ldr	r0, [pc, #188]	; (8002e30 <main+0x2c8>)
 8002d74:	f7fe fa80 	bl	8001278 <LoRa_USART>
				ee_status = EEPROM_Emu_write();
 8002d78:	f000 fc94 	bl	80036a4 <EEPROM_Emu_write>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	80fb      	strh	r3, [r7, #6]
    			HAL_IWDG_Refresh(&hiwdg);
 8002d80:	4832      	ldr	r0, [pc, #200]	; (8002e4c <main+0x2e4>)
 8002d82:	f004 f805 	bl	8006d90 <HAL_IWDG_Refresh>
    			NodeStatus = DataAcquire;
 8002d86:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <main+0x2d0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002d8c:	e042      	b.n	8002e14 <main+0x2ac>

	  	case TransmitWithAlarm:
	  		if(SendAlarmflag == true)
 8002d8e:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <main+0x2f4>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d037      	beq.n	8002e06 <main+0x29e>
	  		{
	  			//IWDG_Refresh
	  			HAL_IWDG_Refresh(&hiwdg);
 8002d96:	482d      	ldr	r0, [pc, #180]	; (8002e4c <main+0x2e4>)
 8002d98:	f003 fffa 	bl	8006d90 <HAL_IWDG_Refresh>

				USARTLoRa.ResStatus = LoRa_OK;
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <main+0x2e0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
				//TODO:Lora send data
				LoRa_USART(&huart1, &hiwdg, &hadc1);
 8002da4:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <main+0x2d8>)
 8002da6:	4929      	ldr	r1, [pc, #164]	; (8002e4c <main+0x2e4>)
 8002da8:	4821      	ldr	r0, [pc, #132]	; (8002e30 <main+0x2c8>)
 8002daa:	f7fe fa65 	bl	8001278 <LoRa_USART>

				//TODO: Write EEPROM 20211005 by Wayne
				ee_status = EEPROM_Emu_write();
 8002dae:	f000 fc79 	bl	80036a4 <EEPROM_Emu_write>
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]

				SendAlarmflag= false;
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <main+0x2f4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]

				NodeStatus = DataAcquire;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <main+0x2d0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]

				//detect wake-up pin for sensor status
				if(HAL_GPIO_ReadPin(WKUP_GPIO_Port, WKUP_Pin) == GPIO_PIN_RESET) //low level by water no detected
 8002dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc6:	4823      	ldr	r0, [pc, #140]	; (8002e54 <main+0x2ec>)
 8002dc8:	f003 ff6c 	bl	8006ca4 <HAL_GPIO_ReadPin>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11f      	bne.n	8002e12 <main+0x2aa>
				{
					SendAlarmCount = 0;
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <main+0x2f0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	801a      	strh	r2, [r3, #0]
					//IWDG_Refresh
					HAL_IWDG_Refresh(&hiwdg);
 8002dd8:	481c      	ldr	r0, [pc, #112]	; (8002e4c <main+0x2e4>)
 8002dda:	f003 ffd9 	bl	8006d90 <HAL_IWDG_Refresh>

					HAL_Delay(50);
 8002dde:	2032      	movs	r0, #50	; 0x32
 8002de0:	f001 f812 	bl	8003e08 <HAL_Delay>

					USARTLoRa.ResStatus = LoRa_OK;
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <main+0x2e0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
					//TODO:Lora send data
					LoRa_USART(&huart1, &hiwdg, &hadc1);
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <main+0x2d8>)
 8002dee:	4917      	ldr	r1, [pc, #92]	; (8002e4c <main+0x2e4>)
 8002df0:	480f      	ldr	r0, [pc, #60]	; (8002e30 <main+0x2c8>)
 8002df2:	f7fe fa41 	bl	8001278 <LoRa_USART>

					//TODO: Write EEPROM 20211005 by Wayne
					ee_status = EEPROM_Emu_write();
 8002df6:	f000 fc55 	bl	80036a4 <EEPROM_Emu_write>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]


					//TODO:MCU Standby Entry
					EnterAlarmStnadby_Mode(&hrtc);
 8002dfe:	480b      	ldr	r0, [pc, #44]	; (8002e2c <main+0x2c4>)
 8002e00:	f7ff fde2 	bl	80029c8 <EnterAlarmStnadby_Mode>
	  		{
	  			HAL_Delay(50);
	  			//IWDG_Refresh
	  			HAL_IWDG_Refresh(&hiwdg);
	  		}
	  		break;
 8002e04:	e005      	b.n	8002e12 <main+0x2aa>
	  			HAL_Delay(50);
 8002e06:	2032      	movs	r0, #50	; 0x32
 8002e08:	f000 fffe 	bl	8003e08 <HAL_Delay>
	  			HAL_IWDG_Refresh(&hiwdg);
 8002e0c:	480f      	ldr	r0, [pc, #60]	; (8002e4c <main+0x2e4>)
 8002e0e:	f003 ffbf 	bl	8006d90 <HAL_IWDG_Refresh>
	  		break;
 8002e12:	bf00      	nop
	switch(NodeStatus)
 8002e14:	e6f1      	b.n	8002bfa <main+0x92>
 8002e16:	bf00      	nop
 8002e18:	66666666 	.word	0x66666666
 8002e1c:	40066666 	.word	0x40066666
 8002e20:	cccccccd 	.word	0xcccccccd
 8002e24:	4002cccc 	.word	0x4002cccc
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	2000092c 	.word	0x2000092c
 8002e30:	200008a4 	.word	0x200008a4
 8002e34:	200007f4 	.word	0x200007f4
 8002e38:	20000950 	.word	0x20000950
 8002e3c:	200007a0 	.word	0x200007a0
 8002e40:	2000083c 	.word	0x2000083c
 8002e44:	20000264 	.word	0x20000264
 8002e48:	200002a0 	.word	0x200002a0
 8002e4c:	20000800 	.word	0x20000800
 8002e50:	20000240 	.word	0x20000240
 8002e54:	48000800 	.word	0x48000800
 8002e58:	200007fe 	.word	0x200007fe
 8002e5c:	20000928 	.word	0x20000928

08002e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b0ba      	sub	sp, #232	; 0xe8
 8002e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e6a:	2244      	movs	r2, #68	; 0x44
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f00a f97c 	bl	800d16c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	228c      	movs	r2, #140	; 0x8c
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f00a f96e 	bl	800d16c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002e90:	2309      	movs	r3, #9
 8002e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ece:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 f9e2 	bl	800729c <HAL_RCC_OscConfig>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002ede:	f000 fc61 	bl	80037a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee2:	230f      	movs	r3, #15
 8002ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 fdee 	bl	8007ae8 <HAL_RCC_ClockConfig>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002f12:	f000 fc47 	bl	80037a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <SystemClock_Config+0x118>)
 8002f18:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002f1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002f36:	2308      	movs	r3, #8
 8002f38:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002f42:	2308      	movs	r3, #8
 8002f44:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f4a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 ffd0 	bl	8007ef4 <HAL_RCCEx_PeriphCLKConfig>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8002f5a:	f000 fc23 	bl	80037a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f62:	f004 f803 	bl	8006f6c <HAL_PWREx_ControlVoltageScaling>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8002f6c:	f000 fc1a 	bl	80037a4 <Error_Handler>
  }
}
 8002f70:	bf00      	nop
 8002f72:	37e8      	adds	r7, #232	; 0xe8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	00024001 	.word	0x00024001

08002f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002f82:	f107 031c 	add.w	r3, r7, #28
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
 8002f9c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fa0:	4a39      	ldr	r2, [pc, #228]	; (8003088 <MX_ADC1_Init+0x10c>)
 8002fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fa6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002faa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002fb8:	4b32      	ldr	r3, [pc, #200]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <MX_ADC1_Init+0x108>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <MX_ADC1_Init+0x108>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <MX_ADC1_Init+0x108>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <MX_ADC1_Init+0x108>)
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003006:	481f      	ldr	r0, [pc, #124]	; (8003084 <MX_ADC1_Init+0x108>)
 8003008:	f001 f966 	bl	80042d8 <HAL_ADC_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8003012:	f000 fbc7 	bl	80037a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	4619      	mov	r1, r3
 8003020:	4818      	ldr	r0, [pc, #96]	; (8003084 <MX_ADC1_Init+0x108>)
 8003022:	f002 fa43 	bl	80054ac <HAL_ADCEx_MultiModeConfigChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800302c:	f000 fbba 	bl	80037a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <MX_ADC1_Init+0x110>)
 8003032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003034:	2306      	movs	r3, #6
 8003036:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8003038:	2305      	movs	r3, #5
 800303a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800303c:	237f      	movs	r3, #127	; 0x7f
 800303e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003040:	2304      	movs	r3, #4
 8003042:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4619      	mov	r1, r3
 800304c:	480d      	ldr	r0, [pc, #52]	; (8003084 <MX_ADC1_Init+0x108>)
 800304e:	f001 fc71 	bl	8004934 <HAL_ADC_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8003058:	f000 fba4 	bl	80037a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <MX_ADC1_Init+0x114>)
 800305e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003060:	230c      	movs	r3, #12
 8003062:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8003064:	2303      	movs	r3, #3
 8003066:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	4619      	mov	r1, r3
 800306c:	4805      	ldr	r0, [pc, #20]	; (8003084 <MX_ADC1_Init+0x108>)
 800306e:	f001 fc61 	bl	8004934 <HAL_ADC_ConfigChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003078:	f000 fb94 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800307c:	bf00      	nop
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	2000083c 	.word	0x2000083c
 8003088:	50040000 	.word	0x50040000
 800308c:	cb840000 	.word	0xcb840000
 8003090:	80000001 	.word	0x80000001

08003094 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8003098:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800309c:	f7ff fd4c 	bl	8002b38 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 80030a0:	2100      	movs	r1, #0
 80030a2:	480b      	ldr	r0, [pc, #44]	; (80030d0 <MX_CRC_Init+0x3c>)
 80030a4:	f7ff fd05 	bl	8002ab2 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 80030a8:	2100      	movs	r1, #0
 80030aa:	4809      	ldr	r0, [pc, #36]	; (80030d0 <MX_CRC_Init+0x3c>)
 80030ac:	f7ff fd14 	bl	8002ad8 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 80030b0:	4908      	ldr	r1, [pc, #32]	; (80030d4 <MX_CRC_Init+0x40>)
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <MX_CRC_Init+0x3c>)
 80030b4:	f7ff fd31 	bl	8002b1a <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 80030b8:	2100      	movs	r1, #0
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_CRC_Init+0x3c>)
 80030bc:	f7ff fce6 	bl	8002a8c <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <MX_CRC_Init+0x3c>)
 80030c6:	f7ff fd1a 	bl	8002afe <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023000 	.word	0x40023000
 80030d4:	04c11db7 	.word	0x04c11db7

080030d8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <MX_IWDG_Init+0x34>)
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <MX_IWDG_Init+0x38>)
 80030e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <MX_IWDG_Init+0x34>)
 80030e4:	2204      	movs	r2, #4
 80030e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <MX_IWDG_Init+0x34>)
 80030ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 80030ee:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <MX_IWDG_Init+0x34>)
 80030f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80030f6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80030f8:	4804      	ldr	r0, [pc, #16]	; (800310c <MX_IWDG_Init+0x34>)
 80030fa:	f003 fe03 	bl	8006d04 <HAL_IWDG_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003104:	f000 fb4e 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000800 	.word	0x20000800
 8003110:	40003000 	.word	0x40003000

08003114 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <MX_RTC_Init+0x48>)
 800311a:	4a11      	ldr	r2, [pc, #68]	; (8003160 <MX_RTC_Init+0x4c>)
 800311c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <MX_RTC_Init+0x48>)
 8003120:	2200      	movs	r2, #0
 8003122:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <MX_RTC_Init+0x48>)
 8003126:	227f      	movs	r2, #127	; 0x7f
 8003128:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <MX_RTC_Init+0x48>)
 800312c:	22ff      	movs	r2, #255	; 0xff
 800312e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <MX_RTC_Init+0x48>)
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <MX_RTC_Init+0x48>)
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <MX_RTC_Init+0x48>)
 800313e:	2200      	movs	r2, #0
 8003140:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <MX_RTC_Init+0x48>)
 8003144:	2200      	movs	r2, #0
 8003146:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003148:	4804      	ldr	r0, [pc, #16]	; (800315c <MX_RTC_Init+0x48>)
 800314a:	f005 fb9d 	bl	8008888 <HAL_RTC_Init>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003154:	f000 fb26 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000092c 	.word	0x2000092c
 8003160:	40002800 	.word	0x40002800

08003164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800316a:	f107 0310 	add.w	r3, r7, #16
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <MX_TIM2_Init+0x98>)
 8003184:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003188:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 800318a:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <MX_TIM2_Init+0x98>)
 800318c:	f240 623f 	movw	r2, #1599	; 0x63f
 8003190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <MX_TIM2_Init+0x98>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <MX_TIM2_Init+0x98>)
 800319a:	2209      	movs	r2, #9
 800319c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <MX_TIM2_Init+0x98>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <MX_TIM2_Init+0x98>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031aa:	4814      	ldr	r0, [pc, #80]	; (80031fc <MX_TIM2_Init+0x98>)
 80031ac:	f005 fd6f 	bl	8008c8e <HAL_TIM_Base_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80031b6:	f000 faf5 	bl	80037a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	4619      	mov	r1, r3
 80031c6:	480d      	ldr	r0, [pc, #52]	; (80031fc <MX_TIM2_Init+0x98>)
 80031c8:	f005 ff47 	bl	800905a <HAL_TIM_ConfigClockSource>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80031d2:	f000 fae7 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4806      	ldr	r0, [pc, #24]	; (80031fc <MX_TIM2_Init+0x98>)
 80031e4:	f006 f95c 	bl	80094a0 <HAL_TIMEx_MasterConfigSynchronization>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80031ee:	f000 fad9 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031f2:	bf00      	nop
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200007a0 	.word	0x200007a0

08003200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <MX_USART1_UART_Init+0x5c>)
 8003208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800320c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003242:	4805      	ldr	r0, [pc, #20]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003244:	f006 f9d2 	bl	80095ec <HAL_UART_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800324e:	f000 faa9 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200008a4 	.word	0x200008a4
 800325c:	40013800 	.word	0x40013800

08003260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <MX_GPIO_Init+0xd8>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <MX_GPIO_Init+0xd8>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003282:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <MX_GPIO_Init+0xd8>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <MX_GPIO_Init+0xd8>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	4a29      	ldr	r2, [pc, #164]	; (8003338 <MX_GPIO_Init+0xd8>)
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329a:	4b27      	ldr	r3, [pc, #156]	; (8003338 <MX_GPIO_Init+0xd8>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a6:	4b24      	ldr	r3, [pc, #144]	; (8003338 <MX_GPIO_Init+0xd8>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4a23      	ldr	r2, [pc, #140]	; (8003338 <MX_GPIO_Init+0xd8>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b2:	4b21      	ldr	r3, [pc, #132]	; (8003338 <MX_GPIO_Init+0xd8>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80032be:	2200      	movs	r2, #0
 80032c0:	2106      	movs	r1, #6
 80032c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c6:	f003 fd05 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80032ca:	2201      	movs	r2, #1
 80032cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d4:	f003 fcfe 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <MX_GPIO_Init+0xdc>)
 80032e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	4619      	mov	r1, r3
 80032ec:	4814      	ldr	r0, [pc, #80]	; (8003340 <MX_GPIO_Init+0xe0>)
 80032ee:	f003 fb47 	bl	8006980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80032f2:	2306      	movs	r3, #6
 80032f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f6:	2301      	movs	r3, #1
 80032f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003302:	f107 030c 	add.w	r3, r7, #12
 8003306:	4619      	mov	r1, r3
 8003308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330c:	f003 fb38 	bl	8006980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003314:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003316:	2301      	movs	r3, #1
 8003318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800331a:	2301      	movs	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800331e:	2302      	movs	r3, #2
 8003320:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	4619      	mov	r1, r3
 8003328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332c:	f003 fb28 	bl	8006980 <HAL_GPIO_Init>

}
 8003330:	bf00      	nop
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	10120000 	.word	0x10120000
 8003340:	48000800 	.word	0x48000800

08003344 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//TODO-Wayne20210528
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */

  USARTLoRa.RevStrCount++; //all string receive count
 800334c:	4b4f      	ldr	r3, [pc, #316]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 800334e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	; 0x4d9
 8003352:	3301      	adds	r3, #1
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003358:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
  if(USARTLoRa.Rbuffer==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 800335e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003362:	2b0a      	cmp	r3, #10
 8003364:	d114      	bne.n	8003390 <HAL_UART_RxCpltCallback+0x4c>
  {
	   USARTLoRa.RevStrEndCount++;//0x0a("\n" Line feeds string) count
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003368:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 800336c:	3301      	adds	r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003372:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
	  if( USARTLoRa.RevStrEndCount==1	&&	USARTLoRa.RevStrCount > 5)
 8003376:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003378:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_UART_RxCpltCallback+0x4c>
 8003380:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003382:	f893 34d9 	ldrb.w	r3, [r3, #1241]	; 0x4d9
 8003386:	2b05      	cmp	r3, #5
 8003388:	d902      	bls.n	8003390 <HAL_UART_RxCpltCallback+0x4c>
		  USARTLoRa.ResetRevflag = 1;
 800338a:	4b40      	ldr	r3, [pc, #256]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 800338c:	2201      	movs	r2, #1
 800338e:	709a      	strb	r2, [r3, #2]
  }

  if(!USARTLoRa.ResetRevflag)//if LoRa not receive reset message
 8003390:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003392:	789b      	ldrb	r3, [r3, #2]
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02d      	beq.n	80033fa <HAL_UART_RxCpltCallback+0xb6>
  {
  	  USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033a0:	f893 34da 	ldrb.w	r3, [r3, #1242]	; 0x4da
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	b2d1      	uxtb	r1, r2
 80033a8:	4a38      	ldr	r2, [pc, #224]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033aa:	f882 14da 	strb.w	r1, [r2, #1242]	; 0x4da
 80033ae:	4619      	mov	r1, r3
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033b2:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 80033b6:	4b35      	ldr	r3, [pc, #212]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033b8:	440b      	add	r3, r1
 80033ba:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  	  if(USARTLoRa.RevData[0]!=0x0A)
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033c0:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80033c4:	2b0a      	cmp	r3, #10
 80033c6:	d003      	beq.n	80033d0 <HAL_UART_RxCpltCallback+0x8c>
  	  {
		USARTLoRa.RxCount= 0;
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
//		USARTLoRa.RevData[0]=0x0A;
  	  }
  	  if(USARTLoRa.RevStrEndCount == 2)
 80033d0:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033d2:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d138      	bne.n	800344c <HAL_UART_RxCpltCallback+0x108>
  	  {
  		  USARTLoRa.Revflag = 1;
 80033da:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033dc:	2201      	movs	r2, #1
 80033de:	705a      	strb	r2, [r3, #1]
  		  USARTLoRa.RxCount= 0;
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
  		  USARTLoRa.RevStrEndCount = 0;
 80033e8:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
  		  USARTLoRa.RevStrCount = 0;
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 80033f8:	e028      	b.n	800344c <HAL_UART_RxCpltCallback+0x108>
//  			USARTLoRa.LoRaRxflag = 1;
  	  }
    }
    else//reset message receive
    {
    	if(USARTLoRa.RevStrEndCount > 6)
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 80033fc:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 8003400:	2b06      	cmp	r3, #6
 8003402:	d923      	bls.n	800344c <HAL_UART_RxCpltCallback+0x108>
    	{
    		USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 8003404:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003406:	f893 34da 	ldrb.w	r3, [r3, #1242]	; 0x4da
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	b2d1      	uxtb	r1, r2
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003410:	f882 14da 	strb.w	r1, [r2, #1242]	; 0x4da
 8003414:	4619      	mov	r1, r3
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003418:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 800341e:	440b      	add	r3, r1
 8003420:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    		if(USARTLoRa.RevStrEndCount == 9)
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003426:	f893 34d8 	ldrb.w	r3, [r3, #1240]	; 0x4d8
 800342a:	2b09      	cmp	r3, #9
 800342c:	d10e      	bne.n	800344c <HAL_UART_RxCpltCallback+0x108>
    		{
    			USARTLoRa.Revflag = 1;
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003430:	2201      	movs	r2, #1
 8003432:	705a      	strb	r2, [r3, #1]
    			USARTLoRa.RxCount= 0;
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003436:	2200      	movs	r2, #0
 8003438:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
    			USARTLoRa.RevStrEndCount = 0;
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 800343e:	2200      	movs	r2, #0
 8003440:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
    			USARTLoRa.RevStrCount = 0;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003446:	2200      	movs	r2, #0
 8003448:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
    		}
    	}

    }

  if(USARTLoRa.RxCount>=70)//if don't receive "\n" Line feeds string full over to 64 byte, clear data
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 800344e:	f893 34da 	ldrb.w	r3, [r3, #1242]	; 0x4da
 8003452:	2b45      	cmp	r3, #69	; 0x45
 8003454:	d90c      	bls.n	8003470 <HAL_UART_RxCpltCallback+0x12c>
  {
	  USARTLoRa.RxCount=0;
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_UART_RxCpltCallback+0x148>)
 8003458:	2200      	movs	r2, #0
 800345a:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
  	  memset( USARTLoRa.RevData, 0, strlen((const char*)USARTLoRa.RevData) ); //clear Receive data
 800345e:	480c      	ldr	r0, [pc, #48]	; (8003490 <HAL_UART_RxCpltCallback+0x14c>)
 8003460:	f7fc fed0 	bl	8000204 <strlen>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	2100      	movs	r1, #0
 800346a:	4809      	ldr	r0, [pc, #36]	; (8003490 <HAL_UART_RxCpltCallback+0x14c>)
 800346c:	f009 fe7e 	bl	800d16c <memset>
  }
  while(HAL_UART_Receive_IT(&huart1,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 8003470:	bf00      	nop
 8003472:	2201      	movs	r2, #1
 8003474:	4907      	ldr	r1, [pc, #28]	; (8003494 <HAL_UART_RxCpltCallback+0x150>)
 8003476:	4808      	ldr	r0, [pc, #32]	; (8003498 <HAL_UART_RxCpltCallback+0x154>)
 8003478:	f006 f99a 	bl	80097b0 <HAL_UART_Receive_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f7      	bne.n	8003472 <HAL_UART_RxCpltCallback+0x12e>
//  while(HAL_UART_Receive_IT(&lphuart1,&USARTLoRa.Rbuffer,1)!=HAL_OK);
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	200002a0 	.word	0x200002a0
 8003490:	20000440 	.word	0x20000440
 8003494:	20000436 	.word	0x20000436
 8003498:	200008a4 	.word	0x200008a4

0800349c <IWDGFreezeBySTDBY>:

//TODO for IWDG Freeze By Standby Mode
void IWDGFreezeBySTDBY(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0

	 HAL_FLASH_Unlock();
 80034a0:	f002 fb92 	bl	8005bc8 <HAL_FLASH_Unlock>

	 __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); //clear FLASH Option validity error flag
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <IWDGFreezeBySTDBY+0x40>)
 80034a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034aa:	611a      	str	r2, [r3, #16]

	 HAL_FLASH_OB_Unlock();
 80034ac:	f002 fbbe 	bl	8005c2c <HAL_FLASH_OB_Unlock>



	 HAL_FLASHEx_OBGetConfig(&pOBInit); //Get Option bit setting
 80034b0:	480b      	ldr	r0, [pc, #44]	; (80034e0 <IWDGFreezeBySTDBY+0x44>)
 80034b2:	f002 fe21 	bl	80060f8 <HAL_FLASHEx_OBGetConfig>


	 //setup IWDG Freeze in standby mode
	 pOBInit.OptionType = OPTIONBYTE_USER;
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <IWDGFreezeBySTDBY+0x44>)
 80034b8:	2204      	movs	r2, #4
 80034ba:	601a      	str	r2, [r3, #0]

	 pOBInit.USERType = OB_USER_IWDG_STDBY;
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <IWDGFreezeBySTDBY+0x44>)
 80034be:	2220      	movs	r2, #32
 80034c0:	615a      	str	r2, [r3, #20]

	 pOBInit.USERConfig = OB_IWDG_STDBY_FREEZE;
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <IWDGFreezeBySTDBY+0x44>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	619a      	str	r2, [r3, #24]

	 HAL_FLASHEx_OBProgram(&pOBInit);
 80034c8:	4805      	ldr	r0, [pc, #20]	; (80034e0 <IWDGFreezeBySTDBY+0x44>)
 80034ca:	f002 fda7 	bl	800601c <HAL_FLASHEx_OBProgram>



	 HAL_FLASH_OB_Lock();
 80034ce:	f002 fbc9 	bl	8005c64 <HAL_FLASH_OB_Lock>

	 HAL_FLASH_Lock();
 80034d2:	f002 fb9b 	bl	8005c0c <HAL_FLASH_Lock>
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40022000 	.word	0x40022000
 80034e0:	20000814 	.word	0x20000814

080034e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)//timer2 interrupt per 1ms for trigger
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d12d      	bne.n	8003554 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
    	if(USARTLoRa.CrashTimerflag == 1)
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80034fa:	795b      	ldrb	r3, [r3, #5]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x2c>
    		USARTLoRa.CrashTimerCount++;
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003502:	f8b3 34ec 	ldrh.w	r3, [r3, #1260]	; 0x4ec
 8003506:	3301      	adds	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b16      	ldr	r3, [pc, #88]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800350c:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
        if(USARTLoRa.TxRevTimerflag == 1)
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003512:	799b      	ldrb	r3, [r3, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_TIM_PeriodElapsedCallback+0x44>
    	    USARTLoRa.TxRevTimerCount++;
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800351a:	f893 34ee 	ldrb.w	r3, [r3, #1262]	; 0x4ee
 800351e:	3301      	adds	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003524:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
    	//Water detect timer
    	if(NodeStatus == TransmitWithAlarm)
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d111      	bne.n	8003554 <HAL_TIM_PeriodElapsedCallback+0x70>
    	{
    		SendAlarmTMRCount++;
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800353a:	801a      	strh	r2, [r3, #0]
    		if(SendAlarmTMRCount == 10000)//per 10s for trigger
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	f242 7210 	movw	r2, #10000	; 0x2710
 8003544:	4293      	cmp	r3, r2
 8003546:	d105      	bne.n	8003554 <HAL_TIM_PeriodElapsedCallback+0x70>
    		{
        		SendAlarmflag = true ;
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
        		SendAlarmTMRCount = 0;
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003550:	2200      	movs	r2, #0
 8003552:	801a      	strh	r2, [r3, #0]
    		}
    	}

    }
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	200007a0 	.word	0x200007a0
 8003564:	200002a0 	.word	0x200002a0
 8003568:	20000950 	.word	0x20000950
 800356c:	20000952 	.word	0x20000952
 8003570:	20000928 	.word	0x20000928

08003574 <HAL_PWR_PVDCallback>:
  * @brief PWR PVD interrupt callback
  * @retval None
  */

void HAL_PWR_PVDCallback(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0

	__NOP();
 800357a:	bf00      	nop
	//IWDG_Refresh
	HAL_IWDG_Refresh(&hiwdg);
 800357c:	4819      	ldr	r0, [pc, #100]	; (80035e4 <HAL_PWR_PVDCallback+0x70>)
 800357e:	f003 fc07 	bl	8006d90 <HAL_IWDG_Refresh>

	/* Request LoRa chip to enter Sleep mode  */
	//Hardware Reset
	HAL_GPIO_WritePin(RstPinGroup, RstPin, GPIO_PIN_RESET);
 8003582:	2200      	movs	r2, #0
 8003584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800358c:	f003 fba2 	bl	8006cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RstPinGroup, RstPin, GPIO_PIN_SET);
 8003590:	2201      	movs	r2, #1
 8003592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359a:	f003 fb9b 	bl	8006cd4 <HAL_GPIO_WritePin>
	//IWDG_Refresh
//	HAL_IWDG_Refresh(&hiwdg);
	uint32_t Nopi;
	for(Nopi=0;Nopi<4000000;Nopi++)
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e003      	b.n	80035ac <HAL_PWR_PVDCallback+0x38>
		__NOP();
 80035a4:	bf00      	nop
	for(Nopi=0;Nopi<4000000;Nopi++)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3301      	adds	r3, #1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <HAL_PWR_PVDCallback+0x74>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d9f7      	bls.n	80035a4 <HAL_PWR_PVDCallback+0x30>
	LoRaCommand(&huart1, Sleep24h);
 80035b4:	490d      	ldr	r1, [pc, #52]	; (80035ec <HAL_PWR_PVDCallback+0x78>)
 80035b6:	480e      	ldr	r0, [pc, #56]	; (80035f0 <HAL_PWR_PVDCallback+0x7c>)
 80035b8:	f7fe fb64 	bl	8001c84 <LoRaCommand>
    
    //PVD active, voltage <2V, set Heavyload = 2V to trigger sleep after reset.
	ADC_1.BatVHeavyload = 2;
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_PWR_PVDCallback+0x80>)
 80035be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
	//TODO: Write EEPROM 20211005 by Wayne
	EE_Status ee_status;
	ee_status = EEPROM_Emu_write();
 80035c4:	f000 f86e 	bl	80036a4 <EEPROM_Emu_write>
 80035c8:	4603      	mov	r3, r0
 80035ca:	807b      	strh	r3, [r7, #2]
    
	/* Wait for any cleanup to complete before entering standby/shutdown mode */
	while (ErasingOnGoing == 1) { }
 80035cc:	bf00      	nop
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_PWR_PVDCallback+0x84>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d0fb      	beq.n	80035ce <HAL_PWR_PVDCallback+0x5a>

	/* Request to enter STANDBY mode  */
	HAL_PWR_EnterSTANDBYMode();
 80035d6:	f003 fca1 	bl	8006f1c <HAL_PWR_EnterSTANDBYMode>
 }
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000800 	.word	0x20000800
 80035e8:	003d08ff 	.word	0x003d08ff
 80035ec:	08011d78 	.word	0x08011d78
 80035f0:	200008a4 	.word	0x200008a4
 80035f4:	20000264 	.word	0x20000264
 80035f8:	20000240 	.word	0x20000240

080035fc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Call CleanUp callback when all requested pages have been erased */
  if (ReturnValue == 0xFFFFFFFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d101      	bne.n	8003610 <HAL_FLASH_EndOfOperationCallback+0x14>
  {
    EE_EndOfCleanup_UserCallback();
 800360c:	f000 f804 	bl	8003618 <EE_EndOfCleanup_UserCallback>
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <EE_EndOfCleanup_UserCallback>:
  * @brief  Clean Up end of operation interrupt callback.
  * @param  None
  * @retval None
  */
void EE_EndOfCleanup_UserCallback(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  ErasingOnGoing = 0;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <EE_EndOfCleanup_UserCallback+0x14>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000240 	.word	0x20000240

08003630 <EEPROM_Emu_read>:

//TODO for EEPROM emulation Read
EE_Status EEPROM_Emu_read(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
	EE_Status ee_status;
	/* Read all the variables */
     for (Index = 1; Index < NB_OF_VARIABLES+1; Index++)
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <EEPROM_Emu_read+0x64>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	bf00      	nop
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <EEPROM_Emu_read+0x64>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d821      	bhi.n	800368a <EEPROM_Emu_read+0x5a>
     {
       ee_status = EE_ReadVariable32bits(Index, &VarValue);
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <EEPROM_Emu_read+0x64>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	4912      	ldr	r1, [pc, #72]	; (8003698 <EEPROM_Emu_read+0x68>)
 800364e:	4618      	mov	r0, r3
 8003650:	f008 f9b4 	bl	800b9bc <EE_ReadVariable32bits>
 8003654:	4603      	mov	r3, r0
 8003656:	80fb      	strh	r3, [r7, #6]
       switch(Index)
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <EEPROM_Emu_read+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10d      	bne.n	800367c <EEPROM_Emu_read+0x4c>
       {
       	case 1:
       		ADC_1.BatVHeavyload = (float)VarValue/100;
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <EEPROM_Emu_read+0x68>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800366c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800369c <EEPROM_Emu_read+0x6c>
 8003670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <EEPROM_Emu_read+0x70>)
 8003676:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
       		break;
 800367a:	bf00      	nop

       }
 //    if (VarValue != a_VarDataTab[Index-1]) {Error_Handler();}
     if (ee_status != EE_OK) {Error_Handler();}
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <EEPROM_Emu_read+0x56>
 8003682:	f000 f88f 	bl	80037a4 <Error_Handler>
// 	  __NOP();
	return ee_status;
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	e7ff      	b.n	800368a <EEPROM_Emu_read+0x5a>
     }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000
 8003698:	20000248 	.word	0x20000248
 800369c:	42c80000 	.word	0x42c80000
 80036a0:	20000264 	.word	0x20000264

080036a4 <EEPROM_Emu_write>:

//TODO for EEPROM emulation Write
EE_Status EEPROM_Emu_write(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
	EE_Status ee_status;
	/* Unlock the Flash Program Erase controller */
    HAL_FLASH_Unlock();
 80036aa:	f002 fa8d 	bl	8005bc8 <HAL_FLASH_Unlock>
    /* Store values of all variables in EEPROM, ascending order */
    for (Index = 1; Index < NB_OF_VARIABLES+1; Index++)
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <EEPROM_Emu_write+0xe8>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e059      	b.n	800376a <EEPROM_Emu_write+0xc6>
    {
    	/* Wait any cleanup is completed before accessing flash again */
    	while (ErasingOnGoing == 1) { }
 80036b6:	bf00      	nop
 80036b8:	4b35      	ldr	r3, [pc, #212]	; (8003790 <EEPROM_Emu_write+0xec>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d0fb      	beq.n	80036b8 <EEPROM_Emu_write+0x14>

		switch(Index)
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <EEPROM_Emu_write+0xe8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10d      	bne.n	80036e4 <EEPROM_Emu_write+0x40>
		{
			case 1:
//				VarValue = 1.22233*100;
				VarValue = ADC_1.BatVHeavyload*100;
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <EEPROM_Emu_write+0xf0>)
 80036ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80036ce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003798 <EEPROM_Emu_write+0xf4>
 80036d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036da:	ee17 2a90 	vmov	r2, s15
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <EEPROM_Emu_write+0xf8>)
 80036e0:	601a      	str	r2, [r3, #0]
			break;
 80036e2:	bf00      	nop
		}
		ee_status = EE_WriteVariable32bits(Index, VarValue);
 80036e4:	4b29      	ldr	r3, [pc, #164]	; (800378c <EEPROM_Emu_write+0xe8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4a2c      	ldr	r2, [pc, #176]	; (800379c <EEPROM_Emu_write+0xf8>)
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f008 f988 	bl	800ba06 <EE_WriteVariable32bits>
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
		ee_status|= EE_ReadVariable32bits(Index, &a_VarDataTab[Index-1]);
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <EEPROM_Emu_write+0xe8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <EEPROM_Emu_write+0xe8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4925      	ldr	r1, [pc, #148]	; (80037a0 <EEPROM_Emu_write+0xfc>)
 800370a:	440b      	add	r3, r1
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f008 f954 	bl	800b9bc <EE_ReadVariable32bits>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	4313      	orrs	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
    	if (VarValue != a_VarDataTab[Index-1]) {Error_Handler();}
 800371e:	4b1b      	ldr	r3, [pc, #108]	; (800378c <EEPROM_Emu_write+0xe8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <EEPROM_Emu_write+0xfc>)
 8003726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <EEPROM_Emu_write+0xf8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <EEPROM_Emu_write+0x92>
 8003732:	f000 f837 	bl	80037a4 <Error_Handler>

    	/* Start cleanup IT mode, if cleanup is needed */
    	if ((ee_status & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {ErasingOnGoing = 1;ee_status|= EE_CleanUp_IT();}
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <EEPROM_Emu_write+0xb0>
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <EEPROM_Emu_write+0xec>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	f008 fa4f 	bl	800bbe8 <EE_CleanUp_IT>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	4313      	orrs	r3, r2
 8003752:	80fb      	strh	r3, [r7, #6]
    	if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2bff      	cmp	r3, #255	; 0xff
 800375a:	d101      	bne.n	8003760 <EEPROM_Emu_write+0xbc>
 800375c:	f000 f822 	bl	80037a4 <Error_Handler>
    for (Index = 1; Index < NB_OF_VARIABLES+1; Index++)
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <EEPROM_Emu_write+0xe8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <EEPROM_Emu_write+0xe8>)
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <EEPROM_Emu_write+0xe8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d9a1      	bls.n	80036b6 <EEPROM_Emu_write+0x12>
    }

    /* Lock the Flash Program Erase controller */
    HAL_FLASH_Lock();
 8003772:	f002 fa4b 	bl	8005c0c <HAL_FLASH_Lock>
    /* Wait for any cleanup to complete before entering standby/shutdown mode */
    while (ErasingOnGoing == 1) { }
 8003776:	bf00      	nop
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <EEPROM_Emu_write+0xec>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d0fb      	beq.n	8003778 <EEPROM_Emu_write+0xd4>
    return ee_status;
 8003780:	88fb      	ldrh	r3, [r7, #6]

}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000000 	.word	0x20000000
 8003790:	20000240 	.word	0x20000240
 8003794:	20000264 	.word	0x20000264
 8003798:	42c80000 	.word	0x42c80000
 800379c:	20000248 	.word	0x20000248
 80037a0:	20000244 	.word	0x20000244

080037a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a8:	b672      	cpsid	i
}
 80037aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037ac:	e7fe      	b.n	80037ac <Error_Handler+0x8>
	...

080037b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_MspInit+0x8c>)
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <HAL_MspInit+0x8c>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6613      	str	r3, [r2, #96]	; 0x60
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_MspInit+0x8c>)
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_MspInit+0x8c>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	4a17      	ldr	r2, [pc, #92]	; (800383c <HAL_MspInit+0x8c>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_MspInit+0x8c>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2100      	movs	r1, #0
 80037f4:	2001      	movs	r0, #1
 80037f6:	f001 ffe4 	bl	80057c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80037fa:	2001      	movs	r0, #1
 80037fc:	f001 fffd 	bl	80057fa <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	2004      	movs	r0, #4
 8003806:	f001 ffdc 	bl	80057c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800380a:	2004      	movs	r0, #4
 800380c:	f001 fff5 	bl	80057fa <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING_FALLING;
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_MspInit+0x90>)
 8003816:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003818:	f107 0308 	add.w	r3, r7, #8
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fac7 	bl	8006db0 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003822:	f003 fb25 	bl	8006e70 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */
  //TODO:PVD wait Power On--20211014 by Wayne
  //Disable the PVD Output
  HAL_PWR_DisablePVD();
 8003826:	f003 fb33 	bl	8006e90 <HAL_PWR_DisablePVD>
 //Delay 50ms for Power on
  HAL_Delay(50);
 800382a:	2032      	movs	r0, #50	; 0x32
 800382c:	f000 faec 	bl	8003e08 <HAL_Delay>
  //Enable the PVD Output
  HAL_PWR_EnablePVD();
 8003830:	f003 fb1e 	bl	8006e70 <HAL_PWR_EnablePVD>
  /* USER CODE END MspInit 1 */
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	00010003 	.word	0x00010003

08003844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_ADC_MspInit+0x38>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10b      	bne.n	800386e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_ADC_MspInit+0x3c>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_ADC_MspInit+0x3c>)
 800385c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_ADC_MspInit+0x3c>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	50040000 	.word	0x50040000
 8003880:	40021000 	.word	0x40021000

08003884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <HAL_RTC_MspInit+0x30>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d107      	bne.n	80038a6 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RTC_MspInit+0x34>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	4a06      	ldr	r2, [pc, #24]	; (80038b8 <HAL_RTC_MspInit+0x34>)
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40002800 	.word	0x40002800
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d113      	bne.n	80038f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_TIM_Base_MspInit+0x44>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <HAL_TIM_Base_MspInit+0x44>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6593      	str	r3, [r2, #88]	; 0x58
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_TIM_Base_MspInit+0x44>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2100      	movs	r1, #0
 80038ea:	201c      	movs	r0, #28
 80038ec:	f001 ff69 	bl	80057c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038f0:	201c      	movs	r0, #28
 80038f2:	f001 ff82 	bl	80057fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000

08003904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <HAL_UART_MspInit+0x90>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d131      	bne.n	800398a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003926:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_UART_MspInit+0x94>)
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_UART_MspInit+0x94>)
 800392c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003930:	6613      	str	r3, [r2, #96]	; 0x60
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_UART_MspInit+0x94>)
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <HAL_UART_MspInit+0x94>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <HAL_UART_MspInit+0x94>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_UART_MspInit+0x94>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800395a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003968:	2307      	movs	r3, #7
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4619      	mov	r1, r3
 8003972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003976:	f003 f803 	bl	8006980 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800397a:	2200      	movs	r2, #0
 800397c:	2100      	movs	r1, #0
 800397e:	2025      	movs	r0, #37	; 0x25
 8003980:	f001 ff1f 	bl	80057c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003984:	2025      	movs	r0, #37	; 0x25
 8003986:	f001 ff38 	bl	80057fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800398a:	bf00      	nop
 800398c:	3728      	adds	r7, #40	; 0x28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40013800 	.word	0x40013800
 8003998:	40021000 	.word	0x40021000

0800399c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  //TODO:CubeEEPROM--by Wayne20211004
  /* Check if NMI is due to flash ECCD (error detection) */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <NMI_Handler+0x88>)
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	da39      	bge.n	8003a1c <NMI_Handler+0x80>
  {
  
  if(CleanupPhase==1)
 80039a8:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <NMI_Handler+0x8c>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d12d      	bne.n	8003a0e <NMI_Handler+0x72>
    {
      if ((AddressRead >= START_PAGE_ADDRESS) && (AddressRead <= END_EEPROM_ADDRESS))
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <NMI_Handler+0x90>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <NMI_Handler+0x94>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d92f      	bls.n	8003a1c <NMI_Handler+0x80>
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <NMI_Handler+0x90>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1c      	ldr	r2, [pc, #112]	; (8003a34 <NMI_Handler+0x98>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d22a      	bcs.n	8003a1c <NMI_Handler+0x80>
      {
        /* Delete the corrupted flash address */
        if (EE_DeleteCorruptedFlashAddress((uint32_t)AddressRead) == EE_OK)
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <NMI_Handler+0x90>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f008 f9e2 	bl	800bd94 <EE_DeleteCorruptedFlashAddress>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d023      	beq.n	8003a1e <NMI_Handler+0x82>
        /* This might be because we try to write 0 at a line already considered at 0 which is a forbidden operation */
        /* This problem triggers PROGERR, PGAERR and PGSERR flags */
        else
        {
          /* We check if the flags concerned have been triggered */
          if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) && (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <NMI_Handler+0x88>)
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01c      	beq.n	8003a1c <NMI_Handler+0x80>
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <NMI_Handler+0x88>)
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <NMI_Handler+0x80>
             && (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR)))
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <NMI_Handler+0x88>)
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <NMI_Handler+0x80>
          {
            /* If yes, we clear them */
            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PROGERR);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <NMI_Handler+0x88>)
 80039fc:	2208      	movs	r2, #8
 80039fe:	611a      	str	r2, [r3, #16]
            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <NMI_Handler+0x88>)
 8003a02:	2220      	movs	r2, #32
 8003a04:	611a      	str	r2, [r3, #16]
            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <NMI_Handler+0x88>)
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	611a      	str	r2, [r3, #16]
            
            /* And we exit from NMI without doing anything */
            /* We do not invalidate that line because it is not programmable at 0 till the next page erase */
            /* The only consequence is that this line will trigger a new NMI later */
            return;
 8003a0c:	e008      	b.n	8003a20 <NMI_Handler+0x84>
        }
      }
    }
    else
    {
      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCD);
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <NMI_Handler+0x88>)
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <NMI_Handler+0x88>)
 8003a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a18:	6193      	str	r3, [r2, #24]
      return;
 8003a1a:	e001      	b.n	8003a20 <NMI_Handler+0x84>
     - ECCD is raised out of eeprom emulation flash pages
     - no ECCD is raised */
     
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <NMI_Handler+0x80>
          return;
 8003a1e:	bf00      	nop
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40022000 	.word	0x40022000
 8003a28:	20000258 	.word	0x20000258
 8003a2c:	20000254 	.word	0x20000254
 8003a30:	0807ffff 	.word	0x0807ffff
 8003a34:	08082000 	.word	0x08082000

08003a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <HardFault_Handler+0x4>

08003a3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a42:	e7fe      	b.n	8003a42 <MemManage_Handler+0x4>

08003a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <BusFault_Handler+0x4>

08003a4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a4e:	e7fe      	b.n	8003a4e <UsageFault_Handler+0x4>

08003a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a7e:	f000 f9a3 	bl	8003dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */
  //TODO:CubeEEPROM--by Wayne20211004
  /* Loop inside the handler to prevent the Cortex from using the Flash,
     allowing the flash interface to finish any ongoing transfer. */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) != RESET)
 8003a8c:	bf00      	nop
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <PVD_PVM_IRQHandler+0x1c>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f9      	bne.n	8003a8e <PVD_PVM_IRQHandler+0x6>
  {
  }
  
  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8003a9a:	f003 fba5 	bl	80071e8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
   
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003aac:	f001 ffaa 	bl	8005a04 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <TIM2_IRQHandler+0x10>)
 8003aba:	f005 f9af 	bl	8008e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200007a0 	.word	0x200007a0

08003ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <USART1_IRQHandler+0x10>)
 8003ace:	f005 feb3 	bl	8009838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200008a4 	.word	0x200008a4

08003adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
	return 1;
 8003ae0:	2301      	movs	r3, #1
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_kill>:

int _kill(int pid, int sig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003af6:	f009 fb0f 	bl	800d118 <__errno>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2216      	movs	r2, #22
 8003afe:	601a      	str	r2, [r3, #0]
	return -1;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_exit>:

void _exit (int status)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b14:	f04f 31ff 	mov.w	r1, #4294967295
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ffe7 	bl	8003aec <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b1e:	e7fe      	b.n	8003b1e <_exit+0x12>

08003b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e00a      	b.n	8003b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b32:	f3af 8000 	nop.w
 8003b36:	4601      	mov	r1, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	60ba      	str	r2, [r7, #8]
 8003b3e:	b2ca      	uxtb	r2, r1
 8003b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3301      	adds	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dbf0      	blt.n	8003b32 <_read+0x12>
	}

return len;
 8003b50:	687b      	ldr	r3, [r7, #4]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e009      	b.n	8003b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	60ba      	str	r2, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	dbf1      	blt.n	8003b6c <_write+0x12>
	}
	return len;
 8003b88:	687b      	ldr	r3, [r7, #4]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_close>:

int _close(int file)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
	return -1;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bba:	605a      	str	r2, [r3, #4]
	return 0;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <_isatty>:

int _isatty(int file)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	return 0;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c04:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <_sbrk+0x5c>)
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <_sbrk+0x60>)
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <_sbrk+0x64>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <_sbrk+0x64>)
 8003c1a:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <_sbrk+0x68>)
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <_sbrk+0x64>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d207      	bcs.n	8003c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c2c:	f009 fa74 	bl	800d118 <__errno>
 8003c30:	4603      	mov	r3, r0
 8003c32:	220c      	movs	r2, #12
 8003c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	e009      	b.n	8003c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <_sbrk+0x64>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c42:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <_sbrk+0x64>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <_sbrk+0x64>)
 8003c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20050000 	.word	0x20050000
 8003c5c:	00000400 	.word	0x00000400
 8003c60:	2000024c 	.word	0x2000024c
 8003c64:	20000968 	.word	0x20000968

08003c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003c6c:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <SystemInit+0x5c>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <SystemInit+0x5c>)
 8003c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <SystemInit+0x60>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <SystemInit+0x60>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <SystemInit+0x60>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <SystemInit+0x60>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <SystemInit+0x60>)
 8003c94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003c98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <SystemInit+0x60>)
 8003ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <SystemInit+0x60>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <SystemInit+0x60>)
 8003cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <SystemInit+0x60>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000ed00 	.word	0xe000ed00
 8003cc8:	40021000 	.word	0x40021000

08003ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cd0:	f7ff ffca 	bl	8003c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003cd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003cd6:	e003      	b.n	8003ce0 <LoopCopyDataInit>

08003cd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003cda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003cdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003cde:	3104      	adds	r1, #4

08003ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ce0:	480a      	ldr	r0, [pc, #40]	; (8003d0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ce4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ce6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ce8:	d3f6      	bcc.n	8003cd8 <CopyDataInit>
	ldr	r2, =_sbss
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003cec:	e002      	b.n	8003cf4 <LoopFillZerobss>

08003cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003cee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003cf0:	f842 3b04 	str.w	r3, [r2], #4

08003cf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <LoopForever+0x16>)
	cmp	r2, r3
 8003cf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003cf8:	d3f9      	bcc.n	8003cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cfa:	f009 fa13 	bl	800d124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cfe:	f7fe ff33 	bl	8002b68 <main>

08003d02 <LoopForever>:

LoopForever:
    b LoopForever
 8003d02:	e7fe      	b.n	8003d02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d04:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8003d08:	0801229c 	.word	0x0801229c
	ldr	r0, =_sdata
 8003d0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d10:	20000208 	.word	0x20000208
	ldr	r2, =_sbss
 8003d14:	20000220 	.word	0x20000220
	ldr	r3, = _ebss
 8003d18:	20000968 	.word	0x20000968

08003d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC1_2_IRQHandler>

08003d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f001 fd3f 	bl	80057ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f000 f80e 	bl	8003d50 <HAL_InitTick>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	71fb      	strb	r3, [r7, #7]
 8003d3e:	e001      	b.n	8003d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d40:	f7ff fd36 	bl	80037b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d44:	79fb      	ldrb	r3, [r7, #7]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d5c:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <HAL_InitTick+0x6c>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_InitTick+0x70>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_InitTick+0x6c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fd4b 	bl	8005816 <HAL_SYSTICK_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d809      	bhi.n	8003da0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	f001 fd15 	bl	80057c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d98:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <HAL_InitTick+0x74>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e007      	b.n	8003db0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	e004      	b.n	8003db0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e001      	b.n	8003db0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c
 8003dc0:	20000004 	.word	0x20000004
 8003dc4:	20000008 	.word	0x20000008

08003dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_IncTick+0x20>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_IncTick+0x24>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a04      	ldr	r2, [pc, #16]	; (8003dec <HAL_IncTick+0x24>)
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	2000000c 	.word	0x2000000c
 8003dec:	20000954 	.word	0x20000954

08003df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return uwTick;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_GetTick+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000954 	.word	0x20000954

08003e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7ff ffee 	bl	8003df0 <HAL_GetTick>
 8003e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d005      	beq.n	8003e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <HAL_Delay+0x44>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e2e:	bf00      	nop
 8003e30:	f7ff ffde 	bl	8003df0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d8f7      	bhi.n	8003e30 <HAL_Delay+0x28>
  {
  }
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3360      	adds	r3, #96	; 0x60
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <LL_ADC_SetOffset+0x44>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	03fff000 	.word	0x03fff000

08003f00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3360      	adds	r3, #96	; 0x60
 8003f0e:	461a      	mov	r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3360      	adds	r3, #96	; 0x60
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	615a      	str	r2, [r3, #20]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3330      	adds	r3, #48	; 0x30
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	4413      	add	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	211f      	movs	r1, #31
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0e9b      	lsrs	r3, r3, #26
 8003fe6:	f003 011f 	and.w	r1, r3, #31
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004006:	b480      	push	{r7}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3314      	adds	r3, #20
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	0e5b      	lsrs	r3, r3, #25
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	4413      	add	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	0d1b      	lsrs	r3, r3, #20
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2107      	movs	r1, #7
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	401a      	ands	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0d1b      	lsrs	r3, r3, #20
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	431a      	orrs	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0318 	and.w	r3, r3, #24
 800407e:	4908      	ldr	r1, [pc, #32]	; (80040a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004080:	40d9      	lsrs	r1, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	400b      	ands	r3, r1
 8004086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	0007ffff 	.word	0x0007ffff

080040a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 031f 	and.w	r3, r3, #31
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80040ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6093      	str	r3, [r2, #8]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004114:	d101      	bne.n	800411a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800413c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004164:	d101      	bne.n	800416a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041b4:	f043 0202 	orr.w	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <LL_ADC_IsEnabled+0x18>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <LL_ADC_IsEnabled+0x1a>
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d101      	bne.n	8004206 <LL_ADC_IsDisableOngoing+0x18>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <LL_ADC_IsDisableOngoing+0x1a>
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800424c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004250:	f043 0210 	orr.w	r2, r3, #16
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d101      	bne.n	800427c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800429a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d101      	bne.n	80042ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e139      	b.n	8004566 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fa9f 	bl	8003844 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fef1 	bl	8004100 <LL_ADC_IsDeepPowerDownEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fed7 	bl	80040dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff0c 	bl	8004150 <LL_ADC_IsInternalRegulatorEnabled>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d115      	bne.n	800436a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fef0 	bl	8004128 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004348:	4b89      	ldr	r3, [pc, #548]	; (8004570 <HAL_ADC_Init+0x298>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	4a89      	ldr	r2, [pc, #548]	; (8004574 <HAL_ADC_Init+0x29c>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800435c:	e002      	b.n	8004364 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3b01      	subs	r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f9      	bne.n	800435e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff feee 	bl	8004150 <LL_ADC_IsInternalRegulatorEnabled>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f043 0210 	orr.w	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff ff62 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 80043a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 80d2 	bne.w	8004554 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 80ce 	bne.w	8004554 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043c0:	f043 0202 	orr.w	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fefb 	bl	80041c8 <LL_ADC_IsEnabled>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d115      	bne.n	8004404 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d8:	4867      	ldr	r0, [pc, #412]	; (8004578 <HAL_ADC_Init+0x2a0>)
 80043da:	f7ff fef5 	bl	80041c8 <LL_ADC_IsEnabled>
 80043de:	4604      	mov	r4, r0
 80043e0:	4866      	ldr	r0, [pc, #408]	; (800457c <HAL_ADC_Init+0x2a4>)
 80043e2:	f7ff fef1 	bl	80041c8 <LL_ADC_IsEnabled>
 80043e6:	4603      	mov	r3, r0
 80043e8:	431c      	orrs	r4, r3
 80043ea:	4865      	ldr	r0, [pc, #404]	; (8004580 <HAL_ADC_Init+0x2a8>)
 80043ec:	f7ff feec 	bl	80041c8 <LL_ADC_IsEnabled>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4323      	orrs	r3, r4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	4861      	ldr	r0, [pc, #388]	; (8004584 <HAL_ADC_Init+0x2ac>)
 8004400:	f7ff fd26 	bl	8003e50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7e5b      	ldrb	r3, [r3, #25]
 8004408:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800440e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004414:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800441a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004422:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d106      	bne.n	8004440 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	3b01      	subs	r3, #1
 8004438:	045b      	lsls	r3, r3, #17
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	4b49      	ldr	r3, [pc, #292]	; (8004588 <HAL_ADC_Init+0x2b0>)
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	430b      	orrs	r3, r1
 800446e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fef5 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 800447a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff16 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 8004486:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d140      	bne.n	8004510 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d13d      	bne.n	8004510 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	7e1b      	ldrb	r3, [r3, #24]
 800449c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800449e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b6:	f023 0306 	bic.w	r3, r3, #6
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	69b9      	ldr	r1, [r7, #24]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d118      	bne.n	8004500 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044e4:	4311      	orrs	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044ea:	4311      	orrs	r1, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044f0:	430a      	orrs	r2, r1
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	611a      	str	r2, [r3, #16]
 80044fe:	e007      	b.n	8004510 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10c      	bne.n	8004532 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f023 010f 	bic.w	r1, r3, #15
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	1e5a      	subs	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
 8004530:	e007      	b.n	8004542 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 020f 	bic.w	r2, r2, #15
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	659a      	str	r2, [r3, #88]	; 0x58
 8004552:	e007      	b.n	8004564 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f043 0210 	orr.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004564:	7ffb      	ldrb	r3, [r7, #31]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3724      	adds	r7, #36	; 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	bf00      	nop
 8004570:	20000004 	.word	0x20000004
 8004574:	053e2d63 	.word	0x053e2d63
 8004578:	50040000 	.word	0x50040000
 800457c:	50040100 	.word	0x50040100
 8004580:	50040200 	.word	0x50040200
 8004584:	50040300 	.word	0x50040300
 8004588:	fff0c007 	.word	0xfff0c007

0800458c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004594:	4857      	ldr	r0, [pc, #348]	; (80046f4 <HAL_ADC_Start+0x168>)
 8004596:	f7ff fd85 	bl	80040a4 <LL_ADC_GetMultimode>
 800459a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fe5f 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 809c 	bne.w	80046e6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_ADC_Start+0x30>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e097      	b.n	80046ec <HAL_ADC_Start+0x160>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fe89 	bl	80052dc <ADC_Enable>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 8083 	bne.w	80046dc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a42      	ldr	r2, [pc, #264]	; (80046f8 <HAL_ADC_Start+0x16c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d002      	beq.n	80045fa <HAL_ADC_Start+0x6e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	e000      	b.n	80045fc <HAL_ADC_Start+0x70>
 80045fa:	4b40      	ldr	r3, [pc, #256]	; (80046fc <HAL_ADC_Start+0x170>)
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4293      	cmp	r3, r2
 8004602:	d002      	beq.n	800460a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800461e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004622:	d106      	bne.n	8004632 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	f023 0206 	bic.w	r2, r3, #6
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004630:	e002      	b.n	8004638 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	221c      	movs	r2, #28
 800463e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <HAL_ADC_Start+0x16c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d002      	beq.n	8004658 <HAL_ADC_Start+0xcc>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	e000      	b.n	800465a <HAL_ADC_Start+0xce>
 8004658:	4b28      	ldr	r3, [pc, #160]	; (80046fc <HAL_ADC_Start+0x170>)
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	4293      	cmp	r3, r2
 8004660:	d008      	beq.n	8004674 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d002      	beq.n	8004674 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b09      	cmp	r3, #9
 8004672:	d114      	bne.n	800469e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800468a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fdbc 	bl	8004214 <LL_ADC_REG_StartConversion>
 800469c:	e025      	b.n	80046ea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <HAL_ADC_Start+0x16c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d002      	beq.n	80046ba <HAL_ADC_Start+0x12e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	e000      	b.n	80046bc <HAL_ADC_Start+0x130>
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_ADC_Start+0x170>)
 80046bc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00f      	beq.n	80046ea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	659a      	str	r2, [r3, #88]	; 0x58
 80046da:	e006      	b.n	80046ea <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80046e4:	e001      	b.n	80046ea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
 80046e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	50040300 	.word	0x50040300
 80046f8:	50040100 	.word	0x50040100
 80046fc:	50040000 	.word	0x50040000

08004700 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_ADC_Stop+0x16>
 8004712:	2302      	movs	r3, #2
 8004714:	e023      	b.n	800475e <HAL_ADC_Stop+0x5e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800471e:	2103      	movs	r1, #3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fd1f 	bl	8005164 <ADC_ConversionStop>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fe35 	bl	80053a0 <ADC_Disable>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004772:	4866      	ldr	r0, [pc, #408]	; (800490c <HAL_ADC_PollForConversion+0x1a4>)
 8004774:	f7ff fc96 	bl	80040a4 <LL_ADC_GetMultimode>
 8004778:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d102      	bne.n	8004788 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004782:	2308      	movs	r3, #8
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e02a      	b.n	80047de <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b05      	cmp	r3, #5
 8004792:	d002      	beq.n	800479a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b09      	cmp	r3, #9
 8004798:	d111      	bne.n	80047be <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0a4      	b.n	8004902 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80047b8:	2304      	movs	r3, #4
 80047ba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80047bc:	e00f      	b.n	80047de <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047be:	4853      	ldr	r0, [pc, #332]	; (800490c <HAL_ADC_PollForConversion+0x1a4>)
 80047c0:	f7ff fc7e 	bl	80040c0 <LL_ADC_GetMultiDMATransfer>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e093      	b.n	8004902 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80047da:	2304      	movs	r3, #4
 80047dc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80047de:	f7ff fb07 	bl	8003df0 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80047e4:	e021      	b.n	800482a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d01d      	beq.n	800482a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80047ee:	f7ff faff 	bl	8003df0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <HAL_ADC_PollForConversion+0x9c>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d112      	bne.n	800482a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	f043 0204 	orr.w	r2, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e06b      	b.n	8004902 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0d6      	beq.n	80047e6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fb9d 	bl	8003f88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7e5b      	ldrb	r3, [r3, #25]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d118      	bne.n	800488e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b08      	cmp	r3, #8
 8004868:	d111      	bne.n	800488e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_ADC_PollForConversion+0x1a8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d002      	beq.n	800489e <HAL_ADC_PollForConversion+0x136>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	e000      	b.n	80048a0 <HAL_ADC_PollForConversion+0x138>
 800489e:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_ADC_PollForConversion+0x1ac>)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d008      	beq.n	80048ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d002      	beq.n	80048ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b09      	cmp	r3, #9
 80048b8:	d104      	bne.n	80048c4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e00c      	b.n	80048de <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a11      	ldr	r2, [pc, #68]	; (8004910 <HAL_ADC_PollForConversion+0x1a8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d002      	beq.n	80048d4 <HAL_ADC_PollForConversion+0x16c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	e000      	b.n	80048d6 <HAL_ADC_PollForConversion+0x16e>
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <HAL_ADC_PollForConversion+0x1ac>)
 80048d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d104      	bne.n	80048ee <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e008      	b.n	8004900 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	220c      	movs	r2, #12
 80048fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	50040300 	.word	0x50040300
 8004910:	50040100 	.word	0x50040100
 8004914:	50040000 	.word	0x50040000

08004918 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b0b6      	sub	sp, #216	; 0xd8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x22>
 8004952:	2302      	movs	r3, #2
 8004954:	e3e3      	b.n	800511e <HAL_ADC_ConfigChannel+0x7ea>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fc7e 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 83c4 	bne.w	80050f8 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d824      	bhi.n	80049c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	3b02      	subs	r3, #2
 800497e:	2b03      	cmp	r3, #3
 8004980:	d81b      	bhi.n	80049ba <HAL_ADC_ConfigChannel+0x86>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_ADC_ConfigChannel+0x54>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004999 	.word	0x08004999
 800498c:	080049a1 	.word	0x080049a1
 8004990:	080049a9 	.word	0x080049a9
 8004994:	080049b1 	.word	0x080049b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	220c      	movs	r2, #12
 800499c:	605a      	str	r2, [r3, #4]
          break;
 800499e:	e011      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2212      	movs	r2, #18
 80049a4:	605a      	str	r2, [r3, #4]
          break;
 80049a6:	e00d      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2218      	movs	r2, #24
 80049ac:	605a      	str	r2, [r3, #4]
          break;
 80049ae:	e009      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b6:	605a      	str	r2, [r3, #4]
          break;
 80049b8:	e004      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2206      	movs	r2, #6
 80049be:	605a      	str	r2, [r3, #4]
          break;
 80049c0:	e000      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80049c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	f7ff faec 	bl	8003fae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fc42 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 80049e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fc62 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 80049ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 81c1 	bne.w	8004d7e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 81bc 	bne.w	8004d7e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a0e:	d10f      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7ff faf3 	bl	8004006 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fa9a 	bl	8003f62 <LL_ADC_SetSamplingTimeCommonConfig>
 8004a2e:	e00e      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6819      	ldr	r1, [r3, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f7ff fae2 	bl	8004006 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fa8a 	bl	8003f62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	08db      	lsrs	r3, r3, #3
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d00a      	beq.n	8004a86 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6919      	ldr	r1, [r3, #16]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a80:	f7ff fa1a 	bl	8003eb8 <LL_ADC_SetOffset>
 8004a84:	e17b      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fa37 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x17e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fa2c 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	0e9b      	lsrs	r3, r3, #26
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	e01e      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x1bc>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fa21 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ac8:	fa93 f3a3 	rbit	r3, r3
 8004acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ad0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004ae0:	2320      	movs	r3, #32
 8004ae2:	e004      	b.n	8004aee <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004ae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x1d4>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	e018      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x206>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004b2c:	2320      	movs	r3, #32
 8004b2e:	e004      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004b30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d106      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff f9f0 	bl	8003f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f9d4 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x244>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff f9c9 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	0e9b      	lsrs	r3, r3, #26
 8004b72:	f003 021f 	and.w	r2, r3, #31
 8004b76:	e01e      	b.n	8004bb6 <HAL_ADC_ConfigChannel+0x282>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff f9be 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	e004      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x29a>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	0e9b      	lsrs	r3, r3, #26
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	e018      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x2cc>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8004bf2:	2320      	movs	r3, #32
 8004bf4:	e004      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d106      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff f98d 	bl	8003f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff f971 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x30a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff f966 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004c34:	4603      	mov	r3, r0
 8004c36:	0e9b      	lsrs	r3, r3, #26
 8004c38:	f003 021f 	and.w	r2, r3, #31
 8004c3c:	e01e      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x348>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2102      	movs	r1, #2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff f95b 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c54:	fa93 f3a3 	rbit	r3, r3
 8004c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	e004      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c74:	fab3 f383 	clz	r3, r3
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x360>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	0e9b      	lsrs	r3, r3, #26
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	e016      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x38e>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	e004      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d106      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2102      	movs	r1, #2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff f92c 	bl	8003f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2103      	movs	r1, #3
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f910 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x3cc>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2103      	movs	r1, #3
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff f905 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	0e9b      	lsrs	r3, r3, #26
 8004cfa:	f003 021f 	and.w	r2, r3, #31
 8004cfe:	e017      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x3fc>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2103      	movs	r1, #3
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f8fa 	bl	8003f00 <LL_ADC_GetOffsetChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004d22:	2320      	movs	r3, #32
 8004d24:	e003      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x414>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	0e9b      	lsrs	r3, r3, #26
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	e011      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x438>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d58:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004d60:	2320      	movs	r3, #32
 8004d62:	e003      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	fab3 f383 	clz	r3, r3
 8004d6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d106      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2103      	movs	r1, #3
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff f8d7 	bl	8003f2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fa20 	bl	80041c8 <LL_ADC_IsEnabled>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f040 8140 	bne.w	8005010 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	6819      	ldr	r1, [r3, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f7ff f95d 	bl	800405c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4a8f      	ldr	r2, [pc, #572]	; (8004fe4 <HAL_ADC_ConfigChannel+0x6b0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	f040 8131 	bne.w	8005010 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x4a2>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	0e9b      	lsrs	r3, r3, #26
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	2b09      	cmp	r3, #9
 8004dcc:	bf94      	ite	ls
 8004dce:	2301      	movls	r3, #1
 8004dd0:	2300      	movhi	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e019      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x4d6>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dde:	fa93 f3a3 	rbit	r3, r3
 8004de2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004dee:	2320      	movs	r3, #32
 8004df0:	e003      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df4:	fab3 f383 	clz	r3, r3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	bf94      	ite	ls
 8004e04:	2301      	movls	r3, #1
 8004e06:	2300      	movhi	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d079      	beq.n	8004f02 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d107      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x4f6>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	0e9b      	lsrs	r3, r3, #26
 8004e20:	3301      	adds	r3, #1
 8004e22:	069b      	lsls	r3, r3, #26
 8004e24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e28:	e015      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x522>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004e42:	2320      	movs	r3, #32
 8004e44:	e003      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e48:	fab3 f383 	clz	r3, r3
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	069b      	lsls	r3, r3, #26
 8004e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x542>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	0e9b      	lsrs	r3, r3, #26
 8004e68:	3301      	adds	r3, #1
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	e017      	b.n	8004ea6 <HAL_ADC_ConfigChannel+0x572>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004e8e:	2320      	movs	r3, #32
 8004e90:	e003      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e94:	fab3 f383 	clz	r3, r3
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea6:	ea42 0103 	orr.w	r1, r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x598>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	0e9b      	lsrs	r3, r3, #26
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f003 021f 	and.w	r2, r3, #31
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	051b      	lsls	r3, r3, #20
 8004eca:	e018      	b.n	8004efe <HAL_ADC_ConfigChannel+0x5ca>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	fa93 f3a3 	rbit	r3, r3
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	e003      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eea:	fab3 f383 	clz	r3, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	f003 021f 	and.w	r2, r3, #31
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	4413      	add	r3, r2
 8004efc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004efe:	430b      	orrs	r3, r1
 8004f00:	e081      	b.n	8005006 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x5ea>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0e9b      	lsrs	r3, r3, #26
 8004f14:	3301      	adds	r3, #1
 8004f16:	069b      	lsls	r3, r3, #26
 8004f18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f1c:	e015      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x616>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	fa93 f3a3 	rbit	r3, r3
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004f36:	2320      	movs	r3, #32
 8004f38:	e003      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	3301      	adds	r3, #1
 8004f44:	069b      	lsls	r3, r3, #26
 8004f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x636>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	0e9b      	lsrs	r3, r3, #26
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2101      	movs	r1, #1
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	e017      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x666>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	61fb      	str	r3, [r7, #28]
  return result;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004f82:	2320      	movs	r3, #32
 8004f84:	e003      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	fab3 f383 	clz	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2101      	movs	r1, #1
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	ea42 0103 	orr.w	r1, r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10d      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x692>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	0e9b      	lsrs	r3, r3, #26
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f003 021f 	and.w	r2, r3, #31
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	3b1e      	subs	r3, #30
 8004fbe:	051b      	lsls	r3, r3, #20
 8004fc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	e01e      	b.n	8005004 <HAL_ADC_ConfigChannel+0x6d0>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	613b      	str	r3, [r7, #16]
  return result;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004fde:	2320      	movs	r3, #32
 8004fe0:	e006      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x6bc>
 8004fe2:	bf00      	nop
 8004fe4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	f003 021f 	and.w	r2, r3, #31
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3b1e      	subs	r3, #30
 8004ffe:	051b      	lsls	r3, r3, #20
 8005000:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005004:	430b      	orrs	r3, r1
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	4619      	mov	r1, r3
 800500c:	f7fe fffb 	bl	8004006 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	4b44      	ldr	r3, [pc, #272]	; (8005128 <HAL_ADC_ConfigChannel+0x7f4>)
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d07a      	beq.n	8005112 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800501c:	4843      	ldr	r0, [pc, #268]	; (800512c <HAL_ADC_ConfigChannel+0x7f8>)
 800501e:	f7fe ff3d 	bl	8003e9c <LL_ADC_GetCommonPathInternalCh>
 8005022:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a41      	ldr	r2, [pc, #260]	; (8005130 <HAL_ADC_ConfigChannel+0x7fc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d12c      	bne.n	800508a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d126      	bne.n	800508a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <HAL_ADC_ConfigChannel+0x800>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_ADC_ConfigChannel+0x71c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3b      	ldr	r2, [pc, #236]	; (8005138 <HAL_ADC_ConfigChannel+0x804>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d15d      	bne.n	800510c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005058:	4619      	mov	r1, r3
 800505a:	4834      	ldr	r0, [pc, #208]	; (800512c <HAL_ADC_ConfigChannel+0x7f8>)
 800505c:	f7fe ff0b 	bl	8003e76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_ADC_ConfigChannel+0x808>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	099b      	lsrs	r3, r3, #6
 8005066:	4a36      	ldr	r2, [pc, #216]	; (8005140 <HAL_ADC_ConfigChannel+0x80c>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	099b      	lsrs	r3, r3, #6
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800507a:	e002      	b.n	8005082 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3b01      	subs	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f9      	bne.n	800507c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005088:	e040      	b.n	800510c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <HAL_ADC_ConfigChannel+0x810>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d118      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x792>
 8005094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d112      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_ADC_ConfigChannel+0x800>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_ADC_ConfigChannel+0x780>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a22      	ldr	r2, [pc, #136]	; (8005138 <HAL_ADC_ConfigChannel+0x804>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d12d      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050bc:	4619      	mov	r1, r3
 80050be:	481b      	ldr	r0, [pc, #108]	; (800512c <HAL_ADC_ConfigChannel+0x7f8>)
 80050c0:	f7fe fed9 	bl	8003e76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050c4:	e024      	b.n	8005110 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_ADC_ConfigChannel+0x814>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d120      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11a      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a14      	ldr	r2, [pc, #80]	; (8005134 <HAL_ADC_ConfigChannel+0x800>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d115      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050ee:	4619      	mov	r1, r3
 80050f0:	480e      	ldr	r0, [pc, #56]	; (800512c <HAL_ADC_ConfigChannel+0x7f8>)
 80050f2:	f7fe fec0 	bl	8003e76 <LL_ADC_SetCommonPathInternalCh>
 80050f6:	e00c      	b.n	8005112 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800510a:	e002      	b.n	8005112 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800510c:	bf00      	nop
 800510e:	e000      	b.n	8005112 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005110:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800511a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800511e:	4618      	mov	r0, r3
 8005120:	37d8      	adds	r7, #216	; 0xd8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	80080000 	.word	0x80080000
 800512c:	50040300 	.word	0x50040300
 8005130:	c7520000 	.word	0xc7520000
 8005134:	50040000 	.word	0x50040000
 8005138:	50040200 	.word	0x50040200
 800513c:	20000004 	.word	0x20000004
 8005140:	053e2d63 	.word	0x053e2d63
 8005144:	cb840000 	.word	0xcb840000
 8005148:	80000001 	.word	0x80000001

0800514c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff f872 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 8005180:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f893 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 800518c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8098 	beq.w	80052cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02a      	beq.n	8005200 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7e5b      	ldrb	r3, [r3, #25]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d126      	bne.n	8005200 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7e1b      	ldrb	r3, [r3, #24]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d122      	bne.n	8005200 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80051be:	e014      	b.n	80051ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4a45      	ldr	r2, [pc, #276]	; (80052d8 <ADC_ConversionStop+0x174>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d90d      	bls.n	80051e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051cc:	f043 0210 	orr.w	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e074      	b.n	80052ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3301      	adds	r3, #1
 80051e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d1e3      	bne.n	80051c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2240      	movs	r2, #64	; 0x40
 80051fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d014      	beq.n	8005230 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff f82a 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe ffe7 	bl	80041ee <LL_ADC_IsDisableOngoing>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff f806 	bl	800423c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d014      	beq.n	8005260 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff f839 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00c      	beq.n	8005260 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe ffcf 	bl	80041ee <LL_ADC_IsDisableOngoing>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff f815 	bl	800428a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d005      	beq.n	8005272 <ADC_ConversionStop+0x10e>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d105      	bne.n	8005278 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800526c:	230c      	movs	r3, #12
 800526e:	617b      	str	r3, [r7, #20]
        break;
 8005270:	e005      	b.n	800527e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005272:	2308      	movs	r3, #8
 8005274:	617b      	str	r3, [r7, #20]
        break;
 8005276:	e002      	b.n	800527e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005278:	2304      	movs	r3, #4
 800527a:	617b      	str	r3, [r7, #20]
        break;
 800527c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800527e:	f7fe fdb7 	bl	8003df0 <HAL_GetTick>
 8005282:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005284:	e01b      	b.n	80052be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005286:	f7fe fdb3 	bl	8003df0 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b05      	cmp	r3, #5
 8005292:	d914      	bls.n	80052be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f043 0210 	orr.w	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e007      	b.n	80052ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1dc      	bne.n	8005286 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	a33fffff 	.word	0xa33fffff

080052dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe ff6d 	bl	80041c8 <LL_ADC_IsEnabled>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d14d      	bne.n	8005390 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	4b28      	ldr	r3, [pc, #160]	; (800539c <ADC_Enable+0xc0>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	f043 0210 	orr.w	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e039      	b.n	8005392 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe ff28 	bl	8004178 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005328:	f7fe fd62 	bl	8003df0 <HAL_GetTick>
 800532c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800532e:	e028      	b.n	8005382 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe ff47 	bl	80041c8 <LL_ADC_IsEnabled>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe ff17 	bl	8004178 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800534a:	f7fe fd51 	bl	8003df0 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d914      	bls.n	8005382 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d00d      	beq.n	8005382 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f043 0210 	orr.w	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e007      	b.n	8005392 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d1cf      	bne.n	8005330 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	8000003f 	.word	0x8000003f

080053a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe ff1e 	bl	80041ee <LL_ADC_IsDisableOngoing>
 80053b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe ff05 	bl	80041c8 <LL_ADC_IsEnabled>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d047      	beq.n	8005454 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d144      	bne.n	8005454 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 030d 	and.w	r3, r3, #13
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d10c      	bne.n	80053f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe fedf 	bl	80041a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2203      	movs	r2, #3
 80053e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053ea:	f7fe fd01 	bl	8003df0 <HAL_GetTick>
 80053ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053f0:	e029      	b.n	8005446 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e023      	b.n	8005456 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800540e:	f7fe fcef 	bl	8003df0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d914      	bls.n	8005446 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	f043 0210 	orr.w	r2, r3, #16
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543a:	f043 0201 	orr.w	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e007      	b.n	8005456 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1dc      	bne.n	800540e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <LL_ADC_IsEnabled>:
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <LL_ADC_IsEnabled+0x18>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <LL_ADC_IsEnabled+0x1a>
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <LL_ADC_REG_IsConversionOngoing>:
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d101      	bne.n	800549c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b0a1      	sub	sp, #132	; 0x84
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e093      	b.n	80055f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80054d2:	2300      	movs	r3, #0
 80054d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80054d6:	2300      	movs	r3, #0
 80054d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a47      	ldr	r2, [pc, #284]	; (80055fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d102      	bne.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80054e4:	4b46      	ldr	r3, [pc, #280]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e001      	b.n	80054ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e072      	b.n	80055f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ffb8 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 8005514:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff ffb2 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d154      	bne.n	80055d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005528:	2b00      	cmp	r3, #0
 800552a:	d151      	bne.n	80055d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800552c:	4b35      	ldr	r3, [pc, #212]	; (8005604 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800552e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02c      	beq.n	8005592 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800554a:	035b      	lsls	r3, r3, #13
 800554c:	430b      	orrs	r3, r1
 800554e:	431a      	orrs	r2, r3
 8005550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005552:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005554:	4829      	ldr	r0, [pc, #164]	; (80055fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005556:	f7ff ff82 	bl	800545e <LL_ADC_IsEnabled>
 800555a:	4604      	mov	r4, r0
 800555c:	4828      	ldr	r0, [pc, #160]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800555e:	f7ff ff7e 	bl	800545e <LL_ADC_IsEnabled>
 8005562:	4603      	mov	r3, r0
 8005564:	431c      	orrs	r4, r3
 8005566:	4828      	ldr	r0, [pc, #160]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005568:	f7ff ff79 	bl	800545e <LL_ADC_IsEnabled>
 800556c:	4603      	mov	r3, r0
 800556e:	4323      	orrs	r3, r4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d137      	bne.n	80055e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800557c:	f023 030f 	bic.w	r3, r3, #15
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	6811      	ldr	r1, [r2, #0]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	6892      	ldr	r2, [r2, #8]
 8005588:	430a      	orrs	r2, r1
 800558a:	431a      	orrs	r2, r3
 800558c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800558e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005590:	e028      	b.n	80055e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800559a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800559e:	4817      	ldr	r0, [pc, #92]	; (80055fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80055a0:	f7ff ff5d 	bl	800545e <LL_ADC_IsEnabled>
 80055a4:	4604      	mov	r4, r0
 80055a6:	4816      	ldr	r0, [pc, #88]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055a8:	f7ff ff59 	bl	800545e <LL_ADC_IsEnabled>
 80055ac:	4603      	mov	r3, r0
 80055ae:	431c      	orrs	r4, r3
 80055b0:	4815      	ldr	r0, [pc, #84]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055b2:	f7ff ff54 	bl	800545e <LL_ADC_IsEnabled>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4323      	orrs	r3, r4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d112      	bne.n	80055e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055c6:	f023 030f 	bic.w	r3, r3, #15
 80055ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80055cc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055ce:	e009      	b.n	80055e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80055e2:	e000      	b.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80055ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3784      	adds	r7, #132	; 0x84
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}
 80055fa:	bf00      	nop
 80055fc:	50040000 	.word	0x50040000
 8005600:	50040100 	.word	0x50040100
 8005604:	50040300 	.word	0x50040300
 8005608:	50040200 	.word	0x50040200

0800560c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <__NVIC_SetPriorityGrouping+0x44>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005628:	4013      	ands	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800563e:	4a04      	ldr	r2, [pc, #16]	; (8005650 <__NVIC_SetPriorityGrouping+0x44>)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	60d3      	str	r3, [r2, #12]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	e000ed00 	.word	0xe000ed00

08005654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <__NVIC_GetPriorityGrouping+0x18>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	f003 0307 	and.w	r3, r3, #7
}
 8005662:	4618      	mov	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	2b00      	cmp	r3, #0
 8005680:	db0b      	blt.n	800569a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	f003 021f 	and.w	r2, r3, #31
 8005688:	4907      	ldr	r1, [pc, #28]	; (80056a8 <__NVIC_EnableIRQ+0x38>)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2001      	movs	r0, #1
 8005692:	fa00 f202 	lsl.w	r2, r0, r2
 8005696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	e000e100 	.word	0xe000e100

080056ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	6039      	str	r1, [r7, #0]
 80056b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db0a      	blt.n	80056d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	490c      	ldr	r1, [pc, #48]	; (80056f8 <__NVIC_SetPriority+0x4c>)
 80056c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ca:	0112      	lsls	r2, r2, #4
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	440b      	add	r3, r1
 80056d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056d4:	e00a      	b.n	80056ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4908      	ldr	r1, [pc, #32]	; (80056fc <__NVIC_SetPriority+0x50>)
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	3b04      	subs	r3, #4
 80056e4:	0112      	lsls	r2, r2, #4
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	440b      	add	r3, r1
 80056ea:	761a      	strb	r2, [r3, #24]
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	e000e100 	.word	0xe000e100
 80056fc:	e000ed00 	.word	0xe000ed00

08005700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f1c3 0307 	rsb	r3, r3, #7
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf28      	it	cs
 800571e:	2304      	movcs	r3, #4
 8005720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3304      	adds	r3, #4
 8005726:	2b06      	cmp	r3, #6
 8005728:	d902      	bls.n	8005730 <NVIC_EncodePriority+0x30>
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3b03      	subs	r3, #3
 800572e:	e000      	b.n	8005732 <NVIC_EncodePriority+0x32>
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43da      	mvns	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	401a      	ands	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005748:	f04f 31ff 	mov.w	r1, #4294967295
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	43d9      	mvns	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005758:	4313      	orrs	r3, r2
         );
}
 800575a:	4618      	mov	r0, r3
 800575c:	3724      	adds	r7, #36	; 0x24
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3b01      	subs	r3, #1
 8005774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005778:	d301      	bcc.n	800577e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800577a:	2301      	movs	r3, #1
 800577c:	e00f      	b.n	800579e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <SysTick_Config+0x40>)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005786:	210f      	movs	r1, #15
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	f7ff ff8e 	bl	80056ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <SysTick_Config+0x40>)
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005796:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <SysTick_Config+0x40>)
 8005798:	2207      	movs	r2, #7
 800579a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	e000e010 	.word	0xe000e010

080057ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff ff29 	bl	800560c <__NVIC_SetPriorityGrouping>
}
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4603      	mov	r3, r0
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057d4:	f7ff ff3e 	bl	8005654 <__NVIC_GetPriorityGrouping>
 80057d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	f7ff ff8e 	bl	8005700 <NVIC_EncodePriority>
 80057e4:	4602      	mov	r2, r0
 80057e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff ff5d 	bl	80056ac <__NVIC_SetPriority>
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff ff31 	bl	8005670 <__NVIC_EnableIRQ>
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff ffa2 	bl	8005768 <SysTick_Config>
 8005824:	4603      	mov	r3, r0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d008      	beq.n	8005858 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2204      	movs	r2, #4
 800584a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e022      	b.n	800589e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 020e 	bic.w	r2, r2, #14
 8005866:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0201 	bic.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	f003 021c 	and.w	r2, r3, #28
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	2101      	movs	r1, #1
 8005886:	fa01 f202 	lsl.w	r2, r1, r2
 800588a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d005      	beq.n	80058ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2204      	movs	r2, #4
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
 80058cc:	e029      	b.n	8005922 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 020e 	bic.w	r2, r2, #14
 80058dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f003 021c 	and.w	r2, r3, #28
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2101      	movs	r1, #1
 80058fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005900:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
    }
  }
  return status;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800593e:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <HAL_FLASH_Program+0xd0>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_FLASH_Program+0x1e>
 8005946:	2302      	movs	r3, #2
 8005948:	e053      	b.n	80059f2 <HAL_FLASH_Program+0xc6>
 800594a:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <HAL_FLASH_Program+0xd0>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005950:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005954:	f000 f996 	bl	8005c84 <FLASH_WaitForLastOperation>
 8005958:	4603      	mov	r3, r0
 800595a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d143      	bne.n	80059ea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005962:	4b26      	ldr	r3, [pc, #152]	; (80059fc <HAL_FLASH_Program+0xd0>)
 8005964:	2200      	movs	r2, #0
 8005966:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005968:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <HAL_FLASH_Program+0xd4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <HAL_FLASH_Program+0xd4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <HAL_FLASH_Program+0xd4>)
 800597a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800597e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005980:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <HAL_FLASH_Program+0xd0>)
 8005982:	2202      	movs	r2, #2
 8005984:	771a      	strb	r2, [r3, #28]
 8005986:	e002      	b.n	800598e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005988:	4b1c      	ldr	r3, [pc, #112]	; (80059fc <HAL_FLASH_Program+0xd0>)
 800598a:	2200      	movs	r2, #0
 800598c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005998:	68b8      	ldr	r0, [r7, #8]
 800599a:	f000 f9c9 	bl	8005d30 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800599e:	2301      	movs	r3, #1
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	e010      	b.n	80059c6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d002      	beq.n	80059b0 <HAL_FLASH_Program+0x84>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d10a      	bne.n	80059c6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4619      	mov	r1, r3
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f000 f9e1 	bl	8005d7c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d102      	bne.n	80059c6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80059c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059c4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059ca:	f000 f95b 	bl	8005c84 <FLASH_WaitForLastOperation>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <HAL_FLASH_Program+0xd4>)
 80059da:	695a      	ldr	r2, [r3, #20]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	43db      	mvns	r3, r3
 80059e0:	4907      	ldr	r1, [pc, #28]	; (8005a00 <HAL_FLASH_Program+0xd4>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80059e6:	f000 fc33 	bl	8006250 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059ea:	4b04      	ldr	r3, [pc, #16]	; (80059fc <HAL_FLASH_Program+0xd0>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]

  return status;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000010 	.word	0x20000010
 8005a00:	40022000 	.word	0x40022000

08005a04 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8005a0a:	4b68      	ldr	r3, [pc, #416]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	4a67      	ldr	r2, [pc, #412]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a14:	f023 0307 	bic.w	r3, r3, #7
 8005a18:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8005a1a:	4b64      	ldr	r3, [pc, #400]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4a63      	ldr	r2, [pc, #396]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a24:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8005a26:	4b62      	ldr	r3, [pc, #392]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005a28:	7a1b      	ldrb	r3, [r3, #8]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d105      	bne.n	8005a3c <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005a30:	4b5e      	ldr	r3, [pc, #376]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	4a5d      	ldr	r2, [pc, #372]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a3a:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005a3c:	4b5b      	ldr	r3, [pc, #364]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005a44:	4013      	ands	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d045      	beq.n	8005ada <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005a4e:	4b58      	ldr	r3, [pc, #352]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	4a56      	ldr	r2, [pc, #344]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005a58:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <HAL_FLASH_IRQHandler+0x70>
 8005a64:	4b51      	ldr	r3, [pc, #324]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a66:	699a      	ldr	r2, [r3, #24]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a6e:	494f      	ldr	r1, [pc, #316]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	618b      	str	r3, [r1, #24]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_FLASH_IRQHandler+0x84>
 8005a7e:	4a4b      	ldr	r2, [pc, #300]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a86:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8005a88:	f000 fbe2 	bl	8006250 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8005a8c:	4b48      	ldr	r3, [pc, #288]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005a8e:	7a1b      	ldrb	r3, [r3, #8]
 8005a90:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d105      	bne.n	8005aa4 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8005a98:	4b45      	ldr	r3, [pc, #276]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f889 	bl	8005bb4 <HAL_FLASH_OperationErrorCallback>
 8005aa2:	e017      	b.n	8005ad4 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8005aa4:	7afb      	ldrb	r3, [r7, #11]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d105      	bne.n	8005ab6 <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8005aaa:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f880 	bl	8005bb4 <HAL_FLASH_OperationErrorCallback>
 8005ab4:	e00e      	b.n	8005ad4 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d002      	beq.n	8005ac2 <HAL_FLASH_IRQHandler+0xbe>
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d105      	bne.n	8005ace <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8005ac2:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f874 	bl	8005bb4 <HAL_FLASH_OperationErrorCallback>
 8005acc:	e002      	b.n	8005ad4 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8005ace:	2000      	movs	r0, #0
 8005ad0:	f000 f870 	bl	8005bb4 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005ad4:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8005ada:	4b34      	ldr	r3, [pc, #208]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04f      	beq.n	8005b86 <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ae6:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8005aec:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005aee:	7a1b      	ldrb	r3, [r3, #8]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d12b      	bne.n	8005b4e <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8005af6:	4b2e      	ldr	r3, [pc, #184]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005afe:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8005b00:	4b2b      	ldr	r3, [pc, #172]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d013      	beq.n	8005b30 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8005b08:	4b29      	ldr	r3, [pc, #164]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fd fd75 	bl	80035fc <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8005b12:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	3301      	adds	r3, #1
 8005b18:	4a25      	ldr	r2, [pc, #148]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b1a:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fb5b 	bl	80061e4 <FLASH_PageErase>
 8005b2e:	e02a      	b.n	8005b86 <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8005b30:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005b3e:	f000 fb87 	bl	8006250 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8005b42:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fd fd58 	bl	80035fc <HAL_FLASH_EndOfOperationCallback>
 8005b4c:	e01b      	b.n	8005b86 <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8005b4e:	f000 fb7f 	bl	8006250 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b54:	7a1b      	ldrb	r3, [r3, #8]
 8005b56:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d105      	bne.n	8005b6a <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005b5e:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd fd4a 	bl	80035fc <HAL_FLASH_EndOfOperationCallback>
 8005b68:	e00a      	b.n	8005b80 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8005b6a:	7afb      	ldrb	r3, [r7, #11]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d002      	beq.n	8005b76 <HAL_FLASH_IRQHandler+0x172>
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d104      	bne.n	8005b80 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd fd3e 	bl	80035fc <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b88:	7a1b      	ldrb	r3, [r3, #8]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	4a05      	ldr	r2, [pc, #20]	; (8005bac <HAL_FLASH_IRQHandler+0x1a8>)
 8005b96:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005b9a:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <HAL_FLASH_IRQHandler+0x1ac>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40022000 	.word	0x40022000
 8005bb0:	20000010 	.word	0x20000010

08005bb4 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_FLASH_Unlock+0x38>)
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da0b      	bge.n	8005bf2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_FLASH_Unlock+0x38>)
 8005bdc:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <HAL_FLASH_Unlock+0x3c>)
 8005bde:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <HAL_FLASH_Unlock+0x38>)
 8005be2:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <HAL_FLASH_Unlock+0x40>)
 8005be4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_FLASH_Unlock+0x38>)
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da01      	bge.n	8005bf2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	40022000 	.word	0x40022000
 8005c04:	45670123 	.word	0x45670123
 8005c08:	cdef89ab 	.word	0xcdef89ab

08005c0c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_FLASH_Lock+0x1c>)
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <HAL_FLASH_Lock+0x1c>)
 8005c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c1a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40022000 	.word	0x40022000

08005c2c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_FLASH_OB_Unlock+0x2c>)
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005c3c:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <HAL_FLASH_OB_Unlock+0x2c>)
 8005c3e:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <HAL_FLASH_OB_Unlock+0x30>)
 8005c40:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_FLASH_OB_Unlock+0x2c>)
 8005c44:	4a06      	ldr	r2, [pc, #24]	; (8005c60 <HAL_FLASH_OB_Unlock+0x34>)
 8005c46:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40022000 	.word	0x40022000
 8005c5c:	08192a3b 	.word	0x08192a3b
 8005c60:	4c5d6e7f 	.word	0x4c5d6e7f

08005c64 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_FLASH_OB_Lock+0x1c>)
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <HAL_FLASH_OB_Lock+0x1c>)
 8005c6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c72:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	40022000 	.word	0x40022000

08005c84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005c8c:	f7fe f8b0 	bl	8003df0 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005c92:	e00d      	b.n	8005cb0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d009      	beq.n	8005cb0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005c9c:	f7fe f8a8 	bl	8003df0 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d801      	bhi.n	8005cb0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e037      	b.n	8005d20 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <FLASH_WaitForLastOperation+0xa4>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1eb      	bne.n	8005c94 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <FLASH_WaitForLastOperation+0xa4>)
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01e      	beq.n	8005d0c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005cce:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <FLASH_WaitForLastOperation+0xa8>)
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <FLASH_WaitForLastOperation+0xa8>)
 8005cd8:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <FLASH_WaitForLastOperation+0x70>
 8005ce4:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <FLASH_WaitForLastOperation+0xa4>)
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005cee:	490e      	ldr	r1, [pc, #56]	; (8005d28 <FLASH_WaitForLastOperation+0xa4>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	618b      	str	r3, [r1, #24]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <FLASH_WaitForLastOperation+0x84>
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <FLASH_WaitForLastOperation+0xa4>)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d06:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e009      	b.n	8005d20 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <FLASH_WaitForLastOperation+0xa4>)
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <FLASH_WaitForLastOperation+0xa4>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40022000 	.word	0x40022000
 8005d2c:	20000010 	.word	0x20000010

08005d30 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <FLASH_Program_DoubleWord+0x48>)
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	4a0d      	ldr	r2, [pc, #52]	; (8005d78 <FLASH_Program_DoubleWord+0x48>)
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005d4e:	f3bf 8f6f 	isb	sy
}
 8005d52:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005d54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	000a      	movs	r2, r1
 8005d62:	2300      	movs	r3, #0
 8005d64:	68f9      	ldr	r1, [r7, #12]
 8005d66:	3104      	adds	r1, #4
 8005d68:	4613      	mov	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40022000 	.word	0x40022000

08005d7c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005d86:	2340      	movs	r3, #64	; 0x40
 8005d88:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <FLASH_Program_Fast+0x68>)
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <FLASH_Program_Fast+0x68>)
 8005d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d9c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005da2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005da4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005da8:	b672      	cpsid	i
}
 8005daa:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	3304      	adds	r3, #4
 8005db8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	617b      	str	r3, [r7, #20]
    row_index--;
 8005dc0:	7ffb      	ldrb	r3, [r7, #31]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005dc6:	7ffb      	ldrb	r3, [r7, #31]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ef      	bne.n	8005dac <FLASH_Program_Fast+0x30>
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f383 8810 	msr	PRIMASK, r3
}
 8005dd6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005dd8:	bf00      	nop
 8005dda:	3724      	adds	r7, #36	; 0x24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	40022000 	.word	0x40022000

08005de8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005df2:	4b4c      	ldr	r3, [pc, #304]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_FLASHEx_Erase+0x16>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e08d      	b.n	8005f1a <HAL_FLASHEx_Erase+0x132>
 8005dfe:	4b49      	ldr	r3, [pc, #292]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e08:	f7ff ff3c 	bl	8005c84 <FLASH_WaitForLastOperation>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d17d      	bne.n	8005f12 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e16:	4b43      	ldr	r3, [pc, #268]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005e1c:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d019      	beq.n	8005e5c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e28:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3e      	ldr	r2, [pc, #248]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e32:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e34:	4b3c      	ldr	r3, [pc, #240]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e40:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a38      	ldr	r2, [pc, #224]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e4a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005e4c:	4b35      	ldr	r3, [pc, #212]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005e4e:	2203      	movs	r2, #3
 8005e50:	771a      	strb	r2, [r3, #28]
 8005e52:	e016      	b.n	8005e82 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005e54:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	771a      	strb	r2, [r3, #28]
 8005e5a:	e012      	b.n	8005e82 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e5c:	4b32      	ldr	r3, [pc, #200]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e68:	4b2f      	ldr	r3, [pc, #188]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2e      	ldr	r2, [pc, #184]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e72:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005e74:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005e76:	2202      	movs	r2, #2
 8005e78:	771a      	strb	r2, [r3, #28]
 8005e7a:	e002      	b.n	8005e82 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005e7c:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d113      	bne.n	8005eb2 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f980 	bl	8006194 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e98:	f7ff fef4 	bl	8005c84 <FLASH_WaitForLastOperation>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005ea0:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005ea6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eaa:	f023 0304 	bic.w	r3, r3, #4
 8005eae:	6153      	str	r3, [r2, #20]
 8005eb0:	e02d      	b.n	8005f0e <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	e01d      	b.n	8005efe <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68b8      	ldr	r0, [r7, #8]
 8005eca:	f000 f98b 	bl	80061e4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ece:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ed2:	f7ff fed7 	bl	8005c84 <FLASH_WaitForLastOperation>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005eda:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <HAL_FLASHEx_Erase+0x140>)
 8005ee0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ee4:	f023 0302 	bic.w	r3, r3, #2
 8005ee8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	601a      	str	r2, [r3, #0]
          break;
 8005ef6:	e00a      	b.n	8005f0e <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d3d9      	bcc.n	8005ec2 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005f0e:	f000 f99f 	bl	8006250 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f12:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <HAL_FLASHEx_Erase+0x13c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]

  return status;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000010 	.word	0x20000010
 8005f28:	40022000 	.word	0x40022000

08005f2c <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f38:	4b36      	ldr	r3, [pc, #216]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_FLASHEx_Erase_IT+0x18>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e063      	b.n	800600c <HAL_FLASHEx_Erase_IT+0xe0>
 8005f44:	4b33      	ldr	r3, [pc, #204]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f4a:	4b32      	ldr	r3, [pc, #200]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]

  /* Deactivate the cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005f50:	4b31      	ldr	r3, [pc, #196]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d019      	beq.n	8005f90 <HAL_FLASHEx_Erase_IT+0x64>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005f5c:	4b2e      	ldr	r3, [pc, #184]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a2d      	ldr	r2, [pc, #180]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f66:	6013      	str	r3, [r2, #0]

    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f68:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <HAL_FLASHEx_Erase_IT+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f74:	4b28      	ldr	r3, [pc, #160]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a27      	ldr	r2, [pc, #156]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005f80:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005f82:	2203      	movs	r2, #3
 8005f84:	771a      	strb	r2, [r3, #28]
 8005f86:	e016      	b.n	8005fb6 <HAL_FLASHEx_Erase_IT+0x8a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005f88:	4b22      	ldr	r3, [pc, #136]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	771a      	strb	r2, [r3, #28]
 8005f8e:	e012      	b.n	8005fb6 <HAL_FLASHEx_Erase_IT+0x8a>
    }
  }
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f90:	4b21      	ldr	r3, [pc, #132]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d009      	beq.n	8005fb0 <HAL_FLASHEx_Erase_IT+0x84>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fa6:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005fa8:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005faa:	2202      	movs	r2, #2
 8005fac:	771a      	strb	r2, [r3, #28]
 8005fae:	e002      	b.n	8005fb6 <HAL_FLASHEx_Erase_IT+0x8a>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005fb0:	4b18      	ldr	r3, [pc, #96]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	771a      	strb	r2, [r3, #28]
  }

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005fb6:	4b18      	ldr	r3, [pc, #96]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4a17      	ldr	r2, [pc, #92]	; (8006018 <HAL_FLASHEx_Erase_IT+0xec>)
 8005fbc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8005fc0:	6153      	str	r3, [r2, #20]

  pFlash.Bank = pEraseInit->Banks;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4a13      	ldr	r2, [pc, #76]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005fc8:	6113      	str	r3, [r2, #16]

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d108      	bne.n	8005fe4 <HAL_FLASHEx_Erase_IT+0xb8>
  {
    /* Mass erase to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 f8d9 	bl	8006194 <FLASH_MassErase>
 8005fe2:	e012      	b.n	800600a <HAL_FLASHEx_Erase_IT+0xde>
  }
  else
  {
    /* Erase by page to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005ff0:	6193      	str	r3, [r2, #24]
    pFlash.Page = pEraseInit->Page;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	4a07      	ldr	r2, [pc, #28]	; (8006014 <HAL_FLASHEx_Erase_IT+0xe8>)
 8005ff8:	6153      	str	r3, [r2, #20]

    /*Erase 1st page and wait for IT */
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f000 f8ed 	bl	80061e4 <FLASH_PageErase>
  }

  return status;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000010 	.word	0x20000010
 8006018:	40022000 	.word	0x40022000

0800601c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006028:	4b32      	ldr	r3, [pc, #200]	; (80060f4 <HAL_FLASHEx_OBProgram+0xd8>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_FLASHEx_OBProgram+0x18>
 8006030:	2302      	movs	r3, #2
 8006032:	e05a      	b.n	80060ea <HAL_FLASHEx_OBProgram+0xce>
 8006034:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_FLASHEx_OBProgram+0xd8>)
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800603a:	4b2e      	ldr	r3, [pc, #184]	; (80060f4 <HAL_FLASHEx_OBProgram+0xd8>)
 800603c:	2200      	movs	r2, #0
 800603e:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00d      	beq.n	8006068 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6858      	ldr	r0, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6899      	ldr	r1, [r3, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	461a      	mov	r2, r3
 800605a:	f000 f93d 	bl	80062d8 <FLASH_OB_WRPConfig>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 f991 	bl	80063a0 <FLASH_OB_RDPConfig>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00c      	beq.n	80060ae <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f000 f9ac 	bl	80063fc <FLASH_OB_UserConfig>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d013      	beq.n	80060e2 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d00d      	beq.n	80060e2 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69d8      	ldr	r0, [r3, #28]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a19      	ldr	r1, [r3, #32]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 faa8 	bl	8006628 <FLASH_OB_PCROPConfig>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <HAL_FLASHEx_OBProgram+0xd8>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]

  return status;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000010 	.word	0x20000010

080060f8 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2206      	movs	r2, #6
 8006104:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_FLASHEx_OBGetConfig+0x2e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d007      	beq.n	8006126 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800611a:	2b02      	cmp	r3, #2
 800611c:	d003      	beq.n	8006126 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b04      	cmp	r3, #4
 8006124:	d10f      	bne.n	8006146 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f043 0201 	orr.w	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6858      	ldr	r0, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f103 0108 	add.w	r1, r3, #8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	330c      	adds	r3, #12
 8006140:	461a      	mov	r2, r3
 8006142:	f000 fb1d 	bl	8006780 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8006146:	f000 fb65 	bl	8006814 <FLASH_OB_GetRDP>
 800614a:	4602      	mov	r2, r0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8006150:	f000 fb7a 	bl	8006848 <FLASH_OB_GetUser>
 8006154:	4602      	mov	r2, r0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d003      	beq.n	800616a <HAL_FLASHEx_OBGetConfig+0x72>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d110      	bne.n	800618c <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f043 0208 	orr.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f103 001c 	add.w	r0, r3, #28
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f103 0120 	add.w	r1, r3, #32
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3324      	adds	r3, #36	; 0x24
 8006186:	461a      	mov	r2, r3
 8006188:	f000 fb72 	bl	8006870 <FLASH_OB_GetPCROP>
  }
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <FLASH_MassErase+0x4c>)
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <FLASH_MassErase+0x4c>)
 80061ac:	f043 0304 	orr.w	r3, r3, #4
 80061b0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <FLASH_MassErase+0x4c>)
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <FLASH_MassErase+0x4c>)
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <FLASH_MassErase+0x4c>)
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	4a04      	ldr	r2, [pc, #16]	; (80061e0 <FLASH_MassErase+0x4c>)
 80061ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d2:	6153      	str	r3, [r2, #20]
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40022000 	.word	0x40022000

080061e4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d006      	beq.n	8006206 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80061f8:	4b14      	ldr	r3, [pc, #80]	; (800624c <FLASH_PageErase+0x68>)
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <FLASH_PageErase+0x68>)
 80061fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006202:	6153      	str	r3, [r2, #20]
 8006204:	e005      	b.n	8006212 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006206:	4b11      	ldr	r3, [pc, #68]	; (800624c <FLASH_PageErase+0x68>)
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	4a10      	ldr	r2, [pc, #64]	; (800624c <FLASH_PageErase+0x68>)
 800620c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006210:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006212:	4b0e      	ldr	r3, [pc, #56]	; (800624c <FLASH_PageErase+0x68>)
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006222:	490a      	ldr	r1, [pc, #40]	; (800624c <FLASH_PageErase+0x68>)
 8006224:	4313      	orrs	r3, r2
 8006226:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006228:	4b08      	ldr	r3, [pc, #32]	; (800624c <FLASH_PageErase+0x68>)
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	4a07      	ldr	r2, [pc, #28]	; (800624c <FLASH_PageErase+0x68>)
 800622e:	f043 0302 	orr.w	r3, r3, #2
 8006232:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <FLASH_PageErase+0x68>)
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	4a04      	ldr	r2, [pc, #16]	; (800624c <FLASH_PageErase+0x68>)
 800623a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623e:	6153      	str	r3, [r2, #20]
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40022000 	.word	0x40022000

08006250 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006256:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <FLASH_FlushCaches+0x80>)
 8006258:	7f1b      	ldrb	r3, [r3, #28]
 800625a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d002      	beq.n	8006268 <FLASH_FlushCaches+0x18>
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d111      	bne.n	800628c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800626e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a16      	ldr	r2, [pc, #88]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800627a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800627e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006280:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <FLASH_FlushCaches+0x84>)
 8006286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800628a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d002      	beq.n	8006298 <FLASH_FlushCaches+0x48>
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d111      	bne.n	80062bc <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006298:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0d      	ldr	r2, [pc, #52]	; (80062d4 <FLASH_FlushCaches+0x84>)
 800629e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <FLASH_FlushCaches+0x84>)
 80062b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ba:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <FLASH_FlushCaches+0x80>)
 80062be:	2200      	movs	r2, #0
 80062c0:	771a      	strb	r2, [r3, #28]
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20000010 	.word	0x20000010
 80062d4:	40022000 	.word	0x40022000

080062d8 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062e8:	f7ff fccc 	bl	8005c84 <FLASH_WaitForLastOperation>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d14c      	bne.n	8006390 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10b      	bne.n	8006314 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 80062fc:	4b27      	ldr	r3, [pc, #156]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0419      	lsls	r1, r3, #16
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	430b      	orrs	r3, r1
 800630c:	4923      	ldr	r1, [pc, #140]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 800630e:	4313      	orrs	r3, r2
 8006310:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006312:	e02b      	b.n	800636c <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d10b      	bne.n	8006332 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800631a:	4b20      	ldr	r3, [pc, #128]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0419      	lsls	r1, r3, #16
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	430b      	orrs	r3, r1
 800632a:	491c      	ldr	r1, [pc, #112]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 800632c:	4313      	orrs	r3, r2
 800632e:	630b      	str	r3, [r1, #48]	; 0x30
 8006330:	e01c      	b.n	800636c <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d10b      	bne.n	8006350 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 8006338:	4b18      	ldr	r3, [pc, #96]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 800633a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633c:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0419      	lsls	r1, r3, #16
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	430b      	orrs	r3, r1
 8006348:	4914      	ldr	r1, [pc, #80]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 800634a:	4313      	orrs	r3, r2
 800634c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800634e:	e00d      	b.n	800636c <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d10a      	bne.n	800636c <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 8006358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	0419      	lsls	r1, r3, #16
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	430b      	orrs	r3, r1
 8006366:	490d      	ldr	r1, [pc, #52]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 8006368:	4313      	orrs	r3, r2
 800636a:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 8006372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006376:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006378:	f24c 3050 	movw	r0, #50000	; 0xc350
 800637c:	f7ff fc82 	bl	8005c84 <FLASH_WaitForLastOperation>
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	4a04      	ldr	r2, [pc, #16]	; (800639c <FLASH_OB_WRPConfig+0xc4>)
 800638a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800638e:	6153      	str	r3, [r2, #20]
  }

  return status;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40022000 	.word	0x40022000

080063a0 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063ac:	f7ff fc6a 	bl	8005c84 <FLASH_WaitForLastOperation>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d119      	bne.n	80063ee <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80063ba:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <FLASH_OB_RDPConfig+0x58>)
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063c2:	490d      	ldr	r1, [pc, #52]	; (80063f8 <FLASH_OB_RDPConfig+0x58>)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <FLASH_OB_RDPConfig+0x58>)
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	4a0a      	ldr	r2, [pc, #40]	; (80063f8 <FLASH_OB_RDPConfig+0x58>)
 80063d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063d4:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063da:	f7ff fc53 	bl	8005c84 <FLASH_WaitForLastOperation>
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <FLASH_OB_RDPConfig+0x58>)
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <FLASH_OB_RDPConfig+0x58>)
 80063e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063ec:	6153      	str	r3, [r2, #20]
  }

  return status;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40022000 	.word	0x40022000

080063fc <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800640e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006412:	f7ff fc37 	bl	8005c84 <FLASH_WaitForLastOperation>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 80fc 	bne.w	800661a <FLASH_OB_UserConfig+0x21e>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800643e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800645c:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800647a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006498:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006510:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006518:	2b00      	cmp	r3, #0
 800651a:	d009      	beq.n	8006530 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800654c:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800656a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006588:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065a6:	613b      	str	r3, [r7, #16]
#if defined (STM32L412xx) || defined (STM32L422xx) || defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || \
    defined (STM32L442xx) || defined (STM32L443xx) || defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_nSWBOOT0) != 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <FLASH_OB_UserConfig+0x1ca>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065c4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nBOOT0) != 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <FLASH_OB_UserConfig+0x1e8>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065e2:	613b      	str	r3, [r7, #16]
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <FLASH_OB_UserConfig+0x228>)
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	401a      	ands	r2, r3
 80065ee:	490d      	ldr	r1, [pc, #52]	; (8006624 <FLASH_OB_UserConfig+0x228>)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <FLASH_OB_UserConfig+0x228>)
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <FLASH_OB_UserConfig+0x228>)
 80065fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006600:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006602:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006606:	f7ff fb3d 	bl	8005c84 <FLASH_WaitForLastOperation>
 800660a:	4603      	mov	r3, r0
 800660c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <FLASH_OB_UserConfig+0x228>)
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4a04      	ldr	r2, [pc, #16]	; (8006624 <FLASH_OB_UserConfig+0x228>)
 8006614:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006618:	6153      	str	r3, [r2, #20]
  }

  return status;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40022000 	.word	0x40022000

08006628 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006634:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006638:	f7ff fb24 	bl	8005c84 <FLASH_WaitForLastOperation>
 800663c:	4603      	mov	r3, r0
 800663e:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 8006640:	7ffb      	ldrb	r3, [r7, #31]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 808c 	bne.w	8006760 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8006648:	4b48      	ldr	r3, [pc, #288]	; (800676c <FLASH_OB_PCROPConfig+0x144>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d115      	bne.n	8006680 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 8006654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006658:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800665a:	4b45      	ldr	r3, [pc, #276]	; (8006770 <FLASH_OB_PCROPConfig+0x148>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006664:	4293      	cmp	r3, r2
 8006666:	d008      	beq.n	800667a <FLASH_OB_PCROPConfig+0x52>
 8006668:	4b41      	ldr	r3, [pc, #260]	; (8006770 <FLASH_OB_PCROPConfig+0x148>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	029b      	lsls	r3, r3, #10
 800666e:	085a      	lsrs	r2, r3, #1
 8006670:	4b40      	ldr	r3, [pc, #256]	; (8006774 <FLASH_OB_PCROPConfig+0x14c>)
 8006672:	4013      	ands	r3, r2
 8006674:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006678:	e000      	b.n	800667c <FLASH_OB_PCROPConfig+0x54>
 800667a:	4b3f      	ldr	r3, [pc, #252]	; (8006778 <FLASH_OB_PCROPConfig+0x150>)
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e014      	b.n	80066aa <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8006680:	4b3b      	ldr	r3, [pc, #236]	; (8006770 <FLASH_OB_PCROPConfig+0x148>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800668a:	4293      	cmp	r3, r2
 800668c:	d008      	beq.n	80066a0 <FLASH_OB_PCROPConfig+0x78>
 800668e:	4b38      	ldr	r3, [pc, #224]	; (8006770 <FLASH_OB_PCROPConfig+0x148>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	085a      	lsrs	r2, r3, #1
 8006696:	4b37      	ldr	r3, [pc, #220]	; (8006774 <FLASH_OB_PCROPConfig+0x14c>)
 8006698:	4013      	ands	r3, r2
 800669a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800669e:	e000      	b.n	80066a2 <FLASH_OB_PCROPConfig+0x7a>
 80066a0:	4b35      	ldr	r3, [pc, #212]	; (8006778 <FLASH_OB_PCROPConfig+0x150>)
 80066a2:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 80066a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066a8:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d11a      	bne.n	80066ea <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	08db      	lsrs	r3, r3, #3
 80066bc:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80066be:	4b2f      	ldr	r3, [pc, #188]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	492d      	ldr	r1, [pc, #180]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	08db      	lsrs	r3, r3, #3
 80066d6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80066d8:	4b28      	ldr	r3, [pc, #160]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	4926      	ldr	r1, [pc, #152]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	628b      	str	r3, [r1, #40]	; 0x28
 80066e8:	e01e      	b.n	8006728 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d119      	bne.n	8006728 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80066fe:	4b1f      	ldr	r3, [pc, #124]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	491d      	ldr	r1, [pc, #116]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8006718:	4b18      	ldr	r3, [pc, #96]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 800671a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	4916      	ldr	r1, [pc, #88]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006736:	4911      	ldr	r1, [pc, #68]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 8006738:	4313      	orrs	r3, r2
 800673a:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800673c:	4b0f      	ldr	r3, [pc, #60]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	4a0e      	ldr	r2, [pc, #56]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 8006742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006746:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006748:	f24c 3050 	movw	r0, #50000	; 0xc350
 800674c:	f7ff fa9a 	bl	8005c84 <FLASH_WaitForLastOperation>
 8006750:	4603      	mov	r3, r0
 8006752:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006754:	4b09      	ldr	r3, [pc, #36]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	4a08      	ldr	r2, [pc, #32]	; (800677c <FLASH_OB_PCROPConfig+0x154>)
 800675a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800675e:	6153      	str	r3, [r2, #20]
  }

  return status;
 8006760:	7ffb      	ldrb	r3, [r7, #31]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	1fff75e0 	.word	0x1fff75e0
 8006774:	01fffe00 	.word	0x01fffe00
 8006778:	08080000 	.word	0x08080000
 800677c:	40022000 	.word	0x40022000

08006780 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10b      	bne.n	80067aa <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8006792:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	b2da      	uxtb	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 80067a8:	e02b      	b.n	8006802 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d10b      	bne.n	80067c8 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 80067ba:	4b15      	ldr	r3, [pc, #84]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	0c1b      	lsrs	r3, r3, #16
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	e01c      	b.n	8006802 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d10b      	bne.n	80067e6 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 80067ce:	4b10      	ldr	r3, [pc, #64]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 80067d8:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 80067da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	e00d      	b.n	8006802 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d10a      	bne.n	8006802 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 80067ec:	4b08      	ldr	r3, [pc, #32]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <FLASH_OB_GetWRP+0x90>)
 80067f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fa:	0c1b      	lsrs	r3, r3, #16
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40022000 	.word	0x40022000

08006814 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <FLASH_OB_GetRDP+0x30>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2baa      	cmp	r3, #170	; 0xaa
 8006826:	d004      	beq.n	8006832 <FLASH_OB_GetRDP+0x1e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2bcc      	cmp	r3, #204	; 0xcc
 800682c:	d001      	beq.n	8006832 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800682e:	23bb      	movs	r3, #187	; 0xbb
 8006830:	e002      	b.n	8006838 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8006832:	4b04      	ldr	r3, [pc, #16]	; (8006844 <FLASH_OB_GetRDP+0x30>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	b2db      	uxtb	r3, r3
  }
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40022000 	.word	0x40022000

08006848 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800684e:	4b07      	ldr	r3, [pc, #28]	; (800686c <FLASH_OB_GetUser+0x24>)
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800685a:	607b      	str	r3, [r7, #4]

  return user_config;
 800685c:	687b      	ldr	r3, [r7, #4]
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40022000 	.word	0x40022000

08006870 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8006870:	b480      	push	{r7}
 8006872:	b089      	sub	sp, #36	; 0x24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800687c:	4b3b      	ldr	r3, [pc, #236]	; (800696c <FLASH_OB_GetPCROP+0xfc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d115      	bne.n	80068b4 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 8006888:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800688c:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800688e:	4b38      	ldr	r3, [pc, #224]	; (8006970 <FLASH_OB_GetPCROP+0x100>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006898:	4293      	cmp	r3, r2
 800689a:	d008      	beq.n	80068ae <FLASH_OB_GetPCROP+0x3e>
 800689c:	4b34      	ldr	r3, [pc, #208]	; (8006970 <FLASH_OB_GetPCROP+0x100>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	085a      	lsrs	r2, r3, #1
 80068a4:	4b33      	ldr	r3, [pc, #204]	; (8006974 <FLASH_OB_GetPCROP+0x104>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80068ac:	e000      	b.n	80068b0 <FLASH_OB_GetPCROP+0x40>
 80068ae:	4b32      	ldr	r3, [pc, #200]	; (8006978 <FLASH_OB_GetPCROP+0x108>)
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	e014      	b.n	80068de <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80068b4:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <FLASH_OB_GetPCROP+0x100>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068be:	4293      	cmp	r3, r2
 80068c0:	d008      	beq.n	80068d4 <FLASH_OB_GetPCROP+0x64>
 80068c2:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <FLASH_OB_GetPCROP+0x100>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	029b      	lsls	r3, r3, #10
 80068c8:	085a      	lsrs	r2, r3, #1
 80068ca:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <FLASH_OB_GetPCROP+0x104>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80068d2:	e000      	b.n	80068d6 <FLASH_OB_GetPCROP+0x66>
 80068d4:	4b28      	ldr	r3, [pc, #160]	; (8006978 <FLASH_OB_GetPCROP+0x108>)
 80068d6:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 80068d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068dc:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d115      	bne.n	8006916 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <FLASH_OB_GetPCROP+0x10c>)
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	00da      	lsls	r2, r3, #3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	441a      	add	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80068fe:	4b1f      	ldr	r3, [pc, #124]	; (800697c <FLASH_OB_GetPCROP+0x10c>)
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	b29b      	uxth	r3, r3
 8006904:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	00da      	lsls	r2, r3, #3
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	1dda      	adds	r2, r3, #7
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e01a      	b.n	800694c <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d114      	bne.n	800694c <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8006922:	4b16      	ldr	r3, [pc, #88]	; (800697c <FLASH_OB_GetPCROP+0x10c>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	b29b      	uxth	r3, r3
 8006928:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	00da      	lsls	r2, r3, #3
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	441a      	add	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <FLASH_OB_GetPCROP+0x10c>)
 8006938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693a:	b29b      	uxth	r3, r3
 800693c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	00da      	lsls	r2, r3, #3
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	4413      	add	r3, r2
 8006946:	1dda      	adds	r2, r3, #7
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800694c:	4b0b      	ldr	r3, [pc, #44]	; (800697c <FLASH_OB_GetPCROP+0x10c>)
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	601a      	str	r2, [r3, #0]
}
 800695e:	bf00      	nop
 8006960:	3724      	adds	r7, #36	; 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40010000 	.word	0x40010000
 8006970:	1fff75e0 	.word	0x1fff75e0
 8006974:	01fffe00 	.word	0x01fffe00
 8006978:	08080000 	.word	0x08080000
 800697c:	40022000 	.word	0x40022000

08006980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800698e:	e166      	b.n	8006c5e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	2101      	movs	r1, #1
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	4013      	ands	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8158 	beq.w	8006c58 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d00b      	beq.n	80069c8 <HAL_GPIO_Init+0x48>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d007      	beq.n	80069c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069bc:	2b11      	cmp	r3, #17
 80069be:	d003      	beq.n	80069c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b12      	cmp	r3, #18
 80069c6:	d130      	bne.n	8006a2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	2203      	movs	r2, #3
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	43db      	mvns	r3, r3
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4013      	ands	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069fe:	2201      	movs	r2, #1
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	43db      	mvns	r3, r3
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	091b      	lsrs	r3, r3, #4
 8006a14:	f003 0201 	and.w	r2, r3, #1
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	2203      	movs	r2, #3
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d003      	beq.n	8006a6a <HAL_GPIO_Init+0xea>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b12      	cmp	r3, #18
 8006a68:	d123      	bne.n	8006ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	08da      	lsrs	r2, r3, #3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3208      	adds	r2, #8
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	220f      	movs	r2, #15
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	08da      	lsrs	r2, r3, #3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3208      	adds	r2, #8
 8006aac:	6939      	ldr	r1, [r7, #16]
 8006aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	2203      	movs	r2, #3
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f003 0203 	and.w	r2, r3, #3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80b2 	beq.w	8006c58 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006af4:	4b61      	ldr	r3, [pc, #388]	; (8006c7c <HAL_GPIO_Init+0x2fc>)
 8006af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af8:	4a60      	ldr	r2, [pc, #384]	; (8006c7c <HAL_GPIO_Init+0x2fc>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6613      	str	r3, [r2, #96]	; 0x60
 8006b00:	4b5e      	ldr	r3, [pc, #376]	; (8006c7c <HAL_GPIO_Init+0x2fc>)
 8006b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006b0c:	4a5c      	ldr	r2, [pc, #368]	; (8006c80 <HAL_GPIO_Init+0x300>)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	089b      	lsrs	r3, r3, #2
 8006b12:	3302      	adds	r3, #2
 8006b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	220f      	movs	r2, #15
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b36:	d02b      	beq.n	8006b90 <HAL_GPIO_Init+0x210>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a52      	ldr	r2, [pc, #328]	; (8006c84 <HAL_GPIO_Init+0x304>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d025      	beq.n	8006b8c <HAL_GPIO_Init+0x20c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a51      	ldr	r2, [pc, #324]	; (8006c88 <HAL_GPIO_Init+0x308>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01f      	beq.n	8006b88 <HAL_GPIO_Init+0x208>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a50      	ldr	r2, [pc, #320]	; (8006c8c <HAL_GPIO_Init+0x30c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d019      	beq.n	8006b84 <HAL_GPIO_Init+0x204>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a4f      	ldr	r2, [pc, #316]	; (8006c90 <HAL_GPIO_Init+0x310>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_GPIO_Init+0x200>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a4e      	ldr	r2, [pc, #312]	; (8006c94 <HAL_GPIO_Init+0x314>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00d      	beq.n	8006b7c <HAL_GPIO_Init+0x1fc>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a4d      	ldr	r2, [pc, #308]	; (8006c98 <HAL_GPIO_Init+0x318>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <HAL_GPIO_Init+0x1f8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a4c      	ldr	r2, [pc, #304]	; (8006c9c <HAL_GPIO_Init+0x31c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d101      	bne.n	8006b74 <HAL_GPIO_Init+0x1f4>
 8006b70:	2307      	movs	r3, #7
 8006b72:	e00e      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b74:	2308      	movs	r3, #8
 8006b76:	e00c      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b78:	2306      	movs	r3, #6
 8006b7a:	e00a      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b7c:	2305      	movs	r3, #5
 8006b7e:	e008      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b80:	2304      	movs	r3, #4
 8006b82:	e006      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b84:	2303      	movs	r3, #3
 8006b86:	e004      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e002      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <HAL_GPIO_Init+0x212>
 8006b90:	2300      	movs	r3, #0
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	f002 0203 	and.w	r2, r2, #3
 8006b98:	0092      	lsls	r2, r2, #2
 8006b9a:	4093      	lsls	r3, r2
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006ba2:	4937      	ldr	r1, [pc, #220]	; (8006c80 <HAL_GPIO_Init+0x300>)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	3302      	adds	r3, #2
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bd4:	4a32      	ldr	r2, [pc, #200]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006bda:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	43db      	mvns	r3, r3
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4013      	ands	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006bfe:	4a28      	ldr	r2, [pc, #160]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c04:	4b26      	ldr	r3, [pc, #152]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4013      	ands	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c28:	4a1d      	ldr	r2, [pc, #116]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	43db      	mvns	r3, r3
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c52:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <HAL_GPIO_Init+0x320>)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f47f ae91 	bne.w	8006990 <HAL_GPIO_Init+0x10>
  }
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40010000 	.word	0x40010000
 8006c84:	48000400 	.word	0x48000400
 8006c88:	48000800 	.word	0x48000800
 8006c8c:	48000c00 	.word	0x48000c00
 8006c90:	48001000 	.word	0x48001000
 8006c94:	48001400 	.word	0x48001400
 8006c98:	48001800 	.word	0x48001800
 8006c9c:	48001c00 	.word	0x48001c00
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	887b      	ldrh	r3, [r7, #2]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
 8006cc0:	e001      	b.n	8006cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ce4:	787b      	ldrb	r3, [r7, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006cea:	887a      	ldrh	r2, [r7, #2]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006cf0:	e002      	b.n	8006cf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cf2:	887a      	ldrh	r2, [r7, #2]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e038      	b.n	8006d88 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f245 5255 	movw	r2, #21845	; 0x5555
 8006d28:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6852      	ldr	r2, [r2, #4]
 8006d32:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6892      	ldr	r2, [r2, #8]
 8006d3c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006d3e:	f7fd f857 	bl	8003df0 <HAL_GetTick>
 8006d42:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8006d44:	e008      	b.n	8006d58 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006d46:	f7fd f853 	bl	8003df0 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b30      	cmp	r3, #48	; 0x30
 8006d52:	d901      	bls.n	8006d58 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e017      	b.n	8006d88 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f1      	bne.n	8006d46 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d005      	beq.n	8006d7c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	68d2      	ldr	r2, [r2, #12]
 8006d78:	611a      	str	r2, [r3, #16]
 8006d7a:	e004      	b.n	8006d86 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006da0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006db8:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <HAL_PWR_ConfigPVD+0xb8>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f023 020e 	bic.w	r2, r3, #14
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4928      	ldr	r1, [pc, #160]	; (8006e68 <HAL_PWR_ConfigPVD+0xb8>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8006dca:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8006dd6:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006de2:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dec:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006dee:	4b1f      	ldr	r3, [pc, #124]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df8:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8006e06:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006e1e:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	4a12      	ldr	r2, [pc, #72]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e28:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e40:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006e4e:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	4a06      	ldr	r2, [pc, #24]	; (8006e6c <HAL_PWR_ConfigPVD+0xbc>)
 8006e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e58:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	40010400 	.word	0x40010400

08006e70 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_PWR_EnablePVD+0x1c>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <HAL_PWR_EnablePVD+0x1c>)
 8006e7a:	f043 0301 	orr.w	r3, r3, #1
 8006e7e:	6053      	str	r3, [r2, #4]
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40007000 	.word	0x40007000

08006e90 <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_PWR_DisablePVD+0x1c>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a04      	ldr	r2, [pc, #16]	; (8006eac <HAL_PWR_DisablePVD+0x1c>)
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	6053      	str	r3, [r2, #4]
}
 8006ea0:	bf00      	nop
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40007000 	.word	0x40007000

08006eb0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	401a      	ands	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	4908      	ldr	r1, [pc, #32]	; (8006eec <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	4904      	ldr	r1, [pc, #16]	; (8006eec <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	608b      	str	r3, [r1, #8]


}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	40007000 	.word	0x40007000

08006ef0 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <HAL_PWR_DisableWakeUpPin+0x28>)
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	43db      	mvns	r3, r3
 8006f04:	4904      	ldr	r1, [pc, #16]	; (8006f18 <HAL_PWR_DisableWakeUpPin+0x28>)
 8006f06:	4013      	ands	r3, r2
 8006f08:	608b      	str	r3, [r1, #8]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40007000 	.word	0x40007000

08006f1c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8006f20:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f023 0307 	bic.w	r3, r3, #7
 8006f28:	4a07      	ldr	r2, [pc, #28]	; (8006f48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006f2a:	f043 0303 	orr.w	r3, r3, #3
 8006f2e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006f30:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	4a05      	ldr	r2, [pc, #20]	; (8006f4c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8006f36:	f043 0304 	orr.w	r3, r3, #4
 8006f3a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006f3c:	bf30      	wfi
}
 8006f3e:	bf00      	nop
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	e000ed00 	.word	0xe000ed00

08006f50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <HAL_PWREx_GetVoltageRange+0x18>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40007000 	.word	0x40007000

08006f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7a:	d130      	bne.n	8006fde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f7c:	4b23      	ldr	r3, [pc, #140]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d038      	beq.n	8006ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f8a:	4b20      	ldr	r3, [pc, #128]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f92:	4a1e      	ldr	r2, [pc, #120]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f9a:	4b1d      	ldr	r3, [pc, #116]	; (8007010 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2232      	movs	r2, #50	; 0x32
 8006fa0:	fb02 f303 	mul.w	r3, r2, r3
 8006fa4:	4a1b      	ldr	r2, [pc, #108]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	0c9b      	lsrs	r3, r3, #18
 8006fac:	3301      	adds	r3, #1
 8006fae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fb0:	e002      	b.n	8006fb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fb8:	4b14      	ldr	r3, [pc, #80]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc4:	d102      	bne.n	8006fcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f2      	bne.n	8006fb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd8:	d110      	bne.n	8006ffc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e00f      	b.n	8006ffe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fea:	d007      	beq.n	8006ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ff4:	4a05      	ldr	r2, [pc, #20]	; (800700c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ffa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40007000 	.word	0x40007000
 8007010:	20000004 	.word	0x20000004
 8007014:	431bde83 	.word	0x431bde83

08007018 <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a04      	ldr	r2, [pc, #16]	; (8007034 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 8007022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007026:	6093      	str	r3, [r2, #8]
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40007000 	.word	0x40007000

08007038 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b08      	cmp	r3, #8
 800704a:	f200 80a1 	bhi.w	8007190 <HAL_PWREx_EnableGPIOPullUp+0x158>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	08007079 	.word	0x08007079
 8007058:	0800709d 	.word	0x0800709d
 800705c:	080070bd 	.word	0x080070bd
 8007060:	080070d9 	.word	0x080070d9
 8007064:	080070f5 	.word	0x080070f5
 8007068:	08007111 	.word	0x08007111
 800706c:	0800712d 	.word	0x0800712d
 8007070:	08007149 	.word	0x08007149
 8007074:	0800716d 	.word	0x0800716d
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8007078:	4b4a      	ldr	r3, [pc, #296]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007082:	4948      	ldr	r1, [pc, #288]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007084:	4313      	orrs	r3, r2
 8007086:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8007088:	4b46      	ldr	r3, [pc, #280]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800708a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007092:	43db      	mvns	r3, r3
 8007094:	4943      	ldr	r1, [pc, #268]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007096:	4013      	ands	r3, r2
 8007098:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 800709a:	e07c      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 800709c:	4b41      	ldr	r3, [pc, #260]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800709e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070a0:	4940      	ldr	r1, [pc, #256]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	628b      	str	r3, [r1, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80070a8:	4b3e      	ldr	r3, [pc, #248]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	43db      	mvns	r3, r3
 80070b4:	493b      	ldr	r1, [pc, #236]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 80070ba:	e06c      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 80070bc:	4b39      	ldr	r3, [pc, #228]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c0:	4938      	ldr	r1, [pc, #224]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	630b      	str	r3, [r1, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80070c8:	4b36      	ldr	r3, [pc, #216]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	43db      	mvns	r3, r3
 80070d0:	4934      	ldr	r1, [pc, #208]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 80070d6:	e05e      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 80070d8:	4b32      	ldr	r3, [pc, #200]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070dc:	4931      	ldr	r1, [pc, #196]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	638b      	str	r3, [r1, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80070e4:	4b2f      	ldr	r3, [pc, #188]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	43db      	mvns	r3, r3
 80070ec:	492d      	ldr	r1, [pc, #180]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 80070f2:	e050      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 80070f4:	4b2b      	ldr	r3, [pc, #172]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070f8:	492a      	ldr	r1, [pc, #168]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	640b      	str	r3, [r1, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8007100:	4b28      	ldr	r3, [pc, #160]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	43db      	mvns	r3, r3
 8007108:	4926      	ldr	r1, [pc, #152]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800710a:	4013      	ands	r3, r2
 800710c:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 800710e:	e042      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 8007110:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007114:	4923      	ldr	r1, [pc, #140]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	4313      	orrs	r3, r2
 800711a:	648b      	str	r3, [r1, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 800711c:	4b21      	ldr	r3, [pc, #132]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800711e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	43db      	mvns	r3, r3
 8007124:	491f      	ldr	r1, [pc, #124]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007126:	4013      	ands	r3, r2
 8007128:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 800712a:	e034      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 800712c:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800712e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007130:	491c      	ldr	r1, [pc, #112]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	4313      	orrs	r3, r2
 8007136:	650b      	str	r3, [r1, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8007138:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800713a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	43db      	mvns	r3, r3
 8007140:	4918      	ldr	r1, [pc, #96]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007142:	4013      	ands	r3, r2
 8007144:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 8007146:	e026      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8007148:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800714a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	4914      	ldr	r1, [pc, #80]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007152:	4313      	orrs	r3, r2
 8007154:	658b      	str	r3, [r1, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007158:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8007160:	400b      	ands	r3, r1
 8007162:	43db      	mvns	r3, r3
 8007164:	490f      	ldr	r1, [pc, #60]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007166:	4013      	ands	r3, r2
 8007168:	65cb      	str	r3, [r1, #92]	; 0x5c
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
#endif
       break;
 800716a:	e014      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
#if defined(GPIOI)
    case PWR_GPIO_I:
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800716e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007176:	490b      	ldr	r1, [pc, #44]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 8007178:	4313      	orrs	r3, r2
 800717a:	660b      	str	r3, [r1, #96]	; 0x60
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800717e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007186:	43db      	mvns	r3, r3
 8007188:	4906      	ldr	r1, [pc, #24]	; (80071a4 <HAL_PWREx_EnableGPIOPullUp+0x16c>)
 800718a:	4013      	ands	r3, r2
 800718c:	664b      	str	r3, [r1, #100]	; 0x64
       break;
 800718e:	e002      	b.n	8007196 <HAL_PWREx_EnableGPIOPullUp+0x15e>
#endif
    default:
      status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	73fb      	strb	r3, [r7, #15]
      break;
 8007194:	bf00      	nop
  }

  return status;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40007000 	.word	0x40007000

080071a8 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	4a04      	ldr	r2, [pc, #16]	; (80071c4 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80071b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071b6:	6093      	str	r3, [r2, #8]
}
 80071b8:	bf00      	nop
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40007000 	.word	0x40007000

080071c8 <HAL_PWREx_DisablePullUpPullDownConfig>:
  * @note  When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 80071d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d6:	6093      	str	r3, [r2, #8]
}
 80071d8:	bf00      	nop
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40007000 	.word	0x40007000

080071e8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 80071ec:	4b1c      	ldr	r3, [pc, #112]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80071f8:	f7fc f9bc 	bl	8003574 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80071fc:	4b18      	ldr	r3, [pc, #96]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80071fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007202:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8007204:	4b16      	ldr	r3, [pc, #88]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8007210:	f000 f828 	bl	8007264 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8007214:	4b12      	ldr	r3, [pc, #72]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8007216:	2208      	movs	r2, #8
 8007218:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800721a:	4b11      	ldr	r3, [pc, #68]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8007226:	f000 f824 	bl	8007272 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800722c:	2210      	movs	r2, #16
 800722e:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8007232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d004      	beq.n	8007246 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800723c:	f000 f820 	bl	8007280 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8007242:	2220      	movs	r2, #32
 8007244:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8007246:	4b06      	ldr	r3, [pc, #24]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8007252:	f000 f81c 	bl	800728e <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8007256:	4b02      	ldr	r3, [pc, #8]	; (8007260 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8007258:	2240      	movs	r2, #64	; 0x40
 800725a:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800725c:	bf00      	nop
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40010400 	.word	0x40010400

08007264 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8007272:	b480      	push	{r7}
 8007274:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8007276:	bf00      	nop
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800728e:	b480      	push	{r7}
 8007290:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f000 bc16 	b.w	8007adc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072b0:	4ba0      	ldr	r3, [pc, #640]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 030c 	and.w	r3, r3, #12
 80072b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072ba:	4b9e      	ldr	r3, [pc, #632]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80e4 	beq.w	800749a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <HAL_RCC_OscConfig+0x4c>
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b0c      	cmp	r3, #12
 80072dc:	f040 808b 	bne.w	80073f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	f040 8087 	bne.w	80073f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072e8:	4b92      	ldr	r3, [pc, #584]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <HAL_RCC_OscConfig+0x64>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e3ed      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	4b8b      	ldr	r3, [pc, #556]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <HAL_RCC_OscConfig+0x7e>
 8007310:	4b88      	ldr	r3, [pc, #544]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007318:	e005      	b.n	8007326 <HAL_RCC_OscConfig+0x8a>
 800731a:	4b86      	ldr	r3, [pc, #536]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800731c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007326:	4293      	cmp	r3, r2
 8007328:	d223      	bcs.n	8007372 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fd80 	bl	8007e34 <RCC_SetFlashLatencyFromMSIRange>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e3ce      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800733e:	4b7d      	ldr	r3, [pc, #500]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a7c      	ldr	r2, [pc, #496]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007344:	f043 0308 	orr.w	r3, r3, #8
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	4b7a      	ldr	r3, [pc, #488]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	4977      	ldr	r1, [pc, #476]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007358:	4313      	orrs	r3, r2
 800735a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800735c:	4b75      	ldr	r3, [pc, #468]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	4972      	ldr	r1, [pc, #456]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
 8007370:	e025      	b.n	80073be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007372:	4b70      	ldr	r3, [pc, #448]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6f      	ldr	r2, [pc, #444]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007378:	f043 0308 	orr.w	r3, r3, #8
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	4b6d      	ldr	r3, [pc, #436]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	496a      	ldr	r1, [pc, #424]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800738c:	4313      	orrs	r3, r2
 800738e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007390:	4b68      	ldr	r3, [pc, #416]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	4965      	ldr	r1, [pc, #404]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fd40 	bl	8007e34 <RCC_SetFlashLatencyFromMSIRange>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e38e      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073be:	f000 fc75 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 80073c2:	4602      	mov	r2, r0
 80073c4:	4b5b      	ldr	r3, [pc, #364]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	091b      	lsrs	r3, r3, #4
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	495a      	ldr	r1, [pc, #360]	; (8007538 <HAL_RCC_OscConfig+0x29c>)
 80073d0:	5ccb      	ldrb	r3, [r1, r3]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	fa22 f303 	lsr.w	r3, r2, r3
 80073da:	4a58      	ldr	r2, [pc, #352]	; (800753c <HAL_RCC_OscConfig+0x2a0>)
 80073dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80073de:	4b58      	ldr	r3, [pc, #352]	; (8007540 <HAL_RCC_OscConfig+0x2a4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fc fcb4 	bl	8003d50 <HAL_InitTick>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d052      	beq.n	8007498 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	e372      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d032      	beq.n	8007464 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80073fe:	4b4d      	ldr	r3, [pc, #308]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a4c      	ldr	r2, [pc, #304]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800740a:	f7fc fcf1 	bl	8003df0 <HAL_GetTick>
 800740e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007410:	e008      	b.n	8007424 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007412:	f7fc fced 	bl	8003df0 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d901      	bls.n	8007424 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e35b      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007424:	4b43      	ldr	r3, [pc, #268]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0f0      	beq.n	8007412 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007430:	4b40      	ldr	r3, [pc, #256]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a3f      	ldr	r2, [pc, #252]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007436:	f043 0308 	orr.w	r3, r3, #8
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	4b3d      	ldr	r3, [pc, #244]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	493a      	ldr	r1, [pc, #232]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800744a:	4313      	orrs	r3, r2
 800744c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800744e:	4b39      	ldr	r3, [pc, #228]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	4935      	ldr	r1, [pc, #212]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800745e:	4313      	orrs	r3, r2
 8007460:	604b      	str	r3, [r1, #4]
 8007462:	e01a      	b.n	800749a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007464:	4b33      	ldr	r3, [pc, #204]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a32      	ldr	r2, [pc, #200]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007470:	f7fc fcbe 	bl	8003df0 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007478:	f7fc fcba 	bl	8003df0 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e328      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800748a:	4b2a      	ldr	r3, [pc, #168]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f0      	bne.n	8007478 <HAL_RCC_OscConfig+0x1dc>
 8007496:	e000      	b.n	800749a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d073      	beq.n	800758e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_OscConfig+0x21c>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b0c      	cmp	r3, #12
 80074b0:	d10e      	bne.n	80074d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d10b      	bne.n	80074d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d063      	beq.n	800758c <HAL_RCC_OscConfig+0x2f0>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d15f      	bne.n	800758c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e305      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d8:	d106      	bne.n	80074e8 <HAL_RCC_OscConfig+0x24c>
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a15      	ldr	r2, [pc, #84]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80074e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	e01d      	b.n	8007524 <HAL_RCC_OscConfig+0x288>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074f0:	d10c      	bne.n	800750c <HAL_RCC_OscConfig+0x270>
 80074f2:	4b10      	ldr	r3, [pc, #64]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a0f      	ldr	r2, [pc, #60]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 80074f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	e00b      	b.n	8007524 <HAL_RCC_OscConfig+0x288>
 800750c:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a08      	ldr	r2, [pc, #32]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 8007512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a05      	ldr	r2, [pc, #20]	; (8007534 <HAL_RCC_OscConfig+0x298>)
 800751e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01b      	beq.n	8007564 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752c:	f7fc fc60 	bl	8003df0 <HAL_GetTick>
 8007530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007532:	e010      	b.n	8007556 <HAL_RCC_OscConfig+0x2ba>
 8007534:	40021000 	.word	0x40021000
 8007538:	08011d90 	.word	0x08011d90
 800753c:	20000004 	.word	0x20000004
 8007540:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007544:	f7fc fc54 	bl	8003df0 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b64      	cmp	r3, #100	; 0x64
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e2c2      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007556:	4baf      	ldr	r3, [pc, #700]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f0      	beq.n	8007544 <HAL_RCC_OscConfig+0x2a8>
 8007562:	e014      	b.n	800758e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007564:	f7fc fc44 	bl	8003df0 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800756c:	f7fc fc40 	bl	8003df0 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b64      	cmp	r3, #100	; 0x64
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e2ae      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800757e:	4ba5      	ldr	r3, [pc, #660]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f0      	bne.n	800756c <HAL_RCC_OscConfig+0x2d0>
 800758a:	e000      	b.n	800758e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800758c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d060      	beq.n	800765c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b04      	cmp	r3, #4
 800759e:	d005      	beq.n	80075ac <HAL_RCC_OscConfig+0x310>
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b0c      	cmp	r3, #12
 80075a4:	d119      	bne.n	80075da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d116      	bne.n	80075da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ac:	4b99      	ldr	r3, [pc, #612]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <HAL_RCC_OscConfig+0x328>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e28b      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c4:	4b93      	ldr	r3, [pc, #588]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	061b      	lsls	r3, r3, #24
 80075d2:	4990      	ldr	r1, [pc, #576]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075d8:	e040      	b.n	800765c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d023      	beq.n	800762a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075e2:	4b8c      	ldr	r3, [pc, #560]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a8b      	ldr	r2, [pc, #556]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80075e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ee:	f7fc fbff 	bl	8003df0 <HAL_GetTick>
 80075f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075f6:	f7fc fbfb 	bl	8003df0 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e269      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007608:	4b82      	ldr	r3, [pc, #520]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f0      	beq.n	80075f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007614:	4b7f      	ldr	r3, [pc, #508]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	061b      	lsls	r3, r3, #24
 8007622:	497c      	ldr	r1, [pc, #496]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007624:	4313      	orrs	r3, r2
 8007626:	604b      	str	r3, [r1, #4]
 8007628:	e018      	b.n	800765c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800762a:	4b7a      	ldr	r3, [pc, #488]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a79      	ldr	r2, [pc, #484]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007636:	f7fc fbdb 	bl	8003df0 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800763e:	f7fc fbd7 	bl	8003df0 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e245      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007650:	4b70      	ldr	r3, [pc, #448]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f0      	bne.n	800763e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d03c      	beq.n	80076e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01c      	beq.n	80076aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007670:	4b68      	ldr	r3, [pc, #416]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007676:	4a67      	ldr	r2, [pc, #412]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007678:	f043 0301 	orr.w	r3, r3, #1
 800767c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007680:	f7fc fbb6 	bl	8003df0 <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007688:	f7fc fbb2 	bl	8003df0 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e220      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800769a:	4b5e      	ldr	r3, [pc, #376]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 800769c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0ef      	beq.n	8007688 <HAL_RCC_OscConfig+0x3ec>
 80076a8:	e01b      	b.n	80076e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076aa:	4b5a      	ldr	r3, [pc, #360]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80076ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b0:	4a58      	ldr	r2, [pc, #352]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80076b2:	f023 0301 	bic.w	r3, r3, #1
 80076b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ba:	f7fc fb99 	bl	8003df0 <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076c2:	f7fc fb95 	bl	8003df0 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e203      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076d4:	4b4f      	ldr	r3, [pc, #316]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80076d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1ef      	bne.n	80076c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 80a6 	beq.w	800783c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076f0:	2300      	movs	r3, #0
 80076f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80076f4:	4b47      	ldr	r3, [pc, #284]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80076f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10d      	bne.n	800771c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007700:	4b44      	ldr	r3, [pc, #272]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	4a43      	ldr	r2, [pc, #268]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800770a:	6593      	str	r3, [r2, #88]	; 0x58
 800770c:	4b41      	ldr	r3, [pc, #260]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 800770e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007718:	2301      	movs	r3, #1
 800771a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800771c:	4b3e      	ldr	r3, [pc, #248]	; (8007818 <HAL_RCC_OscConfig+0x57c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007724:	2b00      	cmp	r3, #0
 8007726:	d118      	bne.n	800775a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007728:	4b3b      	ldr	r3, [pc, #236]	; (8007818 <HAL_RCC_OscConfig+0x57c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a3a      	ldr	r2, [pc, #232]	; (8007818 <HAL_RCC_OscConfig+0x57c>)
 800772e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007734:	f7fc fb5c 	bl	8003df0 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800773c:	f7fc fb58 	bl	8003df0 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e1c6      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800774e:	4b32      	ldr	r3, [pc, #200]	; (8007818 <HAL_RCC_OscConfig+0x57c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d108      	bne.n	8007774 <HAL_RCC_OscConfig+0x4d8>
 8007762:	4b2c      	ldr	r3, [pc, #176]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	4a2a      	ldr	r2, [pc, #168]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007772:	e024      	b.n	80077be <HAL_RCC_OscConfig+0x522>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b05      	cmp	r3, #5
 800777a:	d110      	bne.n	800779e <HAL_RCC_OscConfig+0x502>
 800777c:	4b25      	ldr	r3, [pc, #148]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007782:	4a24      	ldr	r2, [pc, #144]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007784:	f043 0304 	orr.w	r3, r3, #4
 8007788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800778c:	4b21      	ldr	r3, [pc, #132]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007792:	4a20      	ldr	r2, [pc, #128]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800779c:	e00f      	b.n	80077be <HAL_RCC_OscConfig+0x522>
 800779e:	4b1d      	ldr	r3, [pc, #116]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80077a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a4:	4a1b      	ldr	r2, [pc, #108]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077ae:	4b19      	ldr	r3, [pc, #100]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b4:	4a17      	ldr	r2, [pc, #92]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80077b6:	f023 0304 	bic.w	r3, r3, #4
 80077ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c6:	f7fc fb13 	bl	8003df0 <HAL_GetTick>
 80077ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077cc:	e00a      	b.n	80077e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ce:	f7fc fb0f 	bl	8003df0 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077dc:	4293      	cmp	r3, r2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e17b      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <HAL_RCC_OscConfig+0x578>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0ed      	beq.n	80077ce <HAL_RCC_OscConfig+0x532>
 80077f2:	e01a      	b.n	800782a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f4:	f7fc fafc 	bl	8003df0 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077fa:	e00f      	b.n	800781c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077fc:	f7fc faf8 	bl	8003df0 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	f241 3288 	movw	r2, #5000	; 0x1388
 800780a:	4293      	cmp	r3, r2
 800780c:	d906      	bls.n	800781c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e164      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
 8007812:	bf00      	nop
 8007814:	40021000 	.word	0x40021000
 8007818:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800781c:	4ba8      	ldr	r3, [pc, #672]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e8      	bne.n	80077fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800782a:	7ffb      	ldrb	r3, [r7, #31]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d105      	bne.n	800783c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007830:	4ba3      	ldr	r3, [pc, #652]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007834:	4aa2      	ldr	r2, [pc, #648]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800783a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d03c      	beq.n	80078c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01c      	beq.n	800788a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007850:	4b9b      	ldr	r3, [pc, #620]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007856:	4a9a      	ldr	r2, [pc, #616]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007860:	f7fc fac6 	bl	8003df0 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007868:	f7fc fac2 	bl	8003df0 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e130      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800787a:	4b91      	ldr	r3, [pc, #580]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 800787c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0ef      	beq.n	8007868 <HAL_RCC_OscConfig+0x5cc>
 8007888:	e01b      	b.n	80078c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800788a:	4b8d      	ldr	r3, [pc, #564]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 800788c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007890:	4a8b      	ldr	r2, [pc, #556]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789a:	f7fc faa9 	bl	8003df0 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078a2:	f7fc faa5 	bl	8003df0 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e113      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078b4:	4b82      	ldr	r3, [pc, #520]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 80078b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1ef      	bne.n	80078a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8107 	beq.w	8007ada <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	f040 80cb 	bne.w	8007a6c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80078d6:	4b7a      	ldr	r3, [pc, #488]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f003 0203 	and.w	r2, r3, #3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d12c      	bne.n	8007944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	3b01      	subs	r3, #1
 80078f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d123      	bne.n	8007944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007906:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007908:	429a      	cmp	r2, r3
 800790a:	d11b      	bne.n	8007944 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007918:	429a      	cmp	r2, r3
 800791a:	d113      	bne.n	8007944 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	3b01      	subs	r3, #1
 800792a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800792c:	429a      	cmp	r2, r3
 800792e:	d109      	bne.n	8007944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	085b      	lsrs	r3, r3, #1
 800793c:	3b01      	subs	r3, #1
 800793e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007940:	429a      	cmp	r2, r3
 8007942:	d06d      	beq.n	8007a20 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b0c      	cmp	r3, #12
 8007948:	d068      	beq.n	8007a1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800794a:	4b5d      	ldr	r3, [pc, #372]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007956:	4b5a      	ldr	r3, [pc, #360]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e0ba      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007966:	4b56      	ldr	r3, [pc, #344]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a55      	ldr	r2, [pc, #340]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 800796c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007970:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007972:	f7fc fa3d 	bl	8003df0 <HAL_GetTick>
 8007976:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007978:	e008      	b.n	800798c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800797a:	f7fc fa39 	bl	8003df0 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e0a7      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800798c:	4b4c      	ldr	r3, [pc, #304]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f0      	bne.n	800797a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007998:	4b49      	ldr	r3, [pc, #292]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	4b49      	ldr	r3, [pc, #292]	; (8007ac4 <HAL_RCC_OscConfig+0x828>)
 800799e:	4013      	ands	r3, r2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079a8:	3a01      	subs	r2, #1
 80079aa:	0112      	lsls	r2, r2, #4
 80079ac:	4311      	orrs	r1, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079b2:	0212      	lsls	r2, r2, #8
 80079b4:	4311      	orrs	r1, r2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80079ba:	0852      	lsrs	r2, r2, #1
 80079bc:	3a01      	subs	r2, #1
 80079be:	0552      	lsls	r2, r2, #21
 80079c0:	4311      	orrs	r1, r2
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80079c6:	0852      	lsrs	r2, r2, #1
 80079c8:	3a01      	subs	r2, #1
 80079ca:	0652      	lsls	r2, r2, #25
 80079cc:	4311      	orrs	r1, r2
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079d2:	06d2      	lsls	r2, r2, #27
 80079d4:	430a      	orrs	r2, r1
 80079d6:	493a      	ldr	r1, [pc, #232]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80079dc:	4b38      	ldr	r3, [pc, #224]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a37      	ldr	r2, [pc, #220]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 80079e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079e8:	4b35      	ldr	r3, [pc, #212]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	4a34      	ldr	r2, [pc, #208]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 80079ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079f4:	f7fc f9fc 	bl	8003df0 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fc:	f7fc f9f8 	bl	8003df0 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e066      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a0e:	4b2c      	ldr	r3, [pc, #176]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f0      	beq.n	80079fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a1a:	e05e      	b.n	8007ada <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e05d      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a20:	4b27      	ldr	r3, [pc, #156]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d156      	bne.n	8007ada <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007a2c:	4b24      	ldr	r3, [pc, #144]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a23      	ldr	r2, [pc, #140]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a38:	4b21      	ldr	r3, [pc, #132]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a44:	f7fc f9d4 	bl	8003df0 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a4c:	f7fc f9d0 	bl	8003df0 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e03e      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a5e:	4b18      	ldr	r3, [pc, #96]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0f0      	beq.n	8007a4c <HAL_RCC_OscConfig+0x7b0>
 8007a6a:	e036      	b.n	8007ada <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b0c      	cmp	r3, #12
 8007a70:	d031      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007a7e:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	4a0c      	ldr	r2, [pc, #48]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a90:	f023 0303 	bic.w	r3, r3, #3
 8007a94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007a96:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <HAL_RCC_OscConfig+0x824>)
 8007a9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa6:	f7fc f9a3 	bl	8003df0 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aac:	e00c      	b.n	8007ac8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aae:	f7fc f99f 	bl	8003df0 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d905      	bls.n	8007ac8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e00d      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
 8007ac0:	40021000 	.word	0x40021000
 8007ac4:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <HAL_RCC_OscConfig+0x848>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1ec      	bne.n	8007aae <HAL_RCC_OscConfig+0x812>
 8007ad4:	e001      	b.n	8007ada <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40021000 	.word	0x40021000

08007ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e0c8      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007afc:	4b66      	ldr	r3, [pc, #408]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d910      	bls.n	8007b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b0a:	4b63      	ldr	r3, [pc, #396]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f023 0207 	bic.w	r2, r3, #7
 8007b12:	4961      	ldr	r1, [pc, #388]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b1a:	4b5f      	ldr	r3, [pc, #380]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d001      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e0b0      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d04c      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d107      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b40:	4b56      	ldr	r3, [pc, #344]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d121      	bne.n	8007b90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e09e      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d107      	bne.n	8007b68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b58:	4b50      	ldr	r3, [pc, #320]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d115      	bne.n	8007b90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e092      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d107      	bne.n	8007b80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b70:	4b4a      	ldr	r3, [pc, #296]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e086      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b80:	4b46      	ldr	r3, [pc, #280]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e07e      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b90:	4b42      	ldr	r3, [pc, #264]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f023 0203 	bic.w	r2, r3, #3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	493f      	ldr	r1, [pc, #252]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba2:	f7fc f925 	bl	8003df0 <HAL_GetTick>
 8007ba6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba8:	e00a      	b.n	8007bc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007baa:	f7fc f921 	bl	8003df0 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e066      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc0:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 020c 	and.w	r2, r3, #12
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d1eb      	bne.n	8007baa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d008      	beq.n	8007bf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bde:	4b2f      	ldr	r3, [pc, #188]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	492c      	ldr	r1, [pc, #176]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bf0:	4b29      	ldr	r3, [pc, #164]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d210      	bcs.n	8007c20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bfe:	4b26      	ldr	r3, [pc, #152]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f023 0207 	bic.w	r2, r3, #7
 8007c06:	4924      	ldr	r1, [pc, #144]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c0e:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <HAL_RCC_ClockConfig+0x1b0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d001      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e036      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	4918      	ldr	r1, [pc, #96]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4910      	ldr	r1, [pc, #64]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c5e:	f000 f825 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8007c62:	4602      	mov	r2, r0
 8007c64:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <HAL_RCC_ClockConfig+0x1b4>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	091b      	lsrs	r3, r3, #4
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	490c      	ldr	r1, [pc, #48]	; (8007ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c70:	5ccb      	ldrb	r3, [r1, r3]
 8007c72:	f003 031f 	and.w	r3, r3, #31
 8007c76:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7a:	4a0a      	ldr	r2, [pc, #40]	; (8007ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007c7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fc f864 	bl	8003d50 <HAL_InitTick>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40022000 	.word	0x40022000
 8007c9c:	40021000 	.word	0x40021000
 8007ca0:	08011d90 	.word	0x08011d90
 8007ca4:	20000004 	.word	0x20000004
 8007ca8:	20000008 	.word	0x20000008

08007cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b089      	sub	sp, #36	; 0x24
 8007cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61fb      	str	r3, [r7, #28]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cba:	4b3e      	ldr	r3, [pc, #248]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cc4:	4b3b      	ldr	r3, [pc, #236]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b0c      	cmp	r3, #12
 8007cd8:	d121      	bne.n	8007d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d11e      	bne.n	8007d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ce0:	4b34      	ldr	r3, [pc, #208]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d107      	bne.n	8007cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007cec:	4b31      	ldr	r3, [pc, #196]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cf2:	0a1b      	lsrs	r3, r3, #8
 8007cf4:	f003 030f 	and.w	r3, r3, #15
 8007cf8:	61fb      	str	r3, [r7, #28]
 8007cfa:	e005      	b.n	8007d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007cfc:	4b2d      	ldr	r3, [pc, #180]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007d08:	4a2b      	ldr	r2, [pc, #172]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10d      	bne.n	8007d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d1c:	e00a      	b.n	8007d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d102      	bne.n	8007d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d24:	4b25      	ldr	r3, [pc, #148]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	e004      	b.n	8007d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d101      	bne.n	8007d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d30:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b0c      	cmp	r3, #12
 8007d38:	d134      	bne.n	8007da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d003      	beq.n	8007d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d003      	beq.n	8007d58 <HAL_RCC_GetSysClockFreq+0xac>
 8007d50:	e005      	b.n	8007d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007d52:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8007d54:	617b      	str	r3, [r7, #20]
      break;
 8007d56:	e005      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007d58:	4b19      	ldr	r3, [pc, #100]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007d5a:	617b      	str	r3, [r7, #20]
      break;
 8007d5c:	e002      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	617b      	str	r3, [r7, #20]
      break;
 8007d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d64:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	3301      	adds	r3, #1
 8007d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d72:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	0a1b      	lsrs	r3, r3, #8
 8007d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	fb02 f203 	mul.w	r2, r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d8a:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	0e5b      	lsrs	r3, r3, #25
 8007d90:	f003 0303 	and.w	r3, r3, #3
 8007d94:	3301      	adds	r3, #1
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007da4:	69bb      	ldr	r3, [r7, #24]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3724      	adds	r7, #36	; 0x24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	40021000 	.word	0x40021000
 8007db8:	08011da8 	.word	0x08011da8
 8007dbc:	00f42400 	.word	0x00f42400
 8007dc0:	007a1200 	.word	0x007a1200

08007dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dc8:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dca:	681b      	ldr	r3, [r3, #0]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	20000004 	.word	0x20000004

08007ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007de0:	f7ff fff0 	bl	8007dc4 <HAL_RCC_GetHCLKFreq>
 8007de4:	4602      	mov	r2, r0
 8007de6:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	4904      	ldr	r1, [pc, #16]	; (8007e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007df2:	5ccb      	ldrb	r3, [r1, r3]
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40021000 	.word	0x40021000
 8007e04:	08011da0 	.word	0x08011da0

08007e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e0c:	f7ff ffda 	bl	8007dc4 <HAL_RCC_GetHCLKFreq>
 8007e10:	4602      	mov	r2, r0
 8007e12:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	0adb      	lsrs	r3, r3, #11
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	4904      	ldr	r1, [pc, #16]	; (8007e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e1e:	5ccb      	ldrb	r3, [r1, r3]
 8007e20:	f003 031f 	and.w	r3, r3, #31
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	08011da0 	.word	0x08011da0

08007e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007e40:	4b2a      	ldr	r3, [pc, #168]	; (8007eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007e4c:	f7ff f880 	bl	8006f50 <HAL_PWREx_GetVoltageRange>
 8007e50:	6178      	str	r0, [r7, #20]
 8007e52:	e014      	b.n	8007e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e54:	4b25      	ldr	r3, [pc, #148]	; (8007eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e58:	4a24      	ldr	r2, [pc, #144]	; (8007eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007e60:	4b22      	ldr	r3, [pc, #136]	; (8007eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e6c:	f7ff f870 	bl	8006f50 <HAL_PWREx_GetVoltageRange>
 8007e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e72:	4b1e      	ldr	r3, [pc, #120]	; (8007eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e76:	4a1d      	ldr	r2, [pc, #116]	; (8007eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e84:	d10b      	bne.n	8007e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d919      	bls.n	8007ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2ba0      	cmp	r3, #160	; 0xa0
 8007e90:	d902      	bls.n	8007e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e92:	2302      	movs	r3, #2
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	e013      	b.n	8007ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e98:	2301      	movs	r3, #1
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	e010      	b.n	8007ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b80      	cmp	r3, #128	; 0x80
 8007ea2:	d902      	bls.n	8007eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	e00a      	b.n	8007ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b80      	cmp	r3, #128	; 0x80
 8007eae:	d102      	bne.n	8007eb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	e004      	b.n	8007ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b70      	cmp	r3, #112	; 0x70
 8007eba:	d101      	bne.n	8007ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f023 0207 	bic.w	r2, r3, #7
 8007ec8:	4909      	ldr	r1, [pc, #36]	; (8007ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d001      	beq.n	8007ee2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40021000 	.word	0x40021000
 8007ef0:	40022000 	.word	0x40022000

08007ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007efc:	2300      	movs	r3, #0
 8007efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f00:	2300      	movs	r3, #0
 8007f02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d041      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f18:	d02a      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007f1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f1e:	d824      	bhi.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f24:	d008      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f2a:	d81e      	bhi.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f34:	d010      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f36:	e018      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f38:	4b86      	ldr	r3, [pc, #536]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	4a85      	ldr	r2, [pc, #532]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f44:	e015      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 facd 	bl	80084ec <RCCEx_PLLSAI1_Config>
 8007f52:	4603      	mov	r3, r0
 8007f54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f56:	e00c      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3320      	adds	r3, #32
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fbb6 	bl	80086d0 <RCCEx_PLLSAI2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f68:	e003      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8007f6e:	e000      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f72:	7cfb      	ldrb	r3, [r7, #19]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10b      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f78:	4b76      	ldr	r3, [pc, #472]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f86:	4973      	ldr	r1, [pc, #460]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007f8e:	e001      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	7cfb      	ldrb	r3, [r7, #19]
 8007f92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d041      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fa8:	d02a      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007faa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fae:	d824      	bhi.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fb4:	d008      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fba:	d81e      	bhi.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fc4:	d010      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007fc6:	e018      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007fc8:	4b62      	ldr	r3, [pc, #392]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	4a61      	ldr	r2, [pc, #388]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fd4:	e015      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2100      	movs	r1, #0
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fa85 	bl	80084ec <RCCEx_PLLSAI1_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fe6:	e00c      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3320      	adds	r3, #32
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fb6e 	bl	80086d0 <RCCEx_PLLSAI2_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ff8:	e003      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8007ffe:	e000      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008002:	7cfb      	ldrb	r3, [r7, #19]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008008:	4b52      	ldr	r3, [pc, #328]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008016:	494f      	ldr	r1, [pc, #316]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008018:	4313      	orrs	r3, r2
 800801a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800801e:	e001      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008020:	7cfb      	ldrb	r3, [r7, #19]
 8008022:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80a0 	beq.w	8008172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008032:	2300      	movs	r3, #0
 8008034:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008036:	4b47      	ldr	r3, [pc, #284]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00d      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800804c:	4b41      	ldr	r3, [pc, #260]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800804e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008050:	4a40      	ldr	r2, [pc, #256]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008056:	6593      	str	r3, [r2, #88]	; 0x58
 8008058:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800805a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008064:	2301      	movs	r3, #1
 8008066:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008068:	4b3b      	ldr	r3, [pc, #236]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a3a      	ldr	r2, [pc, #232]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800806e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008074:	f7fb febc 	bl	8003df0 <HAL_GetTick>
 8008078:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800807a:	e009      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800807c:	f7fb feb8 	bl	8003df0 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d902      	bls.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	74fb      	strb	r3, [r7, #19]
        break;
 800808e:	e005      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008090:	4b31      	ldr	r3, [pc, #196]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0ef      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800809c:	7cfb      	ldrb	r3, [r7, #19]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d15c      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080a2:	4b2c      	ldr	r3, [pc, #176]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d01f      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d019      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080c0:	4b24      	ldr	r3, [pc, #144]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080cc:	4b21      	ldr	r3, [pc, #132]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d2:	4a20      	ldr	r2, [pc, #128]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080dc:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e2:	4a1c      	ldr	r2, [pc, #112]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80080ec:	4a19      	ldr	r2, [pc, #100]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d016      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fe:	f7fb fe77 	bl	8003df0 <HAL_GetTick>
 8008102:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008104:	e00b      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fb fe73 	bl	8003df0 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f241 3288 	movw	r2, #5000	; 0x1388
 8008114:	4293      	cmp	r3, r2
 8008116:	d902      	bls.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	74fb      	strb	r3, [r7, #19]
            break;
 800811c:	e006      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0ec      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800812c:	7cfb      	ldrb	r3, [r7, #19]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10c      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008132:	4b08      	ldr	r3, [pc, #32]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008142:	4904      	ldr	r1, [pc, #16]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800814a:	e009      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800814c:	7cfb      	ldrb	r3, [r7, #19]
 800814e:	74bb      	strb	r3, [r7, #18]
 8008150:	e006      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008152:	bf00      	nop
 8008154:	40021000 	.word	0x40021000
 8008158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815c:	7cfb      	ldrb	r3, [r7, #19]
 800815e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008160:	7c7b      	ldrb	r3, [r7, #17]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d105      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008166:	4ba6      	ldr	r3, [pc, #664]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816a:	4aa5      	ldr	r2, [pc, #660]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800816c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008170:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800817e:	4ba0      	ldr	r3, [pc, #640]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008184:	f023 0203 	bic.w	r2, r3, #3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	499c      	ldr	r1, [pc, #624]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081a0:	4b97      	ldr	r3, [pc, #604]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a6:	f023 020c 	bic.w	r2, r3, #12
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	4994      	ldr	r1, [pc, #592]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081c2:	4b8f      	ldr	r3, [pc, #572]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	498b      	ldr	r1, [pc, #556]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081e4:	4b86      	ldr	r3, [pc, #536]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f2:	4983      	ldr	r1, [pc, #524]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008206:	4b7e      	ldr	r3, [pc, #504]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008214:	497a      	ldr	r1, [pc, #488]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008228:	4b75      	ldr	r3, [pc, #468]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800822a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008236:	4972      	ldr	r1, [pc, #456]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800824a:	4b6d      	ldr	r3, [pc, #436]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800824c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008250:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008258:	4969      	ldr	r1, [pc, #420]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00a      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800826c:	4b64      	ldr	r3, [pc, #400]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800826e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800827a:	4961      	ldr	r1, [pc, #388]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800827c:	4313      	orrs	r3, r2
 800827e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800828e:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008294:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	4958      	ldr	r1, [pc, #352]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082b0:	4b53      	ldr	r3, [pc, #332]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	4950      	ldr	r1, [pc, #320]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082d2:	4b4b      	ldr	r3, [pc, #300]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e0:	4947      	ldr	r1, [pc, #284]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00a      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082f4:	4b42      	ldr	r3, [pc, #264]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082fa:	f023 0203 	bic.w	r2, r3, #3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008302:	493f      	ldr	r1, [pc, #252]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d028      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008316:	4b3a      	ldr	r3, [pc, #232]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008324:	4936      	ldr	r1, [pc, #216]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008334:	d106      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008336:	4b32      	ldr	r3, [pc, #200]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	4a31      	ldr	r2, [pc, #196]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800833c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008340:	60d3      	str	r3, [r2, #12]
 8008342:	e011      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800834c:	d10c      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3304      	adds	r3, #4
 8008352:	2101      	movs	r1, #1
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f8c9 	bl	80084ec <RCCEx_PLLSAI1_Config>
 800835a:	4603      	mov	r3, r0
 800835c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800835e:	7cfb      	ldrb	r3, [r7, #19]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8008364:	7cfb      	ldrb	r3, [r7, #19]
 8008366:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d028      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008374:	4b22      	ldr	r3, [pc, #136]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800837a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008382:	491f      	ldr	r1, [pc, #124]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800838e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008392:	d106      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4a19      	ldr	r2, [pc, #100]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800839a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800839e:	60d3      	str	r3, [r2, #12]
 80083a0:	e011      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083aa:	d10c      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3304      	adds	r3, #4
 80083b0:	2101      	movs	r1, #1
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f89a 	bl	80084ec <RCCEx_PLLSAI1_Config>
 80083b8:	4603      	mov	r3, r0
 80083ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083bc:	7cfb      	ldrb	r3, [r7, #19]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80083c2:	7cfb      	ldrb	r3, [r7, #19]
 80083c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d02a      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083d2:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083e0:	4907      	ldr	r1, [pc, #28]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f0:	d108      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083f2:	4b03      	ldr	r3, [pc, #12]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	4a02      	ldr	r2, [pc, #8]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083fc:	60d3      	str	r3, [r2, #12]
 80083fe:	e013      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8008400:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800840c:	d10c      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3304      	adds	r3, #4
 8008412:	2101      	movs	r1, #1
 8008414:	4618      	mov	r0, r3
 8008416:	f000 f869 	bl	80084ec <RCCEx_PLLSAI1_Config>
 800841a:	4603      	mov	r3, r0
 800841c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800841e:	7cfb      	ldrb	r3, [r7, #19]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8008424:	7cfb      	ldrb	r3, [r7, #19]
 8008426:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d02f      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008434:	4b2c      	ldr	r3, [pc, #176]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008442:	4929      	ldr	r1, [pc, #164]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008444:	4313      	orrs	r3, r2
 8008446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008452:	d10d      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3304      	adds	r3, #4
 8008458:	2102      	movs	r1, #2
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f846 	bl	80084ec <RCCEx_PLLSAI1_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008464:	7cfb      	ldrb	r3, [r7, #19]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d014      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800846a:	7cfb      	ldrb	r3, [r7, #19]
 800846c:	74bb      	strb	r3, [r7, #18]
 800846e:	e011      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008478:	d10c      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3320      	adds	r3, #32
 800847e:	2102      	movs	r1, #2
 8008480:	4618      	mov	r0, r3
 8008482:	f000 f925 	bl	80086d0 <RCCEx_PLLSAI2_Config>
 8008486:	4603      	mov	r3, r0
 8008488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800848a:	7cfb      	ldrb	r3, [r7, #19]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008490:	7cfb      	ldrb	r3, [r7, #19]
 8008492:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084a0:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80084a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b0:	490d      	ldr	r1, [pc, #52]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80084c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d4:	4904      	ldr	r1, [pc, #16]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80084dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40021000 	.word	0x40021000

080084ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80084fa:	4b74      	ldr	r3, [pc, #464]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d018      	beq.n	8008538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008506:	4b71      	ldr	r3, [pc, #452]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f003 0203 	and.w	r2, r3, #3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d10d      	bne.n	8008532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
       ||
 800851a:	2b00      	cmp	r3, #0
 800851c:	d009      	beq.n	8008532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800851e:	4b6b      	ldr	r3, [pc, #428]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	091b      	lsrs	r3, r3, #4
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
       ||
 800852e:	429a      	cmp	r2, r3
 8008530:	d047      	beq.n	80085c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	73fb      	strb	r3, [r7, #15]
 8008536:	e044      	b.n	80085c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d018      	beq.n	8008572 <RCCEx_PLLSAI1_Config+0x86>
 8008540:	2b03      	cmp	r3, #3
 8008542:	d825      	bhi.n	8008590 <RCCEx_PLLSAI1_Config+0xa4>
 8008544:	2b01      	cmp	r3, #1
 8008546:	d002      	beq.n	800854e <RCCEx_PLLSAI1_Config+0x62>
 8008548:	2b02      	cmp	r3, #2
 800854a:	d009      	beq.n	8008560 <RCCEx_PLLSAI1_Config+0x74>
 800854c:	e020      	b.n	8008590 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800854e:	4b5f      	ldr	r3, [pc, #380]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d11d      	bne.n	8008596 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800855e:	e01a      	b.n	8008596 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008560:	4b5a      	ldr	r3, [pc, #360]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008568:	2b00      	cmp	r3, #0
 800856a:	d116      	bne.n	800859a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008570:	e013      	b.n	800859a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008572:	4b56      	ldr	r3, [pc, #344]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10f      	bne.n	800859e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800857e:	4b53      	ldr	r3, [pc, #332]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800858e:	e006      	b.n	800859e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
      break;
 8008594:	e004      	b.n	80085a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008596:	bf00      	nop
 8008598:	e002      	b.n	80085a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800859a:	bf00      	nop
 800859c:	e000      	b.n	80085a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800859e:	bf00      	nop
    }

    if(status == HAL_OK)
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80085a6:	4b49      	ldr	r3, [pc, #292]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6819      	ldr	r1, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	430b      	orrs	r3, r1
 80085bc:	4943      	ldr	r1, [pc, #268]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d17c      	bne.n	80086c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80085c8:	4b40      	ldr	r3, [pc, #256]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a3f      	ldr	r2, [pc, #252]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d4:	f7fb fc0c 	bl	8003df0 <HAL_GetTick>
 80085d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80085da:	e009      	b.n	80085f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085dc:	f7fb fc08 	bl	8003df0 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d902      	bls.n	80085f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	73fb      	strb	r3, [r7, #15]
        break;
 80085ee:	e005      	b.n	80085fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80085f0:	4b36      	ldr	r3, [pc, #216]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1ef      	bne.n	80085dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d15f      	bne.n	80086c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d110      	bne.n	800862a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008608:	4b30      	ldr	r3, [pc, #192]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008610:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6892      	ldr	r2, [r2, #8]
 8008618:	0211      	lsls	r1, r2, #8
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	68d2      	ldr	r2, [r2, #12]
 800861e:	06d2      	lsls	r2, r2, #27
 8008620:	430a      	orrs	r2, r1
 8008622:	492a      	ldr	r1, [pc, #168]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008624:	4313      	orrs	r3, r2
 8008626:	610b      	str	r3, [r1, #16]
 8008628:	e027      	b.n	800867a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d112      	bne.n	8008656 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008630:	4b26      	ldr	r3, [pc, #152]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008638:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6892      	ldr	r2, [r2, #8]
 8008640:	0211      	lsls	r1, r2, #8
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6912      	ldr	r2, [r2, #16]
 8008646:	0852      	lsrs	r2, r2, #1
 8008648:	3a01      	subs	r2, #1
 800864a:	0552      	lsls	r2, r2, #21
 800864c:	430a      	orrs	r2, r1
 800864e:	491f      	ldr	r1, [pc, #124]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008650:	4313      	orrs	r3, r2
 8008652:	610b      	str	r3, [r1, #16]
 8008654:	e011      	b.n	800867a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008656:	4b1d      	ldr	r3, [pc, #116]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800865e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6892      	ldr	r2, [r2, #8]
 8008666:	0211      	lsls	r1, r2, #8
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6952      	ldr	r2, [r2, #20]
 800866c:	0852      	lsrs	r2, r2, #1
 800866e:	3a01      	subs	r2, #1
 8008670:	0652      	lsls	r2, r2, #25
 8008672:	430a      	orrs	r2, r1
 8008674:	4915      	ldr	r1, [pc, #84]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008676:	4313      	orrs	r3, r2
 8008678:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800867a:	4b14      	ldr	r3, [pc, #80]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a13      	ldr	r2, [pc, #76]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008684:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008686:	f7fb fbb3 	bl	8003df0 <HAL_GetTick>
 800868a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800868c:	e009      	b.n	80086a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800868e:	f7fb fbaf 	bl	8003df0 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d902      	bls.n	80086a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	73fb      	strb	r3, [r7, #15]
          break;
 80086a0:	e005      	b.n	80086ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086a2:	4b0a      	ldr	r3, [pc, #40]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0ef      	beq.n	800868e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80086b4:	4b05      	ldr	r3, [pc, #20]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	4903      	ldr	r1, [pc, #12]	; (80086cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40021000 	.word	0x40021000

080086d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80086de:	4b69      	ldr	r3, [pc, #420]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d018      	beq.n	800871c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80086ea:	4b66      	ldr	r3, [pc, #408]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 0203 	and.w	r2, r3, #3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d10d      	bne.n	8008716 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
       ||
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008702:	4b60      	ldr	r3, [pc, #384]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	091b      	lsrs	r3, r3, #4
 8008708:	f003 0307 	and.w	r3, r3, #7
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
       ||
 8008712:	429a      	cmp	r2, r3
 8008714:	d047      	beq.n	80087a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]
 800871a:	e044      	b.n	80087a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d018      	beq.n	8008756 <RCCEx_PLLSAI2_Config+0x86>
 8008724:	2b03      	cmp	r3, #3
 8008726:	d825      	bhi.n	8008774 <RCCEx_PLLSAI2_Config+0xa4>
 8008728:	2b01      	cmp	r3, #1
 800872a:	d002      	beq.n	8008732 <RCCEx_PLLSAI2_Config+0x62>
 800872c:	2b02      	cmp	r3, #2
 800872e:	d009      	beq.n	8008744 <RCCEx_PLLSAI2_Config+0x74>
 8008730:	e020      	b.n	8008774 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008732:	4b54      	ldr	r3, [pc, #336]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d11d      	bne.n	800877a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008742:	e01a      	b.n	800877a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008744:	4b4f      	ldr	r3, [pc, #316]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800874c:	2b00      	cmp	r3, #0
 800874e:	d116      	bne.n	800877e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008754:	e013      	b.n	800877e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008756:	4b4b      	ldr	r3, [pc, #300]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10f      	bne.n	8008782 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008762:	4b48      	ldr	r3, [pc, #288]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008772:	e006      	b.n	8008782 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
      break;
 8008778:	e004      	b.n	8008784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800877a:	bf00      	nop
 800877c:	e002      	b.n	8008784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008782:	bf00      	nop
    }

    if(status == HAL_OK)
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10d      	bne.n	80087a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800878a:	4b3e      	ldr	r3, [pc, #248]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6819      	ldr	r1, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	3b01      	subs	r3, #1
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	430b      	orrs	r3, r1
 80087a0:	4938      	ldr	r1, [pc, #224]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d166      	bne.n	800887a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80087ac:	4b35      	ldr	r3, [pc, #212]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a34      	ldr	r2, [pc, #208]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 80087b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b8:	f7fb fb1a 	bl	8003df0 <HAL_GetTick>
 80087bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80087be:	e009      	b.n	80087d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80087c0:	f7fb fb16 	bl	8003df0 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d902      	bls.n	80087d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	73fb      	strb	r3, [r7, #15]
        break;
 80087d2:	e005      	b.n	80087e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80087d4:	4b2b      	ldr	r3, [pc, #172]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1ef      	bne.n	80087c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d149      	bne.n	800887a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d110      	bne.n	800880e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80087ec:	4b25      	ldr	r3, [pc, #148]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80087f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6892      	ldr	r2, [r2, #8]
 80087fc:	0211      	lsls	r1, r2, #8
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	68d2      	ldr	r2, [r2, #12]
 8008802:	06d2      	lsls	r2, r2, #27
 8008804:	430a      	orrs	r2, r1
 8008806:	491f      	ldr	r1, [pc, #124]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008808:	4313      	orrs	r3, r2
 800880a:	614b      	str	r3, [r1, #20]
 800880c:	e011      	b.n	8008832 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800880e:	4b1d      	ldr	r3, [pc, #116]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008816:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6892      	ldr	r2, [r2, #8]
 800881e:	0211      	lsls	r1, r2, #8
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6912      	ldr	r2, [r2, #16]
 8008824:	0852      	lsrs	r2, r2, #1
 8008826:	3a01      	subs	r2, #1
 8008828:	0652      	lsls	r2, r2, #25
 800882a:	430a      	orrs	r2, r1
 800882c:	4915      	ldr	r1, [pc, #84]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008832:	4b14      	ldr	r3, [pc, #80]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a13      	ldr	r2, [pc, #76]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883e:	f7fb fad7 	bl	8003df0 <HAL_GetTick>
 8008842:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008844:	e009      	b.n	800885a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008846:	f7fb fad3 	bl	8003df0 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d902      	bls.n	800885a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	73fb      	strb	r3, [r7, #15]
          break;
 8008858:	e005      	b.n	8008866 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0ef      	beq.n	8008846 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	4903      	ldr	r1, [pc, #12]	; (8008884 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008876:	4313      	orrs	r3, r2
 8008878:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	40021000 	.word	0x40021000

08008888 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d06c      	beq.n	8008974 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7fa ffe8 	bl	8003884 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	22ca      	movs	r2, #202	; 0xca
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2253      	movs	r2, #83	; 0x53
 80088ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f87c 	bl	80089ca <RTC_EnterInitMode>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d14b      	bne.n	8008974 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ee:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6899      	ldr	r1, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68d2      	ldr	r2, [r2, #12]
 8008916:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6919      	ldr	r1, [r3, #16]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	041a      	lsls	r2, r3, #16
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f87f 	bl	8008a30 <RTC_ExitInitMode>
 8008932:	4603      	mov	r3, r0
 8008934:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d11b      	bne.n	8008974 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0203 	bic.w	r2, r2, #3
 800894a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69da      	ldr	r2, [r3, #28]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	431a      	orrs	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	22ff      	movs	r2, #255	; 0xff
 800896a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008994:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008996:	f7fb fa2b 	bl	8003df0 <HAL_GetTick>
 800899a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800899c:	e009      	b.n	80089b2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800899e:	f7fb fa27 	bl	8003df0 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ac:	d901      	bls.n	80089b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e007      	b.n	80089c2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f003 0320 	and.w	r3, r3, #32
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0ee      	beq.n	800899e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d120      	bne.n	8008a26 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f04f 32ff 	mov.w	r2, #4294967295
 80089ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80089ee:	f7fb f9ff 	bl	8003df0 <HAL_GetTick>
 80089f2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80089f4:	e00d      	b.n	8008a12 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80089f6:	f7fb f9fb 	bl	8003df0 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a04:	d905      	bls.n	8008a12 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <RTC_EnterInitMode+0x5c>
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d1e7      	bne.n	80089f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008a3c:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <RTC_ExitInitMode+0x78>)
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <RTC_ExitInitMode+0x78>)
 8008a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a46:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008a48:	4b17      	ldr	r3, [pc, #92]	; (8008aa8 <RTC_ExitInitMode+0x78>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10c      	bne.n	8008a6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff ff92 	bl	800897e <HAL_RTC_WaitForSynchro>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01e      	beq.n	8008a9e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2203      	movs	r2, #3
 8008a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	73fb      	strb	r3, [r7, #15]
 8008a6c:	e017      	b.n	8008a9e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <RTC_ExitInitMode+0x78>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	4a0d      	ldr	r2, [pc, #52]	; (8008aa8 <RTC_ExitInitMode+0x78>)
 8008a74:	f023 0320 	bic.w	r3, r3, #32
 8008a78:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7ff ff7f 	bl	800897e <HAL_RTC_WaitForSynchro>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <RTC_ExitInitMode+0x78>)
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	4a04      	ldr	r2, [pc, #16]	; (8008aa8 <RTC_ExitInitMode+0x78>)
 8008a98:	f043 0320 	orr.w	r3, r3, #32
 8008a9c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	40002800 	.word	0x40002800

08008aac <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e07f      	b.n	8008bc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	22ca      	movs	r2, #202	; 0xca
 8008adc:	625a      	str	r2, [r3, #36]	; 0x24
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2253      	movs	r2, #83	; 0x53
 8008ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008b06:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d120      	bne.n	8008b58 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8008b16:	f7fb f96b 	bl	8003df0 <HAL_GetTick>
 8008b1a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8008b1c:	e015      	b.n	8008b4a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b1e:	f7fb f967 	bl	8003df0 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b2c:	d90d      	bls.n	8008b4a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	22ff      	movs	r2, #255	; 0xff
 8008b34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e03d      	b.n	8008bc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0e2      	beq.n	8008b1e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f023 0107 	bic.w	r1, r3, #7
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008b74:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a15      	ldr	r2, [pc, #84]	; (8008bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b7e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008b80:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	4a12      	ldr	r2, [pc, #72]	; (8008bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b8a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b9a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008baa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	22ff      	movs	r2, #255	; 0xff
 8008bb2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	40010400 	.word	0x40010400

08008bd4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e04d      	b.n	8008c86 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	22ca      	movs	r2, #202	; 0xca
 8008c00:	625a      	str	r2, [r3, #36]	; 0x24
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2253      	movs	r2, #83	; 0x53
 8008c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c18:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c28:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008c2a:	f7fb f8e1 	bl	8003df0 <HAL_GetTick>
 8008c2e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008c30:	e015      	b.n	8008c5e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c32:	f7fb f8dd 	bl	8003df0 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c40:	d90d      	bls.n	8008c5e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	22ff      	movs	r2, #255	; 0xff
 8008c48:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e013      	b.n	8008c86 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0e2      	beq.n	8008c32 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	22ff      	movs	r2, #255	; 0xff
 8008c72:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e049      	b.n	8008d34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d106      	bne.n	8008cba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7fa fe01 	bl	80038bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4610      	mov	r0, r2
 8008cce:	f000 fab3 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d001      	beq.n	8008d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e04f      	b.n	8008df4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0201 	orr.w	r2, r2, #1
 8008d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a23      	ldr	r2, [pc, #140]	; (8008e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01d      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0x76>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7e:	d018      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0x76>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0x76>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a1e      	ldr	r2, [pc, #120]	; (8008e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00e      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0x76>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a1c      	ldr	r2, [pc, #112]	; (8008e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d009      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0x76>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a1b      	ldr	r2, [pc, #108]	; (8008e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0x76>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a19      	ldr	r2, [pc, #100]	; (8008e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d115      	bne.n	8008dde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8008dba:	4013      	ands	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b06      	cmp	r3, #6
 8008dc2:	d015      	beq.n	8008df0 <HAL_TIM_Base_Start_IT+0xb4>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dca:	d011      	beq.n	8008df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ddc:	e008      	b.n	8008df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0201 	orr.w	r2, r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e000      	b.n	8008df2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	40012c00 	.word	0x40012c00
 8008e04:	40000400 	.word	0x40000400
 8008e08:	40000800 	.word	0x40000800
 8008e0c:	40000c00 	.word	0x40000c00
 8008e10:	40013400 	.word	0x40013400
 8008e14:	40014000 	.word	0x40014000
 8008e18:	00010007 	.word	0x00010007

08008e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d122      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d11b      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0202 	mvn.w	r2, #2
 8008e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f9cb 	bl	80091fa <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f9bd 	bl	80091e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f9ce 	bl	800920e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0304 	and.w	r3, r3, #4
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d122      	bne.n	8008ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d11b      	bne.n	8008ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0204 	mvn.w	r2, #4
 8008e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f9a1 	bl	80091fa <HAL_TIM_IC_CaptureCallback>
 8008eb8:	e005      	b.n	8008ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f993 	bl	80091e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f9a4 	bl	800920e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d122      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d11b      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f06f 0208 	mvn.w	r2, #8
 8008ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2204      	movs	r2, #4
 8008ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f977 	bl	80091fa <HAL_TIM_IC_CaptureCallback>
 8008f0c:	e005      	b.n	8008f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f969 	bl	80091e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f97a 	bl	800920e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 0310 	and.w	r3, r3, #16
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d122      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b10      	cmp	r3, #16
 8008f3a:	d11b      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f06f 0210 	mvn.w	r2, #16
 8008f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2208      	movs	r2, #8
 8008f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f94d 	bl	80091fa <HAL_TIM_IC_CaptureCallback>
 8008f60:	e005      	b.n	8008f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f93f 	bl	80091e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f950 	bl	800920e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d10e      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d107      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f06f 0201 	mvn.w	r2, #1
 8008f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7fa faa2 	bl	80034e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008faa:	2b80      	cmp	r3, #128	; 0x80
 8008fac:	d10e      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb8:	2b80      	cmp	r3, #128	; 0x80
 8008fba:	d107      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fafc 	bl	80095c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fda:	d10e      	bne.n	8008ffa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe6:	2b80      	cmp	r3, #128	; 0x80
 8008fe8:	d107      	bne.n	8008ffa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 faef 	bl	80095d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b40      	cmp	r3, #64	; 0x40
 8009006:	d10e      	bne.n	8009026 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009012:	2b40      	cmp	r3, #64	; 0x40
 8009014:	d107      	bne.n	8009026 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800901e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f8fe 	bl	8009222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b20      	cmp	r3, #32
 8009032:	d10e      	bne.n	8009052 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b20      	cmp	r3, #32
 8009040:	d107      	bne.n	8009052 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f06f 0220 	mvn.w	r2, #32
 800904a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 faaf 	bl	80095b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <HAL_TIM_ConfigClockSource+0x18>
 800906e:	2302      	movs	r3, #2
 8009070:	e0b5      	b.n	80091de <HAL_TIM_ConfigClockSource+0x184>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009090:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009094:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800909c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ae:	d03e      	beq.n	800912e <HAL_TIM_ConfigClockSource+0xd4>
 80090b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b4:	f200 8087 	bhi.w	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090bc:	f000 8085 	beq.w	80091ca <HAL_TIM_ConfigClockSource+0x170>
 80090c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c4:	d87f      	bhi.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090c6:	2b70      	cmp	r3, #112	; 0x70
 80090c8:	d01a      	beq.n	8009100 <HAL_TIM_ConfigClockSource+0xa6>
 80090ca:	2b70      	cmp	r3, #112	; 0x70
 80090cc:	d87b      	bhi.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090ce:	2b60      	cmp	r3, #96	; 0x60
 80090d0:	d050      	beq.n	8009174 <HAL_TIM_ConfigClockSource+0x11a>
 80090d2:	2b60      	cmp	r3, #96	; 0x60
 80090d4:	d877      	bhi.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090d6:	2b50      	cmp	r3, #80	; 0x50
 80090d8:	d03c      	beq.n	8009154 <HAL_TIM_ConfigClockSource+0xfa>
 80090da:	2b50      	cmp	r3, #80	; 0x50
 80090dc:	d873      	bhi.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090de:	2b40      	cmp	r3, #64	; 0x40
 80090e0:	d058      	beq.n	8009194 <HAL_TIM_ConfigClockSource+0x13a>
 80090e2:	2b40      	cmp	r3, #64	; 0x40
 80090e4:	d86f      	bhi.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090e6:	2b30      	cmp	r3, #48	; 0x30
 80090e8:	d064      	beq.n	80091b4 <HAL_TIM_ConfigClockSource+0x15a>
 80090ea:	2b30      	cmp	r3, #48	; 0x30
 80090ec:	d86b      	bhi.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d060      	beq.n	80091b4 <HAL_TIM_ConfigClockSource+0x15a>
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d867      	bhi.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d05c      	beq.n	80091b4 <HAL_TIM_ConfigClockSource+0x15a>
 80090fa:	2b10      	cmp	r3, #16
 80090fc:	d05a      	beq.n	80091b4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80090fe:	e062      	b.n	80091c6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	6899      	ldr	r1, [r3, #8]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f000 f9a6 	bl	8009460 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009122:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	609a      	str	r2, [r3, #8]
      break;
 800912c:	e04e      	b.n	80091cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6899      	ldr	r1, [r3, #8]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f000 f98f 	bl	8009460 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009150:	609a      	str	r2, [r3, #8]
      break;
 8009152:	e03b      	b.n	80091cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	6859      	ldr	r1, [r3, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	461a      	mov	r2, r3
 8009162:	f000 f903 	bl	800936c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2150      	movs	r1, #80	; 0x50
 800916c:	4618      	mov	r0, r3
 800916e:	f000 f95c 	bl	800942a <TIM_ITRx_SetConfig>
      break;
 8009172:	e02b      	b.n	80091cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	6859      	ldr	r1, [r3, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	461a      	mov	r2, r3
 8009182:	f000 f922 	bl	80093ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2160      	movs	r1, #96	; 0x60
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f94c 	bl	800942a <TIM_ITRx_SetConfig>
      break;
 8009192:	e01b      	b.n	80091cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	6859      	ldr	r1, [r3, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	461a      	mov	r2, r3
 80091a2:	f000 f8e3 	bl	800936c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2140      	movs	r1, #64	; 0x40
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f93c 	bl	800942a <TIM_ITRx_SetConfig>
      break;
 80091b2:	e00b      	b.n	80091cc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f000 f933 	bl	800942a <TIM_ITRx_SetConfig>
        break;
 80091c4:	e002      	b.n	80091cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80091c6:	bf00      	nop
 80091c8:	e000      	b.n	80091cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80091ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800922a:	bf00      	nop
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
	...

08009238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a40      	ldr	r2, [pc, #256]	; (800934c <TIM_Base_SetConfig+0x114>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d013      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009256:	d00f      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a3d      	ldr	r2, [pc, #244]	; (8009350 <TIM_Base_SetConfig+0x118>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d00b      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a3c      	ldr	r2, [pc, #240]	; (8009354 <TIM_Base_SetConfig+0x11c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d007      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a3b      	ldr	r2, [pc, #236]	; (8009358 <TIM_Base_SetConfig+0x120>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d003      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a3a      	ldr	r2, [pc, #232]	; (800935c <TIM_Base_SetConfig+0x124>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d108      	bne.n	800928a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a2f      	ldr	r2, [pc, #188]	; (800934c <TIM_Base_SetConfig+0x114>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01f      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009298:	d01b      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a2c      	ldr	r2, [pc, #176]	; (8009350 <TIM_Base_SetConfig+0x118>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d017      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a2b      	ldr	r2, [pc, #172]	; (8009354 <TIM_Base_SetConfig+0x11c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d013      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a2a      	ldr	r2, [pc, #168]	; (8009358 <TIM_Base_SetConfig+0x120>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d00f      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a29      	ldr	r2, [pc, #164]	; (800935c <TIM_Base_SetConfig+0x124>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d00b      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a28      	ldr	r2, [pc, #160]	; (8009360 <TIM_Base_SetConfig+0x128>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d007      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a27      	ldr	r2, [pc, #156]	; (8009364 <TIM_Base_SetConfig+0x12c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d003      	beq.n	80092d2 <TIM_Base_SetConfig+0x9a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a26      	ldr	r2, [pc, #152]	; (8009368 <TIM_Base_SetConfig+0x130>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d108      	bne.n	80092e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a10      	ldr	r2, [pc, #64]	; (800934c <TIM_Base_SetConfig+0x114>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00f      	beq.n	8009330 <TIM_Base_SetConfig+0xf8>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a12      	ldr	r2, [pc, #72]	; (800935c <TIM_Base_SetConfig+0x124>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d00b      	beq.n	8009330 <TIM_Base_SetConfig+0xf8>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a11      	ldr	r2, [pc, #68]	; (8009360 <TIM_Base_SetConfig+0x128>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d007      	beq.n	8009330 <TIM_Base_SetConfig+0xf8>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a10      	ldr	r2, [pc, #64]	; (8009364 <TIM_Base_SetConfig+0x12c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d003      	beq.n	8009330 <TIM_Base_SetConfig+0xf8>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a0f      	ldr	r2, [pc, #60]	; (8009368 <TIM_Base_SetConfig+0x130>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d103      	bne.n	8009338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	615a      	str	r2, [r3, #20]
}
 800933e:	bf00      	nop
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40012c00 	.word	0x40012c00
 8009350:	40000400 	.word	0x40000400
 8009354:	40000800 	.word	0x40000800
 8009358:	40000c00 	.word	0x40000c00
 800935c:	40013400 	.word	0x40013400
 8009360:	40014000 	.word	0x40014000
 8009364:	40014400 	.word	0x40014400
 8009368:	40014800 	.word	0x40014800

0800936c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	f023 0201 	bic.w	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f023 030a 	bic.w	r3, r3, #10
 80093a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b087      	sub	sp, #28
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	f023 0210 	bic.w	r2, r3, #16
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	031b      	lsls	r3, r3, #12
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4313      	orrs	r3, r2
 8009410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	f043 0307 	orr.w	r3, r3, #7
 800944c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	609a      	str	r2, [r3, #8]
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800947a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	021a      	lsls	r2, r3, #8
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	431a      	orrs	r2, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4313      	orrs	r3, r2
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	4313      	orrs	r3, r2
 800948c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	609a      	str	r2, [r3, #8]
}
 8009494:	bf00      	nop
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e068      	b.n	800958a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a2e      	ldr	r2, [pc, #184]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d004      	beq.n	80094ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a2d      	ldr	r2, [pc, #180]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d108      	bne.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	4313      	orrs	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d01d      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952a:	d018      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1b      	ldr	r2, [pc, #108]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d013      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a1a      	ldr	r2, [pc, #104]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00e      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a18      	ldr	r2, [pc, #96]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d009      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a13      	ldr	r2, [pc, #76]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a14      	ldr	r2, [pc, #80]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d10c      	bne.n	8009578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	4313      	orrs	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40012c00 	.word	0x40012c00
 800959c:	40013400 	.word	0x40013400
 80095a0:	40000400 	.word	0x40000400
 80095a4:	40000800 	.word	0x40000800
 80095a8:	40000c00 	.word	0x40000c00
 80095ac:	40014000 	.word	0x40014000

080095b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e040      	b.n	8009680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fa f978 	bl	8003904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2224      	movs	r2, #36	; 0x24
 8009618:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0201 	bic.w	r2, r2, #1
 8009628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb26 	bl	8009c7c <UART_SetConfig>
 8009630:	4603      	mov	r3, r0
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e022      	b.n	8009680 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fda4 	bl	800a190 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689a      	ldr	r2, [r3, #8]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fe2b 	bl	800a2d4 <UART_CheckIdleState>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af02      	add	r7, sp, #8
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	4613      	mov	r3, r2
 8009696:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800969c:	2b20      	cmp	r3, #32
 800969e:	f040 8082 	bne.w	80097a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <HAL_UART_Transmit+0x26>
 80096a8:	88fb      	ldrh	r3, [r7, #6]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e07a      	b.n	80097a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d101      	bne.n	80096c0 <HAL_UART_Transmit+0x38>
 80096bc:	2302      	movs	r3, #2
 80096be:	e073      	b.n	80097a8 <HAL_UART_Transmit+0x120>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2221      	movs	r2, #33	; 0x21
 80096d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096d6:	f7fa fb8b 	bl	8003df0 <HAL_GetTick>
 80096da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	88fa      	ldrh	r2, [r7, #6]
 80096e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	88fa      	ldrh	r2, [r7, #6]
 80096e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f4:	d108      	bne.n	8009708 <HAL_UART_Transmit+0x80>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d104      	bne.n	8009708 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80096fe:	2300      	movs	r3, #0
 8009700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	61bb      	str	r3, [r7, #24]
 8009706:	e003      	b.n	8009710 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800970c:	2300      	movs	r3, #0
 800970e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009718:	e02d      	b.n	8009776 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2200      	movs	r2, #0
 8009722:	2180      	movs	r1, #128	; 0x80
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 fe1e 	bl	800a366 <UART_WaitOnFlagUntilTimeout>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e039      	b.n	80097a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10b      	bne.n	8009752 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	881a      	ldrh	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009746:	b292      	uxth	r2, r2
 8009748:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	3302      	adds	r3, #2
 800974e:	61bb      	str	r3, [r7, #24]
 8009750:	e008      	b.n	8009764 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	781a      	ldrb	r2, [r3, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	b292      	uxth	r2, r2
 800975c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	3301      	adds	r3, #1
 8009762:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800976a:	b29b      	uxth	r3, r3
 800976c:	3b01      	subs	r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800977c:	b29b      	uxth	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1cb      	bne.n	800971a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2200      	movs	r2, #0
 800978a:	2140      	movs	r1, #64	; 0x40
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 fdea 	bl	800a366 <UART_WaitOnFlagUntilTimeout>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e005      	b.n	80097a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2220      	movs	r2, #32
 80097a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e000      	b.n	80097a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80097a6:	2302      	movs	r3, #2
  }
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4613      	mov	r3, r2
 80097bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d131      	bne.n	800982a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_UART_Receive_IT+0x22>
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e02a      	b.n	800982c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_UART_Receive_IT+0x34>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e023      	b.n	800982c <HAL_UART_Receive_IT+0x7c>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a0f      	ldr	r2, [pc, #60]	; (8009834 <HAL_UART_Receive_IT+0x84>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00e      	beq.n	800981a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d007      	beq.n	800981a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009818:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800981a:	88fb      	ldrh	r3, [r7, #6]
 800981c:	461a      	mov	r2, r3
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 fe1d 	bl	800a460 <UART_Start_Receive_IT>
 8009826:	4603      	mov	r3, r0
 8009828:	e000      	b.n	800982c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800982a:	2302      	movs	r3, #2
  }
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	40008000 	.word	0x40008000

08009838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	f640 030f 	movw	r3, #2063	; 0x80f
 800985e:	4013      	ands	r3, r2
 8009860:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d113      	bne.n	8009890 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00e      	beq.n	8009890 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 81ce 	beq.w	8009c22 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
      }
      return;
 800988e:	e1c8      	b.n	8009c22 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80e3 	beq.w	8009a5e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d105      	bne.n	80098ae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	4ba6      	ldr	r3, [pc, #664]	; (8009b40 <HAL_UART_IRQHandler+0x308>)
 80098a6:	4013      	ands	r3, r2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80d8 	beq.w	8009a5e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d010      	beq.n	80098da <HAL_UART_IRQHandler+0xa2>
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2201      	movs	r2, #1
 80098c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098d0:	f043 0201 	orr.w	r2, r3, #1
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d010      	beq.n	8009906 <HAL_UART_IRQHandler+0xce>
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00b      	beq.n	8009906 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2202      	movs	r2, #2
 80098f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098fc:	f043 0204 	orr.w	r2, r3, #4
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b00      	cmp	r3, #0
 800990e:	d010      	beq.n	8009932 <HAL_UART_IRQHandler+0xfa>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00b      	beq.n	8009932 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2204      	movs	r2, #4
 8009920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009928:	f043 0202 	orr.w	r2, r3, #2
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f003 0308 	and.w	r3, r3, #8
 8009938:	2b00      	cmp	r3, #0
 800993a:	d015      	beq.n	8009968 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b00      	cmp	r3, #0
 8009944:	d104      	bne.n	8009950 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00b      	beq.n	8009968 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2208      	movs	r2, #8
 8009956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800995e:	f043 0208 	orr.w	r2, r3, #8
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800996e:	2b00      	cmp	r3, #0
 8009970:	d011      	beq.n	8009996 <HAL_UART_IRQHandler+0x15e>
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00c      	beq.n	8009996 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800998c:	f043 0220 	orr.w	r2, r3, #32
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8142 	beq.w	8009c26 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00c      	beq.n	80099c6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d007      	beq.n	80099c6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d8:	2b40      	cmp	r3, #64	; 0x40
 80099da:	d004      	beq.n	80099e6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d031      	beq.n	8009a4a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fdc2 	bl	800a570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d123      	bne.n	8009a42 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a08:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d013      	beq.n	8009a3a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a16:	4a4b      	ldr	r2, [pc, #300]	; (8009b44 <HAL_UART_IRQHandler+0x30c>)
 8009a18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fb ff43 	bl	80058aa <HAL_DMA_Abort_IT>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d017      	beq.n	8009a5a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009a34:	4610      	mov	r0, r2
 8009a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a38:	e00f      	b.n	8009a5a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f908 	bl	8009c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a40:	e00b      	b.n	8009a5a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f904 	bl	8009c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a48:	e007      	b.n	8009a5a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f900 	bl	8009c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009a58:	e0e5      	b.n	8009c26 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5a:	bf00      	nop
    return;
 8009a5c:	e0e3      	b.n	8009c26 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	f040 80a9 	bne.w	8009bba <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 80a3 	beq.w	8009bba <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 809d 	beq.w	8009bba <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2210      	movs	r2, #16
 8009a86:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a92:	2b40      	cmp	r3, #64	; 0x40
 8009a94:	d158      	bne.n	8009b48 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8009aa0:	893b      	ldrh	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 80c1 	beq.w	8009c2a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009aae:	893a      	ldrh	r2, [r7, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	f080 80ba 	bcs.w	8009c2a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	893a      	ldrh	r2, [r7, #8]
 8009aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d12a      	bne.n	8009b24 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009adc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0201 	bic.w	r2, r2, #1
 8009aec:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009afc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0210 	bic.w	r2, r2, #16
 8009b18:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fb fe85 	bl	800582e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f893 	bl	8009c64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009b3e:	e074      	b.n	8009c2a <HAL_UART_IRQHandler+0x3f2>
 8009b40:	04000120 	.word	0x04000120
 8009b44:	0800a5cf 	.word	0x0800a5cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d063      	beq.n	8009c2e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8009b66:	897b      	ldrh	r3, [r7, #10]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d060      	beq.n	8009c2e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009b7a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689a      	ldr	r2, [r3, #8]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0201 	bic.w	r2, r2, #1
 8009b8a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0210 	bic.w	r2, r2, #16
 8009bac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bae:	897b      	ldrh	r3, [r7, #10]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f856 	bl	8009c64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009bb8:	e039      	b.n	8009c2e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00d      	beq.n	8009be0 <HAL_UART_IRQHandler+0x3a8>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d008      	beq.n	8009be0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fdff 	bl	800a7dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bde:	e029      	b.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00d      	beq.n	8009c06 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d008      	beq.n	8009c06 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01a      	beq.n	8009c32 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	4798      	blx	r3
    }
    return;
 8009c04:	e015      	b.n	8009c32 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d011      	beq.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00c      	beq.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fced 	bl	800a5fa <UART_EndTransmit_IT>
    return;
 8009c20:	e008      	b.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
      return;
 8009c22:	bf00      	nop
 8009c24:	e006      	b.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
    return;
 8009c26:	bf00      	nop
 8009c28:	e004      	b.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
      return;
 8009c2a:	bf00      	nop
 8009c2c:	e002      	b.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
      return;
 8009c2e:	bf00      	nop
 8009c30:	e000      	b.n	8009c34 <HAL_UART_IRQHandler+0x3fc>
    return;
 8009c32:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop

08009c3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c7c:	b5b0      	push	{r4, r5, r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	431a      	orrs	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	4bad      	ldr	r3, [pc, #692]	; (8009f5c <UART_SetConfig+0x2e0>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	6812      	ldr	r2, [r2, #0]
 8009cae:	69f9      	ldr	r1, [r7, #28]
 8009cb0:	430b      	orrs	r3, r1
 8009cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4aa2      	ldr	r2, [pc, #648]	; (8009f60 <UART_SetConfig+0x2e4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d004      	beq.n	8009ce4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a99      	ldr	r2, [pc, #612]	; (8009f64 <UART_SetConfig+0x2e8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d121      	bne.n	8009d46 <UART_SetConfig+0xca>
 8009d02:	4b99      	ldr	r3, [pc, #612]	; (8009f68 <UART_SetConfig+0x2ec>)
 8009d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d817      	bhi.n	8009d40 <UART_SetConfig+0xc4>
 8009d10:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <UART_SetConfig+0x9c>)
 8009d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d16:	bf00      	nop
 8009d18:	08009d29 	.word	0x08009d29
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d2f 	.word	0x08009d2f
 8009d24:	08009d3b 	.word	0x08009d3b
 8009d28:	2301      	movs	r3, #1
 8009d2a:	76fb      	strb	r3, [r7, #27]
 8009d2c:	e0e7      	b.n	8009efe <UART_SetConfig+0x282>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	76fb      	strb	r3, [r7, #27]
 8009d32:	e0e4      	b.n	8009efe <UART_SetConfig+0x282>
 8009d34:	2304      	movs	r3, #4
 8009d36:	76fb      	strb	r3, [r7, #27]
 8009d38:	e0e1      	b.n	8009efe <UART_SetConfig+0x282>
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	76fb      	strb	r3, [r7, #27]
 8009d3e:	e0de      	b.n	8009efe <UART_SetConfig+0x282>
 8009d40:	2310      	movs	r3, #16
 8009d42:	76fb      	strb	r3, [r7, #27]
 8009d44:	e0db      	b.n	8009efe <UART_SetConfig+0x282>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a88      	ldr	r2, [pc, #544]	; (8009f6c <UART_SetConfig+0x2f0>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d132      	bne.n	8009db6 <UART_SetConfig+0x13a>
 8009d50:	4b85      	ldr	r3, [pc, #532]	; (8009f68 <UART_SetConfig+0x2ec>)
 8009d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d56:	f003 030c 	and.w	r3, r3, #12
 8009d5a:	2b0c      	cmp	r3, #12
 8009d5c:	d828      	bhi.n	8009db0 <UART_SetConfig+0x134>
 8009d5e:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <UART_SetConfig+0xe8>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d99 	.word	0x08009d99
 8009d68:	08009db1 	.word	0x08009db1
 8009d6c:	08009db1 	.word	0x08009db1
 8009d70:	08009db1 	.word	0x08009db1
 8009d74:	08009da5 	.word	0x08009da5
 8009d78:	08009db1 	.word	0x08009db1
 8009d7c:	08009db1 	.word	0x08009db1
 8009d80:	08009db1 	.word	0x08009db1
 8009d84:	08009d9f 	.word	0x08009d9f
 8009d88:	08009db1 	.word	0x08009db1
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009dab 	.word	0x08009dab
 8009d98:	2300      	movs	r3, #0
 8009d9a:	76fb      	strb	r3, [r7, #27]
 8009d9c:	e0af      	b.n	8009efe <UART_SetConfig+0x282>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	76fb      	strb	r3, [r7, #27]
 8009da2:	e0ac      	b.n	8009efe <UART_SetConfig+0x282>
 8009da4:	2304      	movs	r3, #4
 8009da6:	76fb      	strb	r3, [r7, #27]
 8009da8:	e0a9      	b.n	8009efe <UART_SetConfig+0x282>
 8009daa:	2308      	movs	r3, #8
 8009dac:	76fb      	strb	r3, [r7, #27]
 8009dae:	e0a6      	b.n	8009efe <UART_SetConfig+0x282>
 8009db0:	2310      	movs	r3, #16
 8009db2:	76fb      	strb	r3, [r7, #27]
 8009db4:	e0a3      	b.n	8009efe <UART_SetConfig+0x282>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a6d      	ldr	r2, [pc, #436]	; (8009f70 <UART_SetConfig+0x2f4>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d120      	bne.n	8009e02 <UART_SetConfig+0x186>
 8009dc0:	4b69      	ldr	r3, [pc, #420]	; (8009f68 <UART_SetConfig+0x2ec>)
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009dca:	2b30      	cmp	r3, #48	; 0x30
 8009dcc:	d013      	beq.n	8009df6 <UART_SetConfig+0x17a>
 8009dce:	2b30      	cmp	r3, #48	; 0x30
 8009dd0:	d814      	bhi.n	8009dfc <UART_SetConfig+0x180>
 8009dd2:	2b20      	cmp	r3, #32
 8009dd4:	d009      	beq.n	8009dea <UART_SetConfig+0x16e>
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d810      	bhi.n	8009dfc <UART_SetConfig+0x180>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <UART_SetConfig+0x168>
 8009dde:	2b10      	cmp	r3, #16
 8009de0:	d006      	beq.n	8009df0 <UART_SetConfig+0x174>
 8009de2:	e00b      	b.n	8009dfc <UART_SetConfig+0x180>
 8009de4:	2300      	movs	r3, #0
 8009de6:	76fb      	strb	r3, [r7, #27]
 8009de8:	e089      	b.n	8009efe <UART_SetConfig+0x282>
 8009dea:	2302      	movs	r3, #2
 8009dec:	76fb      	strb	r3, [r7, #27]
 8009dee:	e086      	b.n	8009efe <UART_SetConfig+0x282>
 8009df0:	2304      	movs	r3, #4
 8009df2:	76fb      	strb	r3, [r7, #27]
 8009df4:	e083      	b.n	8009efe <UART_SetConfig+0x282>
 8009df6:	2308      	movs	r3, #8
 8009df8:	76fb      	strb	r3, [r7, #27]
 8009dfa:	e080      	b.n	8009efe <UART_SetConfig+0x282>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	76fb      	strb	r3, [r7, #27]
 8009e00:	e07d      	b.n	8009efe <UART_SetConfig+0x282>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a5b      	ldr	r2, [pc, #364]	; (8009f74 <UART_SetConfig+0x2f8>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d120      	bne.n	8009e4e <UART_SetConfig+0x1d2>
 8009e0c:	4b56      	ldr	r3, [pc, #344]	; (8009f68 <UART_SetConfig+0x2ec>)
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e16:	2bc0      	cmp	r3, #192	; 0xc0
 8009e18:	d013      	beq.n	8009e42 <UART_SetConfig+0x1c6>
 8009e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8009e1c:	d814      	bhi.n	8009e48 <UART_SetConfig+0x1cc>
 8009e1e:	2b80      	cmp	r3, #128	; 0x80
 8009e20:	d009      	beq.n	8009e36 <UART_SetConfig+0x1ba>
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d810      	bhi.n	8009e48 <UART_SetConfig+0x1cc>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <UART_SetConfig+0x1b4>
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	d006      	beq.n	8009e3c <UART_SetConfig+0x1c0>
 8009e2e:	e00b      	b.n	8009e48 <UART_SetConfig+0x1cc>
 8009e30:	2300      	movs	r3, #0
 8009e32:	76fb      	strb	r3, [r7, #27]
 8009e34:	e063      	b.n	8009efe <UART_SetConfig+0x282>
 8009e36:	2302      	movs	r3, #2
 8009e38:	76fb      	strb	r3, [r7, #27]
 8009e3a:	e060      	b.n	8009efe <UART_SetConfig+0x282>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	76fb      	strb	r3, [r7, #27]
 8009e40:	e05d      	b.n	8009efe <UART_SetConfig+0x282>
 8009e42:	2308      	movs	r3, #8
 8009e44:	76fb      	strb	r3, [r7, #27]
 8009e46:	e05a      	b.n	8009efe <UART_SetConfig+0x282>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	76fb      	strb	r3, [r7, #27]
 8009e4c:	e057      	b.n	8009efe <UART_SetConfig+0x282>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a49      	ldr	r2, [pc, #292]	; (8009f78 <UART_SetConfig+0x2fc>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d125      	bne.n	8009ea4 <UART_SetConfig+0x228>
 8009e58:	4b43      	ldr	r3, [pc, #268]	; (8009f68 <UART_SetConfig+0x2ec>)
 8009e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e66:	d017      	beq.n	8009e98 <UART_SetConfig+0x21c>
 8009e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e6c:	d817      	bhi.n	8009e9e <UART_SetConfig+0x222>
 8009e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e72:	d00b      	beq.n	8009e8c <UART_SetConfig+0x210>
 8009e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e78:	d811      	bhi.n	8009e9e <UART_SetConfig+0x222>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <UART_SetConfig+0x20a>
 8009e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e82:	d006      	beq.n	8009e92 <UART_SetConfig+0x216>
 8009e84:	e00b      	b.n	8009e9e <UART_SetConfig+0x222>
 8009e86:	2300      	movs	r3, #0
 8009e88:	76fb      	strb	r3, [r7, #27]
 8009e8a:	e038      	b.n	8009efe <UART_SetConfig+0x282>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	76fb      	strb	r3, [r7, #27]
 8009e90:	e035      	b.n	8009efe <UART_SetConfig+0x282>
 8009e92:	2304      	movs	r3, #4
 8009e94:	76fb      	strb	r3, [r7, #27]
 8009e96:	e032      	b.n	8009efe <UART_SetConfig+0x282>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	76fb      	strb	r3, [r7, #27]
 8009e9c:	e02f      	b.n	8009efe <UART_SetConfig+0x282>
 8009e9e:	2310      	movs	r3, #16
 8009ea0:	76fb      	strb	r3, [r7, #27]
 8009ea2:	e02c      	b.n	8009efe <UART_SetConfig+0x282>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a2d      	ldr	r2, [pc, #180]	; (8009f60 <UART_SetConfig+0x2e4>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d125      	bne.n	8009efa <UART_SetConfig+0x27e>
 8009eae:	4b2e      	ldr	r3, [pc, #184]	; (8009f68 <UART_SetConfig+0x2ec>)
 8009eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ebc:	d017      	beq.n	8009eee <UART_SetConfig+0x272>
 8009ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ec2:	d817      	bhi.n	8009ef4 <UART_SetConfig+0x278>
 8009ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ec8:	d00b      	beq.n	8009ee2 <UART_SetConfig+0x266>
 8009eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ece:	d811      	bhi.n	8009ef4 <UART_SetConfig+0x278>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d003      	beq.n	8009edc <UART_SetConfig+0x260>
 8009ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ed8:	d006      	beq.n	8009ee8 <UART_SetConfig+0x26c>
 8009eda:	e00b      	b.n	8009ef4 <UART_SetConfig+0x278>
 8009edc:	2300      	movs	r3, #0
 8009ede:	76fb      	strb	r3, [r7, #27]
 8009ee0:	e00d      	b.n	8009efe <UART_SetConfig+0x282>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	76fb      	strb	r3, [r7, #27]
 8009ee6:	e00a      	b.n	8009efe <UART_SetConfig+0x282>
 8009ee8:	2304      	movs	r3, #4
 8009eea:	76fb      	strb	r3, [r7, #27]
 8009eec:	e007      	b.n	8009efe <UART_SetConfig+0x282>
 8009eee:	2308      	movs	r3, #8
 8009ef0:	76fb      	strb	r3, [r7, #27]
 8009ef2:	e004      	b.n	8009efe <UART_SetConfig+0x282>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	76fb      	strb	r3, [r7, #27]
 8009ef8:	e001      	b.n	8009efe <UART_SetConfig+0x282>
 8009efa:	2310      	movs	r3, #16
 8009efc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a17      	ldr	r2, [pc, #92]	; (8009f60 <UART_SetConfig+0x2e4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	f040 8087 	bne.w	800a018 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f0a:	7efb      	ldrb	r3, [r7, #27]
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d837      	bhi.n	8009f80 <UART_SetConfig+0x304>
 8009f10:	a201      	add	r2, pc, #4	; (adr r2, 8009f18 <UART_SetConfig+0x29c>)
 8009f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f16:	bf00      	nop
 8009f18:	08009f3d 	.word	0x08009f3d
 8009f1c:	08009f81 	.word	0x08009f81
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f81 	.word	0x08009f81
 8009f28:	08009f4b 	.word	0x08009f4b
 8009f2c:	08009f81 	.word	0x08009f81
 8009f30:	08009f81 	.word	0x08009f81
 8009f34:	08009f81 	.word	0x08009f81
 8009f38:	08009f53 	.word	0x08009f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f3c:	f7fd ff4e 	bl	8007ddc <HAL_RCC_GetPCLK1Freq>
 8009f40:	6178      	str	r0, [r7, #20]
        break;
 8009f42:	e022      	b.n	8009f8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f44:	4b0d      	ldr	r3, [pc, #52]	; (8009f7c <UART_SetConfig+0x300>)
 8009f46:	617b      	str	r3, [r7, #20]
        break;
 8009f48:	e01f      	b.n	8009f8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f4a:	f7fd feaf 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8009f4e:	6178      	str	r0, [r7, #20]
        break;
 8009f50:	e01b      	b.n	8009f8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f56:	617b      	str	r3, [r7, #20]
        break;
 8009f58:	e017      	b.n	8009f8a <UART_SetConfig+0x30e>
 8009f5a:	bf00      	nop
 8009f5c:	efff69f3 	.word	0xefff69f3
 8009f60:	40008000 	.word	0x40008000
 8009f64:	40013800 	.word	0x40013800
 8009f68:	40021000 	.word	0x40021000
 8009f6c:	40004400 	.word	0x40004400
 8009f70:	40004800 	.word	0x40004800
 8009f74:	40004c00 	.word	0x40004c00
 8009f78:	40005000 	.word	0x40005000
 8009f7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	76bb      	strb	r3, [r7, #26]
        break;
 8009f88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80f1 	beq.w	800a174 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	4613      	mov	r3, r2
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	4413      	add	r3, r2
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d305      	bcc.n	8009fae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d902      	bls.n	8009fb4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	76bb      	strb	r3, [r7, #26]
 8009fb2:	e0df      	b.n	800a174 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f04f 0100 	mov.w	r1, #0
 8009fbc:	f04f 0200 	mov.w	r2, #0
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	020b      	lsls	r3, r1, #8
 8009fc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fca:	0202      	lsls	r2, r0, #8
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	6849      	ldr	r1, [r1, #4]
 8009fd0:	0849      	lsrs	r1, r1, #1
 8009fd2:	4608      	mov	r0, r1
 8009fd4:	f04f 0100 	mov.w	r1, #0
 8009fd8:	1814      	adds	r4, r2, r0
 8009fda:	eb43 0501 	adc.w	r5, r3, r1
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 fe6c 	bl	8000cc8 <__aeabi_uldivmod>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ffe:	d308      	bcc.n	800a012 <UART_SetConfig+0x396>
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a006:	d204      	bcs.n	800a012 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	60da      	str	r2, [r3, #12]
 800a010:	e0b0      	b.n	800a174 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	76bb      	strb	r3, [r7, #26]
 800a016:	e0ad      	b.n	800a174 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a020:	d15c      	bne.n	800a0dc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a022:	7efb      	ldrb	r3, [r7, #27]
 800a024:	2b08      	cmp	r3, #8
 800a026:	d828      	bhi.n	800a07a <UART_SetConfig+0x3fe>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <UART_SetConfig+0x3b4>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a055 	.word	0x0800a055
 800a034:	0800a05d 	.word	0x0800a05d
 800a038:	0800a065 	.word	0x0800a065
 800a03c:	0800a07b 	.word	0x0800a07b
 800a040:	0800a06b 	.word	0x0800a06b
 800a044:	0800a07b 	.word	0x0800a07b
 800a048:	0800a07b 	.word	0x0800a07b
 800a04c:	0800a07b 	.word	0x0800a07b
 800a050:	0800a073 	.word	0x0800a073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a054:	f7fd fec2 	bl	8007ddc <HAL_RCC_GetPCLK1Freq>
 800a058:	6178      	str	r0, [r7, #20]
        break;
 800a05a:	e013      	b.n	800a084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a05c:	f7fd fed4 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 800a060:	6178      	str	r0, [r7, #20]
        break;
 800a062:	e00f      	b.n	800a084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a064:	4b49      	ldr	r3, [pc, #292]	; (800a18c <UART_SetConfig+0x510>)
 800a066:	617b      	str	r3, [r7, #20]
        break;
 800a068:	e00c      	b.n	800a084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a06a:	f7fd fe1f 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800a06e:	6178      	str	r0, [r7, #20]
        break;
 800a070:	e008      	b.n	800a084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a076:	617b      	str	r3, [r7, #20]
        break;
 800a078:	e004      	b.n	800a084 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a07a:	2300      	movs	r3, #0
 800a07c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	76bb      	strb	r3, [r7, #26]
        break;
 800a082:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d074      	beq.n	800a174 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	005a      	lsls	r2, r3, #1
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	441a      	add	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	2b0f      	cmp	r3, #15
 800a0a6:	d916      	bls.n	800a0d6 <UART_SetConfig+0x45a>
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ae:	d212      	bcs.n	800a0d6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f023 030f 	bic.w	r3, r3, #15
 800a0b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	085b      	lsrs	r3, r3, #1
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	89fb      	ldrh	r3, [r7, #14]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	89fa      	ldrh	r2, [r7, #14]
 800a0d2:	60da      	str	r2, [r3, #12]
 800a0d4:	e04e      	b.n	800a174 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	76bb      	strb	r3, [r7, #26]
 800a0da:	e04b      	b.n	800a174 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0dc:	7efb      	ldrb	r3, [r7, #27]
 800a0de:	2b08      	cmp	r3, #8
 800a0e0:	d827      	bhi.n	800a132 <UART_SetConfig+0x4b6>
 800a0e2:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <UART_SetConfig+0x46c>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a10d 	.word	0x0800a10d
 800a0ec:	0800a115 	.word	0x0800a115
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	0800a133 	.word	0x0800a133
 800a0f8:	0800a123 	.word	0x0800a123
 800a0fc:	0800a133 	.word	0x0800a133
 800a100:	0800a133 	.word	0x0800a133
 800a104:	0800a133 	.word	0x0800a133
 800a108:	0800a12b 	.word	0x0800a12b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a10c:	f7fd fe66 	bl	8007ddc <HAL_RCC_GetPCLK1Freq>
 800a110:	6178      	str	r0, [r7, #20]
        break;
 800a112:	e013      	b.n	800a13c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a114:	f7fd fe78 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 800a118:	6178      	str	r0, [r7, #20]
        break;
 800a11a:	e00f      	b.n	800a13c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a11c:	4b1b      	ldr	r3, [pc, #108]	; (800a18c <UART_SetConfig+0x510>)
 800a11e:	617b      	str	r3, [r7, #20]
        break;
 800a120:	e00c      	b.n	800a13c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a122:	f7fd fdc3 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800a126:	6178      	str	r0, [r7, #20]
        break;
 800a128:	e008      	b.n	800a13c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a12a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a12e:	617b      	str	r3, [r7, #20]
        break;
 800a130:	e004      	b.n	800a13c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	76bb      	strb	r3, [r7, #26]
        break;
 800a13a:	bf00      	nop
    }

    if (pclk != 0U)
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d018      	beq.n	800a174 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	085a      	lsrs	r2, r3, #1
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	441a      	add	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	fbb2 f3f3 	udiv	r3, r2, r3
 800a154:	b29b      	uxth	r3, r3
 800a156:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b0f      	cmp	r3, #15
 800a15c:	d908      	bls.n	800a170 <UART_SetConfig+0x4f4>
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a164:	d204      	bcs.n	800a170 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	60da      	str	r2, [r3, #12]
 800a16e:	e001      	b.n	800a174 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a180:	7ebb      	ldrb	r3, [r7, #26]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bdb0      	pop	{r4, r5, r7, pc}
 800a18a:	bf00      	nop
 800a18c:	00f42400 	.word	0x00f42400

0800a190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00a      	beq.n	800a1ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	f003 0304 	and.w	r3, r3, #4
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00a      	beq.n	800a1fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	430a      	orrs	r2, r1
 800a21e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	f003 0310 	and.w	r3, r3, #16
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00a      	beq.n	800a242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01a      	beq.n	800a2a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a28e:	d10a      	bne.n	800a2a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	605a      	str	r2, [r3, #4]
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af02      	add	r7, sp, #8
 800a2da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2e4:	f7f9 fd84 	bl	8003df0 <HAL_GetTick>
 800a2e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0308 	and.w	r3, r3, #8
 800a2f4:	2b08      	cmp	r3, #8
 800a2f6:	d10e      	bne.n	800a316 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f82d 	bl	800a366 <UART_WaitOnFlagUntilTimeout>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e023      	b.n	800a35e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0304 	and.w	r3, r3, #4
 800a320:	2b04      	cmp	r3, #4
 800a322:	d10e      	bne.n	800a342 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f817 	bl	800a366 <UART_WaitOnFlagUntilTimeout>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e00d      	b.n	800a35e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2220      	movs	r2, #32
 800a346:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	4613      	mov	r3, r2
 800a374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a376:	e05e      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37e:	d05a      	beq.n	800a436 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a380:	f7f9 fd36 	bl	8003df0 <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d302      	bcc.n	800a396 <UART_WaitOnFlagUntilTimeout+0x30>
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d11b      	bne.n	800a3ce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0201 	bic.w	r2, r2, #1
 800a3b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2220      	movs	r2, #32
 800a3c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e043      	b.n	800a456 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02c      	beq.n	800a436 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3ea:	d124      	bne.n	800a436 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3f4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a404:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689a      	ldr	r2, [r3, #8]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0201 	bic.w	r2, r2, #1
 800a414:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2220      	movs	r2, #32
 800a41a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2220      	movs	r2, #32
 800a420:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2220      	movs	r2, #32
 800a426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e00f      	b.n	800a456 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	69da      	ldr	r2, [r3, #28]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	4013      	ands	r3, r2
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	429a      	cmp	r2, r3
 800a444:	bf0c      	ite	eq
 800a446:	2301      	moveq	r3, #1
 800a448:	2300      	movne	r3, #0
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	461a      	mov	r2, r3
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	429a      	cmp	r2, r3
 800a452:	d091      	beq.n	800a378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	4613      	mov	r3, r2
 800a46c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	88fa      	ldrh	r2, [r7, #6]
 800a478:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	88fa      	ldrh	r2, [r7, #6]
 800a480:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a492:	d10e      	bne.n	800a4b2 <UART_Start_Receive_IT+0x52>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <UART_Start_Receive_IT+0x48>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a4a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4a6:	e02d      	b.n	800a504 <UART_Start_Receive_IT+0xa4>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	22ff      	movs	r2, #255	; 0xff
 800a4ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4b0:	e028      	b.n	800a504 <UART_Start_Receive_IT+0xa4>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10d      	bne.n	800a4d6 <UART_Start_Receive_IT+0x76>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d104      	bne.n	800a4cc <UART_Start_Receive_IT+0x6c>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	22ff      	movs	r2, #255	; 0xff
 800a4c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4ca:	e01b      	b.n	800a504 <UART_Start_Receive_IT+0xa4>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	227f      	movs	r2, #127	; 0x7f
 800a4d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4d4:	e016      	b.n	800a504 <UART_Start_Receive_IT+0xa4>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4de:	d10d      	bne.n	800a4fc <UART_Start_Receive_IT+0x9c>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <UART_Start_Receive_IT+0x92>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	227f      	movs	r2, #127	; 0x7f
 800a4ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4f0:	e008      	b.n	800a504 <UART_Start_Receive_IT+0xa4>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	223f      	movs	r2, #63	; 0x3f
 800a4f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4fa:	e003      	b.n	800a504 <UART_Start_Receive_IT+0xa4>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2222      	movs	r2, #34	; 0x22
 800a510:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0201 	orr.w	r2, r2, #1
 800a520:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a52a:	d107      	bne.n	800a53c <UART_Start_Receive_IT+0xdc>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d103      	bne.n	800a53c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4a0c      	ldr	r2, [pc, #48]	; (800a568 <UART_Start_Receive_IT+0x108>)
 800a538:	665a      	str	r2, [r3, #100]	; 0x64
 800a53a:	e002      	b.n	800a542 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a0b      	ldr	r2, [pc, #44]	; (800a56c <UART_Start_Receive_IT+0x10c>)
 800a540:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a558:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	0800a705 	.word	0x0800a705
 800a56c:	0800a62d 	.word	0x0800a62d

0800a570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a586:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 0201 	bic.w	r2, r2, #1
 800a596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d107      	bne.n	800a5b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f022 0210 	bic.w	r2, r2, #16
 800a5ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a5c2:	bf00      	nop
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f7ff fb2f 	bl	8009c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5f2:	bf00      	nop
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a610:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fb0c 	bl	8009c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a63a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a640:	2b22      	cmp	r3, #34	; 0x22
 800a642:	d151      	bne.n	800a6e8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a64a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a64c:	89bb      	ldrh	r3, [r7, #12]
 800a64e:	b2d9      	uxtb	r1, r3
 800a650:	89fb      	ldrh	r3, [r7, #14]
 800a652:	b2da      	uxtb	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a658:	400a      	ands	r2, r1
 800a65a:	b2d2      	uxtb	r2, r2
 800a65c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a66e:	b29b      	uxth	r3, r3
 800a670:	3b01      	subs	r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a680:	b29b      	uxth	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d13a      	bne.n	800a6fc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a694:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0201 	bic.w	r2, r2, #1
 800a6a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d10f      	bne.n	800a6da <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f022 0210 	bic.w	r2, r2, #16
 800a6c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fac6 	bl	8009c64 <HAL_UARTEx_RxEventCallback>
 800a6d8:	e002      	b.n	800a6e0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7f8 fe32 	bl	8003344 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6e6:	e009      	b.n	800a6fc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	8b1b      	ldrh	r3, [r3, #24]
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f042 0208 	orr.w	r2, r2, #8
 800a6f8:	b292      	uxth	r2, r2
 800a6fa:	831a      	strh	r2, [r3, #24]
}
 800a6fc:	bf00      	nop
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a712:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a718:	2b22      	cmp	r3, #34	; 0x22
 800a71a:	d151      	bne.n	800a7c0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a722:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a728:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a72a:	89ba      	ldrh	r2, [r7, #12]
 800a72c:	89fb      	ldrh	r3, [r7, #14]
 800a72e:	4013      	ands	r3, r2
 800a730:	b29a      	uxth	r2, r3
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73a:	1c9a      	adds	r2, r3, #2
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a746:	b29b      	uxth	r3, r3
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d13a      	bne.n	800a7d4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a76c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 0201 	bic.w	r2, r2, #1
 800a77c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d10f      	bne.n	800a7b2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0210 	bic.w	r2, r2, #16
 800a7a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fa5a 	bl	8009c64 <HAL_UARTEx_RxEventCallback>
 800a7b0:	e002      	b.n	800a7b8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7f8 fdc6 	bl	8003344 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7be:	e009      	b.n	800a7d4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	8b1b      	ldrh	r3, [r3, #24]
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f042 0208 	orr.w	r2, r2, #8
 800a7d0:	b292      	uxth	r2, r2
 800a7d2:	831a      	strh	r2, [r3, #24]
}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <LL_CRC_ResetCRCCalculationUnit>:
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f043 0201 	orr.w	r2, r3, #1
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	609a      	str	r2, [r3, #8]
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <LL_CRC_SetPolynomialSize>:
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f023 0218 	bic.w	r2, r3, #24
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	431a      	orrs	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	609a      	str	r2, [r3, #8]
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <LL_CRC_SetPolynomialCoef>:
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	615a      	str	r2, [r3, #20]
}
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	601a      	str	r2, [r3, #0]
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 800a86e:	b480      	push	{r7}
 800a870:	b085      	sub	sp, #20
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	460b      	mov	r3, r1
 800a878:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	887a      	ldrh	r2, [r7, #2]
 800a882:	801a      	strh	r2, [r3, #0]
}
 800a884:	bf00      	nop
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	b29b      	uxth	r3, r3
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
	...

0800a8ac <LL_AHB1_GRP1_EnableClock>:
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a8b4:	4b08      	ldr	r3, [pc, #32]	; (800a8d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a8b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8b8:	4907      	ldr	r1, [pc, #28]	; (800a8d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a8c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
}
 800a8cc:	bf00      	nop
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	40021000 	.word	0x40021000

0800a8dc <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b090      	sub	sp, #64	; 0x40
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 800a8e6:	2305      	movs	r3, #5
 800a8e8:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8fe:	2300      	movs	r3, #0
 800a900:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 800a902:	2300      	movs	r3, #0
 800a904:	627b      	str	r3, [r7, #36]	; 0x24
 800a906:	2300      	movs	r3, #0
 800a908:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800a90e:	f04f 0200 	mov.w	r2, #0
 800a912:	f04f 0300 	mov.w	r3, #0
 800a916:	e9c7 2304 	strd	r2, r3, [r7, #16]
  EE_State_Reliability pagestate = STATE_RELIABLE;
 800a91a:	2300      	movs	r3, #0
 800a91c:	76fb      	strb	r3, [r7, #27]
  EE_Status status = EE_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800a922:	f002 fbf1 	bl	800d108 <FI_CheckBankConfig>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 800a92c:	230e      	movs	r3, #14
 800a92e:	f000 bf5e 	b.w	800b7ee <EE_Init+0xf12>

  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */
  ConfigureCrc();
 800a932:	f002 fa05 	bl	800cd40 <ConfigureCrc>
  /***************************************************************************/
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */
  CleanupPhase = 1;
 800a936:	4bb2      	ldr	r3, [pc, #712]	; (800ac00 <EE_Init+0x324>)
 800a938:	2201      	movs	r2, #1
 800a93a:	701a      	strb	r2, [r3, #0]
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a93c:	4bb1      	ldr	r3, [pc, #708]	; (800ac04 <EE_Init+0x328>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	b29b      	uxth	r3, r3
 800a942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a946:	4293      	cmp	r3, r2
 800a948:	d006      	beq.n	800a958 <EE_Init+0x7c>
 800a94a:	4bae      	ldr	r3, [pc, #696]	; (800ac04 <EE_Init+0x328>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	029b      	lsls	r3, r3, #10
 800a950:	085a      	lsrs	r2, r3, #1
 800a952:	4bad      	ldr	r3, [pc, #692]	; (800ac08 <EE_Init+0x32c>)
 800a954:	4013      	ands	r3, r2
 800a956:	e001      	b.n	800a95c <EE_Init+0x80>
 800a958:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a95c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a960:	fbb2 f1f3 	udiv	r1, r2, r3
 800a964:	fb03 f301 	mul.w	r3, r3, r1
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	0adb      	lsrs	r3, r3, #11
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a96e:	e044      	b.n	800a9fa <EE_Init+0x11e>
  {
    pageaddress = PAGE_ADDRESS(page);
 800a970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a972:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a976:	02da      	lsls	r2, r3, #11
 800a978:	4ba2      	ldr	r3, [pc, #648]	; (800ac04 <EE_Init+0x328>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a982:	428b      	cmp	r3, r1
 800a984:	d006      	beq.n	800a994 <EE_Init+0xb8>
 800a986:	4b9f      	ldr	r3, [pc, #636]	; (800ac04 <EE_Init+0x328>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	029b      	lsls	r3, r3, #10
 800a98c:	0859      	lsrs	r1, r3, #1
 800a98e:	4b9e      	ldr	r3, [pc, #632]	; (800ac08 <EE_Init+0x32c>)
 800a990:	400b      	ands	r3, r1
 800a992:	e001      	b.n	800a998 <EE_Init+0xbc>
 800a994:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a998:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a99c:	fbb1 f1f3 	udiv	r1, r1, r3
 800a9a0:	4b98      	ldr	r3, [pc, #608]	; (800ac04 <EE_Init+0x328>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a9aa:	4283      	cmp	r3, r0
 800a9ac:	d006      	beq.n	800a9bc <EE_Init+0xe0>
 800a9ae:	4b95      	ldr	r3, [pc, #596]	; (800ac04 <EE_Init+0x328>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	029b      	lsls	r3, r3, #10
 800a9b4:	0858      	lsrs	r0, r3, #1
 800a9b6:	4b94      	ldr	r3, [pc, #592]	; (800ac08 <EE_Init+0x32c>)
 800a9b8:	4003      	ands	r3, r0
 800a9ba:	e001      	b.n	800a9c0 <EE_Init+0xe4>
 800a9bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9c0:	fb01 f303 	mul.w	r3, r1, r3
 800a9c4:	4413      	add	r3, r2
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a9cc:	e00e      	b.n	800a9ec <EE_Init+0x110>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 800a9ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d2:	4413      	add	r3, r2
 800a9d4:	4a8d      	ldr	r2, [pc, #564]	; (800ac0c <EE_Init+0x330>)
 800a9d6:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 800a9d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9dc:	4413      	add	r3, r2
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9f2:	d3ec      	bcc.n	800a9ce <EE_Init+0xf2>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fa:	4b82      	ldr	r3, [pc, #520]	; (800ac04 <EE_Init+0x328>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d006      	beq.n	800aa16 <EE_Init+0x13a>
 800aa08:	4b7e      	ldr	r3, [pc, #504]	; (800ac04 <EE_Init+0x328>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	029b      	lsls	r3, r3, #10
 800aa0e:	085a      	lsrs	r2, r3, #1
 800aa10:	4b7d      	ldr	r3, [pc, #500]	; (800ac08 <EE_Init+0x32c>)
 800aa12:	4013      	ands	r3, r2
 800aa14:	e001      	b.n	800aa1a <EE_Init+0x13e>
 800aa16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aa1e:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa22:	fb03 f301 	mul.w	r3, r3, r1
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	0adb      	lsrs	r3, r3, #11
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d39e      	bcc.n	800a970 <EE_Init+0x94>
    }
  }
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 800aa32:	4b73      	ldr	r3, [pc, #460]	; (800ac00 <EE_Init+0x324>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	701a      	strb	r2, [r3, #0]
  /* Step 2: Handle case of reset during transfer with no receive page       */
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800aa38:	4b72      	ldr	r3, [pc, #456]	; (800ac04 <EE_Init+0x328>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d006      	beq.n	800aa54 <EE_Init+0x178>
 800aa46:	4b6f      	ldr	r3, [pc, #444]	; (800ac04 <EE_Init+0x328>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	085a      	lsrs	r2, r3, #1
 800aa4e:	4b6e      	ldr	r3, [pc, #440]	; (800ac08 <EE_Init+0x32c>)
 800aa50:	4013      	ands	r3, r2
 800aa52:	e001      	b.n	800aa58 <EE_Init+0x17c>
 800aa54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aa5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa60:	fb03 f301 	mul.w	r3, r3, r1
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	0adb      	lsrs	r3, r3, #11
 800aa68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa6a:	e04a      	b.n	800ab02 <EE_Init+0x226>
  {
    pageaddress = PAGE_ADDRESS(page);
 800aa6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800aa72:	02da      	lsls	r2, r3, #11
 800aa74:	4b63      	ldr	r3, [pc, #396]	; (800ac04 <EE_Init+0x328>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aa7e:	428b      	cmp	r3, r1
 800aa80:	d006      	beq.n	800aa90 <EE_Init+0x1b4>
 800aa82:	4b60      	ldr	r3, [pc, #384]	; (800ac04 <EE_Init+0x328>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	029b      	lsls	r3, r3, #10
 800aa88:	0859      	lsrs	r1, r3, #1
 800aa8a:	4b5f      	ldr	r3, [pc, #380]	; (800ac08 <EE_Init+0x32c>)
 800aa8c:	400b      	ands	r3, r1
 800aa8e:	e001      	b.n	800aa94 <EE_Init+0x1b8>
 800aa90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa98:	fbb1 f1f3 	udiv	r1, r1, r3
 800aa9c:	4b59      	ldr	r3, [pc, #356]	; (800ac04 <EE_Init+0x328>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aaa6:	4283      	cmp	r3, r0
 800aaa8:	d006      	beq.n	800aab8 <EE_Init+0x1dc>
 800aaaa:	4b56      	ldr	r3, [pc, #344]	; (800ac04 <EE_Init+0x328>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	029b      	lsls	r3, r3, #10
 800aab0:	0858      	lsrs	r0, r3, #1
 800aab2:	4b55      	ldr	r3, [pc, #340]	; (800ac08 <EE_Init+0x32c>)
 800aab4:	4003      	ands	r3, r0
 800aab6:	e001      	b.n	800aabc <EE_Init+0x1e0>
 800aab8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aabc:	fb01 f303 	mul.w	r3, r1, r3
 800aac0:	4413      	add	r3, r2
 800aac2:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800aac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aac6:	f002 f8d9 	bl	800cc7c <GetPageState>
 800aaca:	4603      	mov	r3, r0
 800aacc:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 800aace:	7ebb      	ldrb	r3, [r7, #26]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d002      	beq.n	800aada <EE_Init+0x1fe>
 800aad4:	7ebb      	ldrb	r3, [r7, #26]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d103      	bne.n	800aae2 <EE_Init+0x206>
    {
      nbactivereceivepage++;
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	3301      	adds	r3, #1
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aae0:	e00c      	b.n	800aafc <EE_Init+0x220>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 800aae2:	7ebb      	ldrb	r3, [r7, #26]
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d109      	bne.n	800aafc <EE_Init+0x220>
    {
      if (nbvalidpage == 0U)
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <EE_Init+0x216>
      {
        firstvalidpage = page;
 800aaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf0:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 800aaf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	3301      	adds	r3, #1
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800aafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafe:	3301      	adds	r3, #1
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab02:	4b40      	ldr	r3, [pc, #256]	; (800ac04 <EE_Init+0x328>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d006      	beq.n	800ab1e <EE_Init+0x242>
 800ab10:	4b3c      	ldr	r3, [pc, #240]	; (800ac04 <EE_Init+0x328>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	029b      	lsls	r3, r3, #10
 800ab16:	085a      	lsrs	r2, r3, #1
 800ab18:	4b3b      	ldr	r3, [pc, #236]	; (800ac08 <EE_Init+0x32c>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	e001      	b.n	800ab22 <EE_Init+0x246>
 800ab1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ab26:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab2a:	fb03 f301 	mul.w	r3, r3, r1
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	0adb      	lsrs	r3, r3, #11
 800ab32:	3304      	adds	r3, #4
 800ab34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d398      	bcc.n	800aa6c <EE_Init+0x190>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 800ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 80b8 	bne.w	800acb2 <EE_Init+0x3d6>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 800ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 80ae 	beq.w	800aca6 <EE_Init+0x3ca>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 800ab4a:	4b2e      	ldr	r3, [pc, #184]	; (800ac04 <EE_Init+0x328>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d006      	beq.n	800ab66 <EE_Init+0x28a>
 800ab58:	4b2a      	ldr	r3, [pc, #168]	; (800ac04 <EE_Init+0x328>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	029b      	lsls	r3, r3, #10
 800ab5e:	085a      	lsrs	r2, r3, #1
 800ab60:	4b29      	ldr	r3, [pc, #164]	; (800ac08 <EE_Init+0x32c>)
 800ab62:	4013      	ands	r3, r2
 800ab64:	e001      	b.n	800ab6a <EE_Init+0x28e>
 800ab66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ab6e:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab72:	fb03 f301 	mul.w	r3, r3, r1
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	0adb      	lsrs	r3, r3, #11
 800ab7a:	6a3a      	ldr	r2, [r7, #32]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	3303      	adds	r3, #3
 800ab80:	f003 0103 	and.w	r1, r3, #3
 800ab84:	4b1f      	ldr	r3, [pc, #124]	; (800ac04 <EE_Init+0x328>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d006      	beq.n	800aba0 <EE_Init+0x2c4>
 800ab92:	4b1c      	ldr	r3, [pc, #112]	; (800ac04 <EE_Init+0x328>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	029b      	lsls	r3, r3, #10
 800ab98:	085a      	lsrs	r2, r3, #1
 800ab9a:	4b1b      	ldr	r3, [pc, #108]	; (800ac08 <EE_Init+0x32c>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	e001      	b.n	800aba4 <EE_Init+0x2c8>
 800aba0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aba4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aba8:	fbb2 f0f3 	udiv	r0, r2, r3
 800abac:	fb03 f300 	mul.w	r3, r3, r0
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	0adb      	lsrs	r3, r3, #11
 800abb4:	440b      	add	r3, r1
 800abb6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800abba:	02da      	lsls	r2, r3, #11
 800abbc:	4b11      	ldr	r3, [pc, #68]	; (800ac04 <EE_Init+0x328>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800abc6:	428b      	cmp	r3, r1
 800abc8:	d006      	beq.n	800abd8 <EE_Init+0x2fc>
 800abca:	4b0e      	ldr	r3, [pc, #56]	; (800ac04 <EE_Init+0x328>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	029b      	lsls	r3, r3, #10
 800abd0:	0859      	lsrs	r1, r3, #1
 800abd2:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <EE_Init+0x32c>)
 800abd4:	400b      	ands	r3, r1
 800abd6:	e001      	b.n	800abdc <EE_Init+0x300>
 800abd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800abdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800abe0:	fbb1 f1f3 	udiv	r1, r1, r3
 800abe4:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <EE_Init+0x328>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800abee:	4283      	cmp	r3, r0
 800abf0:	d00e      	beq.n	800ac10 <EE_Init+0x334>
 800abf2:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <EE_Init+0x328>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	029b      	lsls	r3, r3, #10
 800abf8:	0858      	lsrs	r0, r3, #1
 800abfa:	4b03      	ldr	r3, [pc, #12]	; (800ac08 <EE_Init+0x32c>)
 800abfc:	4003      	ands	r3, r0
 800abfe:	e009      	b.n	800ac14 <EE_Init+0x338>
 800ac00:	20000258 	.word	0x20000258
 800ac04:	1fff75e0 	.word	0x1fff75e0
 800ac08:	01fffe00 	.word	0x01fffe00
 800ac0c:	20000254 	.word	0x20000254
 800ac10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac14:	fb01 f303 	mul.w	r3, r1, r3
 800ac18:	4413      	add	r3, r2
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f002 f82e 	bl	800cc7c <GetPageState>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d145      	bne.n	800acb2 <EE_Init+0x3d6>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 800ac26:	4bb2      	ldr	r3, [pc, #712]	; (800aef0 <EE_Init+0x614>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d006      	beq.n	800ac42 <EE_Init+0x366>
 800ac34:	4bae      	ldr	r3, [pc, #696]	; (800aef0 <EE_Init+0x614>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	029b      	lsls	r3, r3, #10
 800ac3a:	085a      	lsrs	r2, r3, #1
 800ac3c:	4bad      	ldr	r3, [pc, #692]	; (800aef4 <EE_Init+0x618>)
 800ac3e:	4013      	ands	r3, r2
 800ac40:	e001      	b.n	800ac46 <EE_Init+0x36a>
 800ac42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ac4a:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac4e:	fb03 f301 	mul.w	r3, r3, r1
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	0adb      	lsrs	r3, r3, #11
 800ac56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	f003 0103 	and.w	r1, r3, #3
 800ac60:	4ba3      	ldr	r3, [pc, #652]	; (800aef0 <EE_Init+0x614>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d006      	beq.n	800ac7c <EE_Init+0x3a0>
 800ac6e:	4ba0      	ldr	r3, [pc, #640]	; (800aef0 <EE_Init+0x614>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	029b      	lsls	r3, r3, #10
 800ac74:	085a      	lsrs	r2, r3, #1
 800ac76:	4b9f      	ldr	r3, [pc, #636]	; (800aef4 <EE_Init+0x618>)
 800ac78:	4013      	ands	r3, r2
 800ac7a:	e001      	b.n	800ac80 <EE_Init+0x3a4>
 800ac7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ac84:	fbb2 f0f3 	udiv	r0, r2, r3
 800ac88:	fb03 f300 	mul.w	r3, r3, r0
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	0adb      	lsrs	r3, r3, #11
 800ac90:	440b      	add	r3, r1
 800ac92:	2101      	movs	r1, #1
 800ac94:	4618      	mov	r0, r3
 800ac96:	f001 fed7 	bl	800ca48 <SetPageState>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d008      	beq.n	800acb2 <EE_Init+0x3d6>
        {
          return EE_WRITE_ERROR;
 800aca0:	2302      	movs	r3, #2
 800aca2:	f000 bda4 	b.w	800b7ee <EE_Init+0xf12>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 800aca6:	2000      	movs	r0, #0
 800aca8:	f000 fda6 	bl	800b7f8 <EE_Format>
 800acac:	4603      	mov	r3, r0
 800acae:	f000 bd9e 	b.w	800b7ee <EE_Init+0xf12>
  /*********************************************************************/
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/
  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800acb2:	4b8f      	ldr	r3, [pc, #572]	; (800aef0 <EE_Init+0x614>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d006      	beq.n	800acce <EE_Init+0x3f2>
 800acc0:	4b8b      	ldr	r3, [pc, #556]	; (800aef0 <EE_Init+0x614>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	029b      	lsls	r3, r3, #10
 800acc6:	085a      	lsrs	r2, r3, #1
 800acc8:	4b8a      	ldr	r3, [pc, #552]	; (800aef4 <EE_Init+0x618>)
 800acca:	4013      	ands	r3, r2
 800accc:	e001      	b.n	800acd2 <EE_Init+0x3f6>
 800acce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800acd6:	fbb2 f1f3 	udiv	r1, r2, r3
 800acda:	fb03 f301 	mul.w	r3, r3, r1
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	0adb      	lsrs	r3, r3, #11
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace4:	e161      	b.n	800afaa <EE_Init+0x6ce>
  {
    pageaddress = PAGE_ADDRESS(page);
 800ace6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800acec:	02da      	lsls	r2, r3, #11
 800acee:	4b80      	ldr	r3, [pc, #512]	; (800aef0 <EE_Init+0x614>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800acf8:	428b      	cmp	r3, r1
 800acfa:	d006      	beq.n	800ad0a <EE_Init+0x42e>
 800acfc:	4b7c      	ldr	r3, [pc, #496]	; (800aef0 <EE_Init+0x614>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	029b      	lsls	r3, r3, #10
 800ad02:	0859      	lsrs	r1, r3, #1
 800ad04:	4b7b      	ldr	r3, [pc, #492]	; (800aef4 <EE_Init+0x618>)
 800ad06:	400b      	ands	r3, r1
 800ad08:	e001      	b.n	800ad0e <EE_Init+0x432>
 800ad0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad0e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ad12:	fbb1 f1f3 	udiv	r1, r1, r3
 800ad16:	4b76      	ldr	r3, [pc, #472]	; (800aef0 <EE_Init+0x614>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ad20:	4283      	cmp	r3, r0
 800ad22:	d006      	beq.n	800ad32 <EE_Init+0x456>
 800ad24:	4b72      	ldr	r3, [pc, #456]	; (800aef0 <EE_Init+0x614>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	029b      	lsls	r3, r3, #10
 800ad2a:	0858      	lsrs	r0, r3, #1
 800ad2c:	4b71      	ldr	r3, [pc, #452]	; (800aef4 <EE_Init+0x618>)
 800ad2e:	4003      	ands	r3, r0
 800ad30:	e001      	b.n	800ad36 <EE_Init+0x45a>
 800ad32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad36:	fb01 f303 	mul.w	r3, r1, r3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800ad3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad40:	f001 ff9c 	bl	800cc7c <GetPageState>
 800ad44:	4603      	mov	r3, r0
 800ad46:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 800ad48:	7ebb      	ldrb	r3, [r7, #26]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	f040 812a 	bne.w	800afa4 <EE_Init+0x6c8>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800ad50:	4b67      	ldr	r3, [pc, #412]	; (800aef0 <EE_Init+0x614>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d006      	beq.n	800ad6c <EE_Init+0x490>
 800ad5e:	4b64      	ldr	r3, [pc, #400]	; (800aef0 <EE_Init+0x614>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	029b      	lsls	r3, r3, #10
 800ad64:	085a      	lsrs	r2, r3, #1
 800ad66:	4b63      	ldr	r3, [pc, #396]	; (800aef4 <EE_Init+0x618>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	e001      	b.n	800ad70 <EE_Init+0x494>
 800ad6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ad74:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad78:	fb03 f301 	mul.w	r3, r3, r1
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	0adb      	lsrs	r3, r3, #11
 800ad80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad82:	429a      	cmp	r2, r3
 800ad84:	f000 8088 	beq.w	800ae98 <EE_Init+0x5bc>
 800ad88:	4b59      	ldr	r3, [pc, #356]	; (800aef0 <EE_Init+0x614>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d006      	beq.n	800ada4 <EE_Init+0x4c8>
 800ad96:	4b56      	ldr	r3, [pc, #344]	; (800aef0 <EE_Init+0x614>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	029b      	lsls	r3, r3, #10
 800ad9c:	085a      	lsrs	r2, r3, #1
 800ad9e:	4b55      	ldr	r3, [pc, #340]	; (800aef4 <EE_Init+0x618>)
 800ada0:	4013      	ands	r3, r2
 800ada2:	e001      	b.n	800ada8 <EE_Init+0x4cc>
 800ada4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ada8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800adac:	fbb2 f1f3 	udiv	r1, r2, r3
 800adb0:	fb03 f301 	mul.w	r3, r3, r1
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	0adb      	lsrs	r3, r3, #11
 800adb8:	3302      	adds	r3, #2
 800adba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d06b      	beq.n	800ae98 <EE_Init+0x5bc>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800adc0:	4b4b      	ldr	r3, [pc, #300]	; (800aef0 <EE_Init+0x614>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adca:	4293      	cmp	r3, r2
 800adcc:	d006      	beq.n	800addc <EE_Init+0x500>
 800adce:	4b48      	ldr	r3, [pc, #288]	; (800aef0 <EE_Init+0x614>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	029b      	lsls	r3, r3, #10
 800add4:	085a      	lsrs	r2, r3, #1
 800add6:	4b47      	ldr	r3, [pc, #284]	; (800aef4 <EE_Init+0x618>)
 800add8:	4013      	ands	r3, r2
 800adda:	e001      	b.n	800ade0 <EE_Init+0x504>
 800addc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ade0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ade4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ade8:	fb03 f301 	mul.w	r3, r3, r1
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	0adb      	lsrs	r3, r3, #11
 800adf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	3303      	adds	r3, #3
 800adf6:	f003 0103 	and.w	r1, r3, #3
 800adfa:	4b3d      	ldr	r3, [pc, #244]	; (800aef0 <EE_Init+0x614>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d006      	beq.n	800ae16 <EE_Init+0x53a>
 800ae08:	4b39      	ldr	r3, [pc, #228]	; (800aef0 <EE_Init+0x614>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	029b      	lsls	r3, r3, #10
 800ae0e:	085a      	lsrs	r2, r3, #1
 800ae10:	4b38      	ldr	r3, [pc, #224]	; (800aef4 <EE_Init+0x618>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	e001      	b.n	800ae1a <EE_Init+0x53e>
 800ae16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ae1e:	fbb2 f0f3 	udiv	r0, r2, r3
 800ae22:	fb03 f300 	mul.w	r3, r3, r0
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	0adb      	lsrs	r3, r3, #11
 800ae2a:	440b      	add	r3, r1
 800ae2c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ae30:	02da      	lsls	r2, r3, #11
 800ae32:	4b2f      	ldr	r3, [pc, #188]	; (800aef0 <EE_Init+0x614>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae3c:	428b      	cmp	r3, r1
 800ae3e:	d006      	beq.n	800ae4e <EE_Init+0x572>
 800ae40:	4b2b      	ldr	r3, [pc, #172]	; (800aef0 <EE_Init+0x614>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	029b      	lsls	r3, r3, #10
 800ae46:	0859      	lsrs	r1, r3, #1
 800ae48:	4b2a      	ldr	r3, [pc, #168]	; (800aef4 <EE_Init+0x618>)
 800ae4a:	400b      	ands	r3, r1
 800ae4c:	e001      	b.n	800ae52 <EE_Init+0x576>
 800ae4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae52:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ae56:	fbb1 f1f3 	udiv	r1, r1, r3
 800ae5a:	4b25      	ldr	r3, [pc, #148]	; (800aef0 <EE_Init+0x614>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ae64:	4283      	cmp	r3, r0
 800ae66:	d006      	beq.n	800ae76 <EE_Init+0x59a>
 800ae68:	4b21      	ldr	r3, [pc, #132]	; (800aef0 <EE_Init+0x614>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	029b      	lsls	r3, r3, #10
 800ae6e:	0858      	lsrs	r0, r3, #1
 800ae70:	4b20      	ldr	r3, [pc, #128]	; (800aef4 <EE_Init+0x618>)
 800ae72:	4003      	ands	r3, r0
 800ae74:	e001      	b.n	800ae7a <EE_Init+0x59e>
 800ae76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae7a:	fb01 f303 	mul.w	r3, r1, r3
 800ae7e:	4413      	add	r3, r2
 800ae80:	4618      	mov	r0, r3
 800ae82:	f001 fefb 	bl	800cc7c <GetPageState>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d102      	bne.n	800ae92 <EE_Init+0x5b6>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800ae90:	e072      	b.n	800af78 <EE_Init+0x69c>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800ae92:	2301      	movs	r3, #1
 800ae94:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800ae96:	e06f      	b.n	800af78 <EE_Init+0x69c>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800ae98:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <EE_Init+0x614>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d006      	beq.n	800aeb4 <EE_Init+0x5d8>
 800aea6:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <EE_Init+0x614>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	029b      	lsls	r3, r3, #10
 800aeac:	085a      	lsrs	r2, r3, #1
 800aeae:	4b11      	ldr	r3, [pc, #68]	; (800aef4 <EE_Init+0x618>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	e001      	b.n	800aeb8 <EE_Init+0x5dc>
 800aeb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aeb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aebc:	fbb2 f1f3 	udiv	r1, r2, r3
 800aec0:	fb03 f301 	mul.w	r3, r3, r1
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	0adb      	lsrs	r3, r3, #11
 800aec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	3301      	adds	r3, #1
 800aece:	f003 0103 	and.w	r1, r3, #3
 800aed2:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <EE_Init+0x614>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00b      	beq.n	800aef8 <EE_Init+0x61c>
 800aee0:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <EE_Init+0x614>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	029b      	lsls	r3, r3, #10
 800aee6:	085a      	lsrs	r2, r3, #1
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <EE_Init+0x618>)
 800aeea:	4013      	ands	r3, r2
 800aeec:	e006      	b.n	800aefc <EE_Init+0x620>
 800aeee:	bf00      	nop
 800aef0:	1fff75e0 	.word	0x1fff75e0
 800aef4:	01fffe00 	.word	0x01fffe00
 800aef8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aefc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800af00:	fbb2 f0f3 	udiv	r0, r2, r3
 800af04:	fb03 f300 	mul.w	r3, r3, r0
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	0adb      	lsrs	r3, r3, #11
 800af0c:	440b      	add	r3, r1
 800af0e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800af12:	02da      	lsls	r2, r3, #11
 800af14:	4bb5      	ldr	r3, [pc, #724]	; (800b1ec <EE_Init+0x910>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af1e:	428b      	cmp	r3, r1
 800af20:	d006      	beq.n	800af30 <EE_Init+0x654>
 800af22:	4bb2      	ldr	r3, [pc, #712]	; (800b1ec <EE_Init+0x910>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	029b      	lsls	r3, r3, #10
 800af28:	0859      	lsrs	r1, r3, #1
 800af2a:	4bb1      	ldr	r3, [pc, #708]	; (800b1f0 <EE_Init+0x914>)
 800af2c:	400b      	ands	r3, r1
 800af2e:	e001      	b.n	800af34 <EE_Init+0x658>
 800af30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af38:	fbb1 f1f3 	udiv	r1, r1, r3
 800af3c:	4bab      	ldr	r3, [pc, #684]	; (800b1ec <EE_Init+0x910>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	b29b      	uxth	r3, r3
 800af42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800af46:	4283      	cmp	r3, r0
 800af48:	d006      	beq.n	800af58 <EE_Init+0x67c>
 800af4a:	4ba8      	ldr	r3, [pc, #672]	; (800b1ec <EE_Init+0x910>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	029b      	lsls	r3, r3, #10
 800af50:	0858      	lsrs	r0, r3, #1
 800af52:	4ba7      	ldr	r3, [pc, #668]	; (800b1f0 <EE_Init+0x914>)
 800af54:	4003      	ands	r3, r0
 800af56:	e001      	b.n	800af5c <EE_Init+0x680>
 800af58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af5c:	fb01 f303 	mul.w	r3, r1, r3
 800af60:	4413      	add	r3, r2
 800af62:	4618      	mov	r0, r3
 800af64:	f001 fe8a 	bl	800cc7c <GetPageState>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d102      	bne.n	800af74 <EE_Init+0x698>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800af6e:	2300      	movs	r3, #0
 800af70:	76fb      	strb	r3, [r7, #27]
 800af72:	e001      	b.n	800af78 <EE_Init+0x69c>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800af74:	2301      	movs	r3, #1
 800af76:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 800af78:	7efb      	ldrb	r3, [r7, #27]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d112      	bne.n	800afa4 <EE_Init+0x6c8>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 800af7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af80:	b2da      	uxtb	r2, r3
 800af82:	4b9c      	ldr	r3, [pc, #624]	; (800b1f4 <EE_Init+0x918>)
 800af84:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 800af86:	2201      	movs	r2, #1
 800af88:	2100      	movs	r1, #0
 800af8a:	2000      	movs	r0, #0
 800af8c:	f001 f9d4 	bl	800c338 <PagesTransfer>
 800af90:	4603      	mov	r3, r0
 800af92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af96:	d002      	beq.n	800af9e <EE_Init+0x6c2>
        {
          return EE_TRANSFER_ERROR;
 800af98:	230c      	movs	r3, #12
 800af9a:	f000 bc28 	b.w	800b7ee <EE_Init+0xf12>
        }

        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 800af9e:	2301      	movs	r3, #1
 800afa0:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 800afa2:	e01f      	b.n	800afe4 <EE_Init+0x708>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800afa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa6:	3301      	adds	r3, #1
 800afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afaa:	4b90      	ldr	r3, [pc, #576]	; (800b1ec <EE_Init+0x910>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d006      	beq.n	800afc6 <EE_Init+0x6ea>
 800afb8:	4b8c      	ldr	r3, [pc, #560]	; (800b1ec <EE_Init+0x910>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	029b      	lsls	r3, r3, #10
 800afbe:	085a      	lsrs	r2, r3, #1
 800afc0:	4b8b      	ldr	r3, [pc, #556]	; (800b1f0 <EE_Init+0x914>)
 800afc2:	4013      	ands	r3, r2
 800afc4:	e001      	b.n	800afca <EE_Init+0x6ee>
 800afc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800afce:	fbb2 f1f3 	udiv	r1, r2, r3
 800afd2:	fb03 f301 	mul.w	r3, r3, r1
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	0adb      	lsrs	r3, r3, #11
 800afda:	3304      	adds	r3, #4
 800afdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800afde:	429a      	cmp	r2, r3
 800afe0:	f4ff ae81 	bcc.w	800ace6 <EE_Init+0x40a>
  /* Step 4: Verify presence of one unique active page                 */
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/
  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800afe8:	4b80      	ldr	r3, [pc, #512]	; (800b1ec <EE_Init+0x910>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	b29b      	uxth	r3, r3
 800afee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d006      	beq.n	800b004 <EE_Init+0x728>
 800aff6:	4b7d      	ldr	r3, [pc, #500]	; (800b1ec <EE_Init+0x910>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	029b      	lsls	r3, r3, #10
 800affc:	085a      	lsrs	r2, r3, #1
 800affe:	4b7c      	ldr	r3, [pc, #496]	; (800b1f0 <EE_Init+0x914>)
 800b000:	4013      	ands	r3, r2
 800b002:	e001      	b.n	800b008 <EE_Init+0x72c>
 800b004:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b008:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b00c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b010:	fb03 f301 	mul.w	r3, r3, r1
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	0adb      	lsrs	r3, r3, #11
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b01a:	e162      	b.n	800b2e2 <EE_Init+0xa06>
  {
    pageaddress = PAGE_ADDRESS(page);
 800b01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b022:	02da      	lsls	r2, r3, #11
 800b024:	4b71      	ldr	r3, [pc, #452]	; (800b1ec <EE_Init+0x910>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b02e:	428b      	cmp	r3, r1
 800b030:	d006      	beq.n	800b040 <EE_Init+0x764>
 800b032:	4b6e      	ldr	r3, [pc, #440]	; (800b1ec <EE_Init+0x910>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	029b      	lsls	r3, r3, #10
 800b038:	0859      	lsrs	r1, r3, #1
 800b03a:	4b6d      	ldr	r3, [pc, #436]	; (800b1f0 <EE_Init+0x914>)
 800b03c:	400b      	ands	r3, r1
 800b03e:	e001      	b.n	800b044 <EE_Init+0x768>
 800b040:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b044:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b048:	fbb1 f1f3 	udiv	r1, r1, r3
 800b04c:	4b67      	ldr	r3, [pc, #412]	; (800b1ec <EE_Init+0x910>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	b29b      	uxth	r3, r3
 800b052:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b056:	4283      	cmp	r3, r0
 800b058:	d006      	beq.n	800b068 <EE_Init+0x78c>
 800b05a:	4b64      	ldr	r3, [pc, #400]	; (800b1ec <EE_Init+0x910>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	029b      	lsls	r3, r3, #10
 800b060:	0858      	lsrs	r0, r3, #1
 800b062:	4b63      	ldr	r3, [pc, #396]	; (800b1f0 <EE_Init+0x914>)
 800b064:	4003      	ands	r3, r0
 800b066:	e001      	b.n	800b06c <EE_Init+0x790>
 800b068:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b06c:	fb01 f303 	mul.w	r3, r1, r3
 800b070:	4413      	add	r3, r2
 800b072:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800b074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b076:	f001 fe01 	bl	800cc7c <GetPageState>
 800b07a:	4603      	mov	r3, r0
 800b07c:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800b07e:	7ebb      	ldrb	r3, [r7, #26]
 800b080:	2b02      	cmp	r3, #2
 800b082:	f040 8126 	bne.w	800b2d2 <EE_Init+0x9f6>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800b086:	4b59      	ldr	r3, [pc, #356]	; (800b1ec <EE_Init+0x910>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b090:	4293      	cmp	r3, r2
 800b092:	d006      	beq.n	800b0a2 <EE_Init+0x7c6>
 800b094:	4b55      	ldr	r3, [pc, #340]	; (800b1ec <EE_Init+0x910>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	029b      	lsls	r3, r3, #10
 800b09a:	085a      	lsrs	r2, r3, #1
 800b09c:	4b54      	ldr	r3, [pc, #336]	; (800b1f0 <EE_Init+0x914>)
 800b09e:	4013      	ands	r3, r2
 800b0a0:	e001      	b.n	800b0a6 <EE_Init+0x7ca>
 800b0a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0aa:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0ae:	fb03 f301 	mul.w	r3, r3, r1
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	0adb      	lsrs	r3, r3, #11
 800b0b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	f000 8088 	beq.w	800b1ce <EE_Init+0x8f2>
 800b0be:	4b4b      	ldr	r3, [pc, #300]	; (800b1ec <EE_Init+0x910>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d006      	beq.n	800b0da <EE_Init+0x7fe>
 800b0cc:	4b47      	ldr	r3, [pc, #284]	; (800b1ec <EE_Init+0x910>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	029b      	lsls	r3, r3, #10
 800b0d2:	085a      	lsrs	r2, r3, #1
 800b0d4:	4b46      	ldr	r3, [pc, #280]	; (800b1f0 <EE_Init+0x914>)
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	e001      	b.n	800b0de <EE_Init+0x802>
 800b0da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0e2:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0e6:	fb03 f301 	mul.w	r3, r3, r1
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	0adb      	lsrs	r3, r3, #11
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d06b      	beq.n	800b1ce <EE_Init+0x8f2>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800b0f6:	4b3d      	ldr	r3, [pc, #244]	; (800b1ec <EE_Init+0x910>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b100:	4293      	cmp	r3, r2
 800b102:	d006      	beq.n	800b112 <EE_Init+0x836>
 800b104:	4b39      	ldr	r3, [pc, #228]	; (800b1ec <EE_Init+0x910>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	029b      	lsls	r3, r3, #10
 800b10a:	085a      	lsrs	r2, r3, #1
 800b10c:	4b38      	ldr	r3, [pc, #224]	; (800b1f0 <EE_Init+0x914>)
 800b10e:	4013      	ands	r3, r2
 800b110:	e001      	b.n	800b116 <EE_Init+0x83a>
 800b112:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b116:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b11a:	fbb2 f1f3 	udiv	r1, r2, r3
 800b11e:	fb03 f301 	mul.w	r3, r3, r1
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	0adb      	lsrs	r3, r3, #11
 800b126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	3303      	adds	r3, #3
 800b12c:	f003 0103 	and.w	r1, r3, #3
 800b130:	4b2e      	ldr	r3, [pc, #184]	; (800b1ec <EE_Init+0x910>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	b29b      	uxth	r3, r3
 800b136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d006      	beq.n	800b14c <EE_Init+0x870>
 800b13e:	4b2b      	ldr	r3, [pc, #172]	; (800b1ec <EE_Init+0x910>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	029b      	lsls	r3, r3, #10
 800b144:	085a      	lsrs	r2, r3, #1
 800b146:	4b2a      	ldr	r3, [pc, #168]	; (800b1f0 <EE_Init+0x914>)
 800b148:	4013      	ands	r3, r2
 800b14a:	e001      	b.n	800b150 <EE_Init+0x874>
 800b14c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b150:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b154:	fbb2 f0f3 	udiv	r0, r2, r3
 800b158:	fb03 f300 	mul.w	r3, r3, r0
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	0adb      	lsrs	r3, r3, #11
 800b160:	440b      	add	r3, r1
 800b162:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b166:	02da      	lsls	r2, r3, #11
 800b168:	4b20      	ldr	r3, [pc, #128]	; (800b1ec <EE_Init+0x910>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b172:	428b      	cmp	r3, r1
 800b174:	d006      	beq.n	800b184 <EE_Init+0x8a8>
 800b176:	4b1d      	ldr	r3, [pc, #116]	; (800b1ec <EE_Init+0x910>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	029b      	lsls	r3, r3, #10
 800b17c:	0859      	lsrs	r1, r3, #1
 800b17e:	4b1c      	ldr	r3, [pc, #112]	; (800b1f0 <EE_Init+0x914>)
 800b180:	400b      	ands	r3, r1
 800b182:	e001      	b.n	800b188 <EE_Init+0x8ac>
 800b184:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b188:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b18c:	fbb1 f1f3 	udiv	r1, r1, r3
 800b190:	4b16      	ldr	r3, [pc, #88]	; (800b1ec <EE_Init+0x910>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	b29b      	uxth	r3, r3
 800b196:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b19a:	4283      	cmp	r3, r0
 800b19c:	d006      	beq.n	800b1ac <EE_Init+0x8d0>
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <EE_Init+0x910>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	029b      	lsls	r3, r3, #10
 800b1a4:	0858      	lsrs	r0, r3, #1
 800b1a6:	4b12      	ldr	r3, [pc, #72]	; (800b1f0 <EE_Init+0x914>)
 800b1a8:	4003      	ands	r3, r0
 800b1aa:	e001      	b.n	800b1b0 <EE_Init+0x8d4>
 800b1ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1b0:	fb01 f303 	mul.w	r3, r1, r3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f001 fd60 	bl	800cc7c <GetPageState>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d102      	bne.n	800b1c8 <EE_Init+0x8ec>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800b1c6:	e074      	b.n	800b2b2 <EE_Init+0x9d6>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800b1cc:	e071      	b.n	800b2b2 <EE_Init+0x9d6>
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800b1ce:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <EE_Init+0x910>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00d      	beq.n	800b1f8 <EE_Init+0x91c>
 800b1dc:	4b03      	ldr	r3, [pc, #12]	; (800b1ec <EE_Init+0x910>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	029b      	lsls	r3, r3, #10
 800b1e2:	085a      	lsrs	r2, r3, #1
 800b1e4:	4b02      	ldr	r3, [pc, #8]	; (800b1f0 <EE_Init+0x914>)
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	e008      	b.n	800b1fc <EE_Init+0x920>
 800b1ea:	bf00      	nop
 800b1ec:	1fff75e0 	.word	0x1fff75e0
 800b1f0:	01fffe00 	.word	0x01fffe00
 800b1f4:	20000252 	.word	0x20000252
 800b1f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b200:	fbb2 f1f3 	udiv	r1, r2, r3
 800b204:	fb03 f301 	mul.w	r3, r3, r1
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	0adb      	lsrs	r3, r3, #11
 800b20c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	3301      	adds	r3, #1
 800b212:	f003 0103 	and.w	r1, r3, #3
 800b216:	4bac      	ldr	r3, [pc, #688]	; (800b4c8 <EE_Init+0xbec>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b220:	4293      	cmp	r3, r2
 800b222:	d006      	beq.n	800b232 <EE_Init+0x956>
 800b224:	4ba8      	ldr	r3, [pc, #672]	; (800b4c8 <EE_Init+0xbec>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	029b      	lsls	r3, r3, #10
 800b22a:	085a      	lsrs	r2, r3, #1
 800b22c:	4ba7      	ldr	r3, [pc, #668]	; (800b4cc <EE_Init+0xbf0>)
 800b22e:	4013      	ands	r3, r2
 800b230:	e001      	b.n	800b236 <EE_Init+0x95a>
 800b232:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b236:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b23a:	fbb2 f0f3 	udiv	r0, r2, r3
 800b23e:	fb03 f300 	mul.w	r3, r3, r0
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	0adb      	lsrs	r3, r3, #11
 800b246:	440b      	add	r3, r1
 800b248:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b24c:	02da      	lsls	r2, r3, #11
 800b24e:	4b9e      	ldr	r3, [pc, #632]	; (800b4c8 <EE_Init+0xbec>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b258:	428b      	cmp	r3, r1
 800b25a:	d006      	beq.n	800b26a <EE_Init+0x98e>
 800b25c:	4b9a      	ldr	r3, [pc, #616]	; (800b4c8 <EE_Init+0xbec>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	029b      	lsls	r3, r3, #10
 800b262:	0859      	lsrs	r1, r3, #1
 800b264:	4b99      	ldr	r3, [pc, #612]	; (800b4cc <EE_Init+0xbf0>)
 800b266:	400b      	ands	r3, r1
 800b268:	e001      	b.n	800b26e <EE_Init+0x992>
 800b26a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b26e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b272:	fbb1 f1f3 	udiv	r1, r1, r3
 800b276:	4b94      	ldr	r3, [pc, #592]	; (800b4c8 <EE_Init+0xbec>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b280:	4283      	cmp	r3, r0
 800b282:	d006      	beq.n	800b292 <EE_Init+0x9b6>
 800b284:	4b90      	ldr	r3, [pc, #576]	; (800b4c8 <EE_Init+0xbec>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	029b      	lsls	r3, r3, #10
 800b28a:	0858      	lsrs	r0, r3, #1
 800b28c:	4b8f      	ldr	r3, [pc, #572]	; (800b4cc <EE_Init+0xbf0>)
 800b28e:	4003      	ands	r3, r0
 800b290:	e001      	b.n	800b296 <EE_Init+0x9ba>
 800b292:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b296:	fb01 f303 	mul.w	r3, r1, r3
 800b29a:	4413      	add	r3, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f001 fced 	bl	800cc7c <GetPageState>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <EE_Init+0x9d2>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	76fb      	strb	r3, [r7, #27]
 800b2ac:	e001      	b.n	800b2b2 <EE_Init+0x9d6>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 800b2b2:	7efb      	ldrb	r3, [r7, #27]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d111      	bne.n	800b2dc <EE_Init+0xa00>
      {
        if (nbactivepage == 0U)
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d107      	bne.n	800b2ce <EE_Init+0x9f2>
        {
          ubCurrentActivePage = page;
 800b2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	4b83      	ldr	r3, [pc, #524]	; (800b4d0 <EE_Init+0xbf4>)
 800b2c4:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	633b      	str	r3, [r7, #48]	; 0x30
 800b2cc:	e006      	b.n	800b2dc <EE_Init+0xa00>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 800b2ce:	230a      	movs	r3, #10
 800b2d0:	e28d      	b.n	800b7ee <EE_Init+0xf12>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800b2d2:	7ebb      	ldrb	r3, [r7, #26]
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d101      	bne.n	800b2dc <EE_Init+0xa00>
    {
      lastvalidpage = page;
 800b2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800b2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2de:	3301      	adds	r3, #1
 800b2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e2:	4b79      	ldr	r3, [pc, #484]	; (800b4c8 <EE_Init+0xbec>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d006      	beq.n	800b2fe <EE_Init+0xa22>
 800b2f0:	4b75      	ldr	r3, [pc, #468]	; (800b4c8 <EE_Init+0xbec>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	029b      	lsls	r3, r3, #10
 800b2f6:	085a      	lsrs	r2, r3, #1
 800b2f8:	4b74      	ldr	r3, [pc, #464]	; (800b4cc <EE_Init+0xbf0>)
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	e001      	b.n	800b302 <EE_Init+0xa26>
 800b2fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b302:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b306:	fbb2 f1f3 	udiv	r1, r2, r3
 800b30a:	fb03 f301 	mul.w	r3, r3, r1
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	0adb      	lsrs	r3, r3, #11
 800b312:	3304      	adds	r3, #4
 800b314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b316:	429a      	cmp	r2, r3
 800b318:	f4ff ae80 	bcc.w	800b01c <EE_Init+0x740>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d149      	bne.n	800b3b6 <EE_Init+0xada>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	b2d9      	uxtb	r1, r3
 800b326:	4b68      	ldr	r3, [pc, #416]	; (800b4c8 <EE_Init+0xbec>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b330:	4293      	cmp	r3, r2
 800b332:	d006      	beq.n	800b342 <EE_Init+0xa66>
 800b334:	4b64      	ldr	r3, [pc, #400]	; (800b4c8 <EE_Init+0xbec>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	029b      	lsls	r3, r3, #10
 800b33a:	085a      	lsrs	r2, r3, #1
 800b33c:	4b63      	ldr	r3, [pc, #396]	; (800b4cc <EE_Init+0xbf0>)
 800b33e:	4013      	ands	r3, r2
 800b340:	e001      	b.n	800b346 <EE_Init+0xa6a>
 800b342:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b346:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b34a:	fbb2 f0f3 	udiv	r0, r2, r3
 800b34e:	fb03 f300 	mul.w	r3, r3, r0
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	0adb      	lsrs	r3, r3, #11
 800b356:	b2db      	uxtb	r3, r3
 800b358:	1acb      	subs	r3, r1, r3
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	3301      	adds	r3, #1
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f003 0303 	and.w	r3, r3, #3
 800b364:	b2d9      	uxtb	r1, r3
 800b366:	4b58      	ldr	r3, [pc, #352]	; (800b4c8 <EE_Init+0xbec>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b370:	4293      	cmp	r3, r2
 800b372:	d006      	beq.n	800b382 <EE_Init+0xaa6>
 800b374:	4b54      	ldr	r3, [pc, #336]	; (800b4c8 <EE_Init+0xbec>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	029b      	lsls	r3, r3, #10
 800b37a:	085a      	lsrs	r2, r3, #1
 800b37c:	4b53      	ldr	r3, [pc, #332]	; (800b4cc <EE_Init+0xbf0>)
 800b37e:	4013      	ands	r3, r2
 800b380:	e001      	b.n	800b386 <EE_Init+0xaaa>
 800b382:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b386:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b38a:	fbb2 f0f3 	udiv	r0, r2, r3
 800b38e:	fb03 f300 	mul.w	r3, r3, r0
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	0adb      	lsrs	r3, r3, #11
 800b396:	b2db      	uxtb	r3, r3
 800b398:	440b      	add	r3, r1
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	4b4c      	ldr	r3, [pc, #304]	; (800b4d0 <EE_Init+0xbf4>)
 800b39e:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800b3a0:	4b4b      	ldr	r3, [pc, #300]	; (800b4d0 <EE_Init+0xbf4>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	2102      	movs	r1, #2
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f001 fb4e 	bl	800ca48 <SetPageState>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <EE_Init+0xada>
    {
      return EE_WRITE_ERROR;
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e21b      	b.n	800b7ee <EE_Init+0xf12>
  /*********************************************************************/
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/
  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 800b3b6:	4b47      	ldr	r3, [pc, #284]	; (800b4d4 <EE_Init+0xbf8>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800b3bc:	4b46      	ldr	r3, [pc, #280]	; (800b4d8 <EE_Init+0xbfc>)
 800b3be:	2220      	movs	r2, #32
 800b3c0:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b3c2:	2320      	movs	r3, #32
 800b3c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3c6:	e047      	b.n	800b458 <EE_Init+0xb7c>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800b3c8:	4b41      	ldr	r3, [pc, #260]	; (800b4d0 <EE_Init+0xbf4>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b3d0:	02da      	lsls	r2, r3, #11
 800b3d2:	4b3d      	ldr	r3, [pc, #244]	; (800b4c8 <EE_Init+0xbec>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	d006      	beq.n	800b3ee <EE_Init+0xb12>
 800b3e0:	4b39      	ldr	r3, [pc, #228]	; (800b4c8 <EE_Init+0xbec>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	029b      	lsls	r3, r3, #10
 800b3e6:	0859      	lsrs	r1, r3, #1
 800b3e8:	4b38      	ldr	r3, [pc, #224]	; (800b4cc <EE_Init+0xbf0>)
 800b3ea:	400b      	ands	r3, r1
 800b3ec:	e001      	b.n	800b3f2 <EE_Init+0xb16>
 800b3ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b3f2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b3f6:	fbb1 f1f3 	udiv	r1, r1, r3
 800b3fa:	4b33      	ldr	r3, [pc, #204]	; (800b4c8 <EE_Init+0xbec>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b404:	4283      	cmp	r3, r0
 800b406:	d006      	beq.n	800b416 <EE_Init+0xb3a>
 800b408:	4b2f      	ldr	r3, [pc, #188]	; (800b4c8 <EE_Init+0xbec>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	029b      	lsls	r3, r3, #10
 800b40e:	0858      	lsrs	r0, r3, #1
 800b410:	4b2e      	ldr	r3, [pc, #184]	; (800b4cc <EE_Init+0xbf0>)
 800b412:	4003      	ands	r3, r0
 800b414:	e001      	b.n	800b41a <EE_Init+0xb3e>
 800b416:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b41a:	fb01 f303 	mul.w	r3, r1, r3
 800b41e:	441a      	add	r2, r3
 800b420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b422:	4413      	add	r3, r2
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (addressvalue != EE_MASK_FULL)
 800b42c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b434:	bf08      	it	eq
 800b436:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800b43a:	d012      	beq.n	800b462 <EE_Init+0xb86>
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 800b43c:	4b25      	ldr	r3, [pc, #148]	; (800b4d4 <EE_Init+0xbf8>)
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	3301      	adds	r3, #1
 800b442:	b29a      	uxth	r2, r3
 800b444:	4b23      	ldr	r3, [pc, #140]	; (800b4d4 <EE_Init+0xbf8>)
 800b446:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b448:	4b23      	ldr	r3, [pc, #140]	; (800b4d8 <EE_Init+0xbfc>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3308      	adds	r3, #8
 800b44e:	4a22      	ldr	r2, [pc, #136]	; (800b4d8 <EE_Init+0xbfc>)
 800b450:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	3308      	adds	r3, #8
 800b456:	637b      	str	r3, [r7, #52]	; 0x34
 800b458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b45e:	d3b3      	bcc.n	800b3c8 <EE_Init+0xaec>
 800b460:	e000      	b.n	800b464 <EE_Init+0xb88>
    }
    else /* no more element in the page */
    {
      break;
 800b462:	bf00      	nop
  /* Step 6: Finalize eeprom emulation global variables relative       */
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/
  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800b464:	4b1a      	ldr	r3, [pc, #104]	; (800b4d0 <EE_Init+0xbf4>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 800b46a:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <EE_Init+0xbf4>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800b470:	e07e      	b.n	800b570 <EE_Init+0xc94>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800b472:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <EE_Init+0xbec>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	b29b      	uxth	r3, r3
 800b478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d006      	beq.n	800b48e <EE_Init+0xbb2>
 800b480:	4b11      	ldr	r3, [pc, #68]	; (800b4c8 <EE_Init+0xbec>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	029b      	lsls	r3, r3, #10
 800b486:	085a      	lsrs	r2, r3, #1
 800b488:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <EE_Init+0xbf0>)
 800b48a:	4013      	ands	r3, r2
 800b48c:	e001      	b.n	800b492 <EE_Init+0xbb6>
 800b48e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b492:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b496:	fbb2 f1f3 	udiv	r1, r2, r3
 800b49a:	fb03 f301 	mul.w	r3, r3, r1
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	0adb      	lsrs	r3, r3, #11
 800b4a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	3303      	adds	r3, #3
 800b4a8:	f003 0103 	and.w	r1, r3, #3
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <EE_Init+0xbec>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d010      	beq.n	800b4dc <EE_Init+0xc00>
 800b4ba:	4b03      	ldr	r3, [pc, #12]	; (800b4c8 <EE_Init+0xbec>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	029b      	lsls	r3, r3, #10
 800b4c0:	085a      	lsrs	r2, r3, #1
 800b4c2:	4b02      	ldr	r3, [pc, #8]	; (800b4cc <EE_Init+0xbf0>)
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	e00b      	b.n	800b4e0 <EE_Init+0xc04>
 800b4c8:	1fff75e0 	.word	0x1fff75e0
 800b4cc:	01fffe00 	.word	0x01fffe00
 800b4d0:	20000252 	.word	0x20000252
 800b4d4:	20000250 	.word	0x20000250
 800b4d8:	20000030 	.word	0x20000030
 800b4dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b4e4:	fbb2 f0f3 	udiv	r0, r2, r3
 800b4e8:	fb03 f300 	mul.w	r3, r3, r0
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	0adb      	lsrs	r3, r3, #11
 800b4f0:	440b      	add	r3, r1
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b4fa:	02da      	lsls	r2, r3, #11
 800b4fc:	4bb7      	ldr	r3, [pc, #732]	; (800b7dc <EE_Init+0xf00>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	b29b      	uxth	r3, r3
 800b502:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b506:	428b      	cmp	r3, r1
 800b508:	d006      	beq.n	800b518 <EE_Init+0xc3c>
 800b50a:	4bb4      	ldr	r3, [pc, #720]	; (800b7dc <EE_Init+0xf00>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	029b      	lsls	r3, r3, #10
 800b510:	0859      	lsrs	r1, r3, #1
 800b512:	4bb3      	ldr	r3, [pc, #716]	; (800b7e0 <EE_Init+0xf04>)
 800b514:	400b      	ands	r3, r1
 800b516:	e001      	b.n	800b51c <EE_Init+0xc40>
 800b518:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b51c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b520:	fbb1 f1f3 	udiv	r1, r1, r3
 800b524:	4bad      	ldr	r3, [pc, #692]	; (800b7dc <EE_Init+0xf00>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b52e:	4283      	cmp	r3, r0
 800b530:	d006      	beq.n	800b540 <EE_Init+0xc64>
 800b532:	4baa      	ldr	r3, [pc, #680]	; (800b7dc <EE_Init+0xf00>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	029b      	lsls	r3, r3, #10
 800b538:	0858      	lsrs	r0, r3, #1
 800b53a:	4ba9      	ldr	r3, [pc, #676]	; (800b7e0 <EE_Init+0xf04>)
 800b53c:	4003      	ands	r3, r0
 800b53e:	e001      	b.n	800b544 <EE_Init+0xc68>
 800b540:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b544:	fb01 f303 	mul.w	r3, r1, r3
 800b548:	4413      	add	r3, r2
 800b54a:	4618      	mov	r0, r3
 800b54c:	f001 fb96 	bl	800cc7c <GetPageState>
 800b550:	4603      	mov	r3, r0
 800b552:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 800b554:	7ebb      	ldrb	r3, [r7, #26]
 800b556:	2b03      	cmp	r3, #3
 800b558:	d108      	bne.n	800b56c <EE_Init+0xc90>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800b55a:	4ba2      	ldr	r3, [pc, #648]	; (800b7e4 <EE_Init+0xf08>)
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	33fc      	adds	r3, #252	; 0xfc
 800b560:	b29a      	uxth	r2, r3
 800b562:	4ba0      	ldr	r3, [pc, #640]	; (800b7e4 <EE_Init+0xf08>)
 800b564:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800b566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b568:	623b      	str	r3, [r7, #32]
 800b56a:	e001      	b.n	800b570 <EE_Init+0xc94>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 800b56c:	230a      	movs	r3, #10
 800b56e:	e13e      	b.n	800b7ee <EE_Init+0xf12>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800b570:	4b9a      	ldr	r3, [pc, #616]	; (800b7dc <EE_Init+0xf00>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	b29b      	uxth	r3, r3
 800b576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d006      	beq.n	800b58c <EE_Init+0xcb0>
 800b57e:	4b97      	ldr	r3, [pc, #604]	; (800b7dc <EE_Init+0xf00>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	029b      	lsls	r3, r3, #10
 800b584:	085a      	lsrs	r2, r3, #1
 800b586:	4b96      	ldr	r3, [pc, #600]	; (800b7e0 <EE_Init+0xf04>)
 800b588:	4013      	ands	r3, r2
 800b58a:	e001      	b.n	800b590 <EE_Init+0xcb4>
 800b58c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b590:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b594:	fbb2 f1f3 	udiv	r1, r2, r3
 800b598:	fb03 f301 	mul.w	r3, r3, r1
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	0adb      	lsrs	r3, r3, #11
 800b5a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d01c      	beq.n	800b5e0 <EE_Init+0xd04>
 800b5a6:	4b8d      	ldr	r3, [pc, #564]	; (800b7dc <EE_Init+0xf00>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d006      	beq.n	800b5c2 <EE_Init+0xce6>
 800b5b4:	4b89      	ldr	r3, [pc, #548]	; (800b7dc <EE_Init+0xf00>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	029b      	lsls	r3, r3, #10
 800b5ba:	085a      	lsrs	r2, r3, #1
 800b5bc:	4b88      	ldr	r3, [pc, #544]	; (800b7e0 <EE_Init+0xf04>)
 800b5be:	4013      	ands	r3, r2
 800b5c0:	e001      	b.n	800b5c6 <EE_Init+0xcea>
 800b5c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b5c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b5ca:	fbb2 f1f3 	udiv	r1, r2, r3
 800b5ce:	fb03 f301 	mul.w	r3, r3, r1
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	0adb      	lsrs	r3, r3, #11
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	f47f af49 	bne.w	800b472 <EE_Init+0xb96>

  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/
  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800b5e0:	4b81      	ldr	r3, [pc, #516]	; (800b7e8 <EE_Init+0xf0c>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	4b7d      	ldr	r3, [pc, #500]	; (800b7dc <EE_Init+0xf00>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d006      	beq.n	800b602 <EE_Init+0xd26>
 800b5f4:	4b79      	ldr	r3, [pc, #484]	; (800b7dc <EE_Init+0xf00>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	029b      	lsls	r3, r3, #10
 800b5fa:	085a      	lsrs	r2, r3, #1
 800b5fc:	4b78      	ldr	r3, [pc, #480]	; (800b7e0 <EE_Init+0xf04>)
 800b5fe:	4013      	ands	r3, r2
 800b600:	e001      	b.n	800b606 <EE_Init+0xd2a>
 800b602:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b606:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b60a:	fbb2 f1f3 	udiv	r1, r2, r3
 800b60e:	fb03 f301 	mul.w	r3, r3, r1
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	0adb      	lsrs	r3, r3, #11
 800b616:	1ac3      	subs	r3, r0, r3
 800b618:	3301      	adds	r3, #1
 800b61a:	f003 0103 	and.w	r1, r3, #3
 800b61e:	4b6f      	ldr	r3, [pc, #444]	; (800b7dc <EE_Init+0xf00>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	b29b      	uxth	r3, r3
 800b624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b628:	4293      	cmp	r3, r2
 800b62a:	d006      	beq.n	800b63a <EE_Init+0xd5e>
 800b62c:	4b6b      	ldr	r3, [pc, #428]	; (800b7dc <EE_Init+0xf00>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	029b      	lsls	r3, r3, #10
 800b632:	085a      	lsrs	r2, r3, #1
 800b634:	4b6a      	ldr	r3, [pc, #424]	; (800b7e0 <EE_Init+0xf04>)
 800b636:	4013      	ands	r3, r2
 800b638:	e001      	b.n	800b63e <EE_Init+0xd62>
 800b63a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b63e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b642:	fbb2 f0f3 	udiv	r0, r2, r3
 800b646:	fb03 f300 	mul.w	r3, r3, r0
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	0adb      	lsrs	r3, r3, #11
 800b64e:	440b      	add	r3, r1
 800b650:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800b652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b654:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b658:	02da      	lsls	r2, r3, #11
 800b65a:	4b60      	ldr	r3, [pc, #384]	; (800b7dc <EE_Init+0xf00>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	b29b      	uxth	r3, r3
 800b660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b664:	428b      	cmp	r3, r1
 800b666:	d006      	beq.n	800b676 <EE_Init+0xd9a>
 800b668:	4b5c      	ldr	r3, [pc, #368]	; (800b7dc <EE_Init+0xf00>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	029b      	lsls	r3, r3, #10
 800b66e:	0859      	lsrs	r1, r3, #1
 800b670:	4b5b      	ldr	r3, [pc, #364]	; (800b7e0 <EE_Init+0xf04>)
 800b672:	400b      	ands	r3, r1
 800b674:	e001      	b.n	800b67a <EE_Init+0xd9e>
 800b676:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b67a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b67e:	fbb1 f1f3 	udiv	r1, r1, r3
 800b682:	4b56      	ldr	r3, [pc, #344]	; (800b7dc <EE_Init+0xf00>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	b29b      	uxth	r3, r3
 800b688:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b68c:	4283      	cmp	r3, r0
 800b68e:	d006      	beq.n	800b69e <EE_Init+0xdc2>
 800b690:	4b52      	ldr	r3, [pc, #328]	; (800b7dc <EE_Init+0xf00>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	029b      	lsls	r3, r3, #10
 800b696:	0858      	lsrs	r0, r3, #1
 800b698:	4b51      	ldr	r3, [pc, #324]	; (800b7e0 <EE_Init+0xf04>)
 800b69a:	4003      	ands	r3, r0
 800b69c:	e001      	b.n	800b6a2 <EE_Init+0xdc6>
 800b69e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6a2:	fb01 f303 	mul.w	r3, r1, r3
 800b6a6:	4413      	add	r3, r2
 800b6a8:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 800b6aa:	e07f      	b.n	800b7ac <EE_Init+0xed0>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d108      	bne.n	800b6c4 <EE_Init+0xde8>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b6b6:	f001 fb85 	bl	800cdc4 <FI_PageErase>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d012      	beq.n	800b6e6 <EE_Init+0xe0a>
      {
        return EE_ERASE_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e094      	b.n	800b7ee <EE_Init+0xf12>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 800b6c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b6c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6ca:	f000 fca4 	bl	800c016 <VerifyPageFullyErased>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d108      	bne.n	800b6e6 <EE_Init+0xe0a>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b6d8:	f001 fb74 	bl	800cdc4 <FI_PageErase>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <EE_Init+0xe0a>
        {
          return EE_ERASE_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e083      	b.n	800b7ee <EE_Init+0xf12>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 800b6e6:	4b3d      	ldr	r3, [pc, #244]	; (800b7dc <EE_Init+0xf00>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d006      	beq.n	800b702 <EE_Init+0xe26>
 800b6f4:	4b39      	ldr	r3, [pc, #228]	; (800b7dc <EE_Init+0xf00>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	029b      	lsls	r3, r3, #10
 800b6fa:	085a      	lsrs	r2, r3, #1
 800b6fc:	4b38      	ldr	r3, [pc, #224]	; (800b7e0 <EE_Init+0xf04>)
 800b6fe:	4013      	ands	r3, r2
 800b700:	e001      	b.n	800b706 <EE_Init+0xe2a>
 800b702:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b706:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b70a:	fbb2 f1f3 	udiv	r1, r2, r3
 800b70e:	fb03 f301 	mul.w	r3, r3, r1
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	0adb      	lsrs	r3, r3, #11
 800b716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	3301      	adds	r3, #1
 800b71c:	f003 0103 	and.w	r1, r3, #3
 800b720:	4b2e      	ldr	r3, [pc, #184]	; (800b7dc <EE_Init+0xf00>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	b29b      	uxth	r3, r3
 800b726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d006      	beq.n	800b73c <EE_Init+0xe60>
 800b72e:	4b2b      	ldr	r3, [pc, #172]	; (800b7dc <EE_Init+0xf00>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	029b      	lsls	r3, r3, #10
 800b734:	085a      	lsrs	r2, r3, #1
 800b736:	4b2a      	ldr	r3, [pc, #168]	; (800b7e0 <EE_Init+0xf04>)
 800b738:	4013      	ands	r3, r2
 800b73a:	e001      	b.n	800b740 <EE_Init+0xe64>
 800b73c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b740:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b744:	fbb2 f0f3 	udiv	r0, r2, r3
 800b748:	fb03 f300 	mul.w	r3, r3, r0
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	0adb      	lsrs	r3, r3, #11
 800b750:	440b      	add	r3, r1
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800b754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b756:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b75a:	02da      	lsls	r2, r3, #11
 800b75c:	4b1f      	ldr	r3, [pc, #124]	; (800b7dc <EE_Init+0xf00>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b766:	428b      	cmp	r3, r1
 800b768:	d006      	beq.n	800b778 <EE_Init+0xe9c>
 800b76a:	4b1c      	ldr	r3, [pc, #112]	; (800b7dc <EE_Init+0xf00>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	029b      	lsls	r3, r3, #10
 800b770:	0859      	lsrs	r1, r3, #1
 800b772:	4b1b      	ldr	r3, [pc, #108]	; (800b7e0 <EE_Init+0xf04>)
 800b774:	400b      	ands	r3, r1
 800b776:	e001      	b.n	800b77c <EE_Init+0xea0>
 800b778:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b77c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b780:	fbb1 f1f3 	udiv	r1, r1, r3
 800b784:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <EE_Init+0xf00>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b78e:	4283      	cmp	r3, r0
 800b790:	d006      	beq.n	800b7a0 <EE_Init+0xec4>
 800b792:	4b12      	ldr	r3, [pc, #72]	; (800b7dc <EE_Init+0xf00>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	029b      	lsls	r3, r3, #10
 800b798:	0858      	lsrs	r0, r3, #1
 800b79a:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <EE_Init+0xf04>)
 800b79c:	4003      	ands	r3, r0
 800b79e:	e001      	b.n	800b7a4 <EE_Init+0xec8>
 800b7a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7a4:	fb01 f303 	mul.w	r3, r1, r3
 800b7a8:	4413      	add	r3, r2
 800b7aa:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 800b7ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	f47f af7b 	bne.w	800b6ac <EE_Init+0xdd0>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800b7b6:	f001 fbb3 	bl	800cf20 <FI_CacheFlush>
  /* Step 8: Perform dummy write '0' to get rid of potential           */
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/
  if (recoverytransfer == 0U)
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d115      	bne.n	800b7ec <EE_Init+0xf10>
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
    {
      return EE_WRITE_ERROR;
    }
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	f001 f8a6 	bl	800c914 <VerifyPagesFullWriteVariable>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	81fb      	strh	r3, [r7, #14]
    
    /* The dummy write can be skipped in case pages are full
       because in this case potential instability can not happen */
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 800b7cc:	89fb      	ldrh	r3, [r7, #14]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00c      	beq.n	800b7ec <EE_Init+0xf10>
 800b7d2:	89fb      	ldrh	r3, [r7, #14]
 800b7d4:	2b12      	cmp	r3, #18
 800b7d6:	d009      	beq.n	800b7ec <EE_Init+0xf10>
    {
      return EE_WRITE_ERROR;
 800b7d8:	2302      	movs	r3, #2
 800b7da:	e008      	b.n	800b7ee <EE_Init+0xf12>
 800b7dc:	1fff75e0 	.word	0x1fff75e0
 800b7e0:	01fffe00 	.word	0x01fffe00
 800b7e4:	20000250 	.word	0x20000250
 800b7e8:	20000252 	.word	0x20000252
    }
#endif
  }

  return EE_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3740      	adds	r7, #64	; 0x40
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop

0800b7f8 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800b806:	f001 fc7f 	bl	800d108 <FI_CheckBankConfig>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 800b810:	230e      	movs	r3, #14
 800b812:	e0c5      	b.n	800b9a0 <EE_Format+0x1a8>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
  #endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800b814:	4b64      	ldr	r3, [pc, #400]	; (800b9a8 <EE_Format+0x1b0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b81e:	4293      	cmp	r3, r2
 800b820:	d006      	beq.n	800b830 <EE_Format+0x38>
 800b822:	4b61      	ldr	r3, [pc, #388]	; (800b9a8 <EE_Format+0x1b0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	029b      	lsls	r3, r3, #10
 800b828:	085a      	lsrs	r2, r3, #1
 800b82a:	4b60      	ldr	r3, [pc, #384]	; (800b9ac <EE_Format+0x1b4>)
 800b82c:	4013      	ands	r3, r2
 800b82e:	e001      	b.n	800b834 <EE_Format+0x3c>
 800b830:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b834:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b838:	fbb2 f1f3 	udiv	r1, r2, r3
 800b83c:	fb03 f301 	mul.w	r3, r3, r1
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	0adb      	lsrs	r3, r3, #11
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	e04a      	b.n	800b8de <EE_Format+0xe6>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800b848:	79fb      	ldrb	r3, [r7, #7]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d108      	bne.n	800b860 <EE_Format+0x68>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800b84e:	2101      	movs	r1, #1
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f001 fab7 	bl	800cdc4 <FI_PageErase>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d03d      	beq.n	800b8d8 <EE_Format+0xe0>
      {
        #ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
        #endif
        return EE_ERASE_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e09f      	b.n	800b9a0 <EE_Format+0x1a8>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b866:	02da      	lsls	r2, r3, #11
 800b868:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <EE_Format+0x1b0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b872:	428b      	cmp	r3, r1
 800b874:	d006      	beq.n	800b884 <EE_Format+0x8c>
 800b876:	4b4c      	ldr	r3, [pc, #304]	; (800b9a8 <EE_Format+0x1b0>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	029b      	lsls	r3, r3, #10
 800b87c:	0859      	lsrs	r1, r3, #1
 800b87e:	4b4b      	ldr	r3, [pc, #300]	; (800b9ac <EE_Format+0x1b4>)
 800b880:	400b      	ands	r3, r1
 800b882:	e001      	b.n	800b888 <EE_Format+0x90>
 800b884:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b888:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b88c:	fbb1 f1f3 	udiv	r1, r1, r3
 800b890:	4b45      	ldr	r3, [pc, #276]	; (800b9a8 <EE_Format+0x1b0>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	b29b      	uxth	r3, r3
 800b896:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b89a:	4283      	cmp	r3, r0
 800b89c:	d006      	beq.n	800b8ac <EE_Format+0xb4>
 800b89e:	4b42      	ldr	r3, [pc, #264]	; (800b9a8 <EE_Format+0x1b0>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	029b      	lsls	r3, r3, #10
 800b8a4:	0858      	lsrs	r0, r3, #1
 800b8a6:	4b41      	ldr	r3, [pc, #260]	; (800b9ac <EE_Format+0x1b4>)
 800b8a8:	4003      	ands	r3, r0
 800b8aa:	e001      	b.n	800b8b0 <EE_Format+0xb8>
 800b8ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8b0:	fb01 f303 	mul.w	r3, r1, r3
 800b8b4:	4413      	add	r3, r2
 800b8b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 fbab 	bl	800c016 <VerifyPageFullyErased>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b10      	cmp	r3, #16
 800b8c4:	d108      	bne.n	800b8d8 <EE_Format+0xe0>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f001 fa7b 	bl	800cdc4 <FI_PageErase>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <EE_Format+0xe0>
        {
          #ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
          #endif
          return EE_ERASE_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e063      	b.n	800b9a0 <EE_Format+0x1a8>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60fb      	str	r3, [r7, #12]
 800b8de:	4b32      	ldr	r3, [pc, #200]	; (800b9a8 <EE_Format+0x1b0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d006      	beq.n	800b8fa <EE_Format+0x102>
 800b8ec:	4b2e      	ldr	r3, [pc, #184]	; (800b9a8 <EE_Format+0x1b0>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	029b      	lsls	r3, r3, #10
 800b8f2:	085a      	lsrs	r2, r3, #1
 800b8f4:	4b2d      	ldr	r3, [pc, #180]	; (800b9ac <EE_Format+0x1b4>)
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	e001      	b.n	800b8fe <EE_Format+0x106>
 800b8fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b902:	fbb2 f1f3 	udiv	r1, r2, r3
 800b906:	fb03 f301 	mul.w	r3, r3, r1
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	0adb      	lsrs	r3, r3, #11
 800b90e:	3304      	adds	r3, #4
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	429a      	cmp	r2, r3
 800b914:	d398      	bcc.n	800b848 <EE_Format+0x50>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800b916:	f001 fb03 	bl	800cf20 <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
  #endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 800b91a:	4b23      	ldr	r3, [pc, #140]	; (800b9a8 <EE_Format+0x1b0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b924:	4293      	cmp	r3, r2
 800b926:	d006      	beq.n	800b936 <EE_Format+0x13e>
 800b928:	4b1f      	ldr	r3, [pc, #124]	; (800b9a8 <EE_Format+0x1b0>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	029b      	lsls	r3, r3, #10
 800b92e:	085a      	lsrs	r2, r3, #1
 800b930:	4b1e      	ldr	r3, [pc, #120]	; (800b9ac <EE_Format+0x1b4>)
 800b932:	4013      	ands	r3, r2
 800b934:	e001      	b.n	800b93a <EE_Format+0x142>
 800b936:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b93a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b93e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b942:	fb03 f301 	mul.w	r3, r3, r1
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	0adb      	lsrs	r3, r3, #11
 800b94a:	2102      	movs	r1, #2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f001 f87b 	bl	800ca48 <SetPageState>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d001      	beq.n	800b95c <EE_Format+0x164>
  {
    return EE_WRITE_ERROR;
 800b958:	2302      	movs	r3, #2
 800b95a:	e021      	b.n	800b9a0 <EE_Format+0x1a8>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800b95c:	4b14      	ldr	r3, [pc, #80]	; (800b9b0 <EE_Format+0x1b8>)
 800b95e:	2200      	movs	r2, #0
 800b960:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 800b962:	4b11      	ldr	r3, [pc, #68]	; (800b9a8 <EE_Format+0x1b0>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	b29b      	uxth	r3, r3
 800b968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d006      	beq.n	800b97e <EE_Format+0x186>
 800b970:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <EE_Format+0x1b0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	029b      	lsls	r3, r3, #10
 800b976:	085a      	lsrs	r2, r3, #1
 800b978:	4b0c      	ldr	r3, [pc, #48]	; (800b9ac <EE_Format+0x1b4>)
 800b97a:	4013      	ands	r3, r2
 800b97c:	e001      	b.n	800b982 <EE_Format+0x18a>
 800b97e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b982:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b986:	fbb2 f1f3 	udiv	r1, r2, r3
 800b98a:	fb03 f301 	mul.w	r3, r3, r1
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	0adb      	lsrs	r3, r3, #11
 800b992:	b2da      	uxtb	r2, r3
 800b994:	4b07      	ldr	r3, [pc, #28]	; (800b9b4 <EE_Format+0x1bc>)
 800b996:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 800b998:	4b07      	ldr	r3, [pc, #28]	; (800b9b8 <EE_Format+0x1c0>)
 800b99a:	2220      	movs	r2, #32
 800b99c:	601a      	str	r2, [r3, #0]

  return EE_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	1fff75e0 	.word	0x1fff75e0
 800b9ac:	01fffe00 	.word	0x01fffe00
 800b9b0:	20000250 	.word	0x20000250
 800b9b4:	20000252 	.word	0x20000252
 800b9b8:	20000030 	.word	0x20000030

0800b9bc <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	6039      	str	r1, [r7, #0]
 800b9c6:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d016      	beq.n	800b9fc <EE_ReadVariable32bits+0x40>
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d011      	beq.n	800b9fc <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 800b9e0:	f107 0208 	add.w	r2, r7, #8
 800b9e4:	88fb      	ldrh	r3, [r7, #6]
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 f9df 	bl	800bdac <ReadVariable>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	601a      	str	r2, [r3, #0]

    return status;
 800b9f8:	89fb      	ldrh	r3, [r7, #14]
 800b9fa:	e000      	b.n	800b9fe <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800b9fc:	2308      	movs	r3, #8
  } 
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	6039      	str	r1, [r7, #0]
 800ba10:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800ba12:	88fb      	ldrh	r3, [r7, #6]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00b      	beq.n	800ba30 <EE_WriteVariable32bits+0x2a>
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d006      	beq.n	800ba30 <EE_WriteVariable32bits+0x2a>
  {
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	6839      	ldr	r1, [r7, #0]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 fad6 	bl	800bfd8 <WriteVariable>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	e000      	b.n	800ba32 <EE_WriteVariable32bits+0x2c>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800ba30:	2308      	movs	r3, #8
  } 
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
	...

0800ba3c <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	2300      	movs	r3, #0
 800ba48:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60fb      	str	r3, [r7, #12]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800ba52:	2305      	movs	r3, #5
 800ba54:	71fb      	strb	r3, [r7, #7]
 800ba56:	2305      	movs	r3, #5
 800ba58:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800ba5a:	4b61      	ldr	r3, [pc, #388]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d006      	beq.n	800ba76 <EE_CleanUp+0x3a>
 800ba68:	4b5d      	ldr	r3, [pc, #372]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	029b      	lsls	r3, r3, #10
 800ba6e:	085a      	lsrs	r2, r3, #1
 800ba70:	4b5c      	ldr	r3, [pc, #368]	; (800bbe4 <EE_CleanUp+0x1a8>)
 800ba72:	4013      	ands	r3, r2
 800ba74:	e001      	b.n	800ba7a <EE_CleanUp+0x3e>
 800ba76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ba7e:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba82:	fb03 f301 	mul.w	r3, r3, r1
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	0adb      	lsrs	r3, r3, #11
 800ba8a:	617b      	str	r3, [r7, #20]
 800ba8c:	e085      	b.n	800bb9a <EE_CleanUp+0x15e>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ba94:	02da      	lsls	r2, r3, #11
 800ba96:	4b52      	ldr	r3, [pc, #328]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800baa0:	428b      	cmp	r3, r1
 800baa2:	d006      	beq.n	800bab2 <EE_CleanUp+0x76>
 800baa4:	4b4e      	ldr	r3, [pc, #312]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	029b      	lsls	r3, r3, #10
 800baaa:	0859      	lsrs	r1, r3, #1
 800baac:	4b4d      	ldr	r3, [pc, #308]	; (800bbe4 <EE_CleanUp+0x1a8>)
 800baae:	400b      	ands	r3, r1
 800bab0:	e001      	b.n	800bab6 <EE_CleanUp+0x7a>
 800bab2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bab6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800baba:	fbb1 f1f3 	udiv	r1, r1, r3
 800babe:	4b48      	ldr	r3, [pc, #288]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bac8:	4283      	cmp	r3, r0
 800baca:	d006      	beq.n	800bada <EE_CleanUp+0x9e>
 800bacc:	4b44      	ldr	r3, [pc, #272]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	029b      	lsls	r3, r3, #10
 800bad2:	0858      	lsrs	r0, r3, #1
 800bad4:	4b43      	ldr	r3, [pc, #268]	; (800bbe4 <EE_CleanUp+0x1a8>)
 800bad6:	4003      	ands	r3, r0
 800bad8:	e001      	b.n	800bade <EE_CleanUp+0xa2>
 800bada:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bade:	fb01 f303 	mul.w	r3, r1, r3
 800bae2:	4413      	add	r3, r2
 800bae4:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f001 f8c8 	bl	800cc7c <GetPageState>
 800baec:	4603      	mov	r3, r0
 800baee:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800baf0:	79fb      	ldrb	r3, [r7, #7]
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	d14e      	bne.n	800bb94 <EE_CleanUp+0x158>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	3301      	adds	r3, #1
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	e038      	b.n	800bb70 <EE_CleanUp+0x134>
      {
        pageaddress = PAGE_ADDRESS(page);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bb04:	02da      	lsls	r2, r3, #11
 800bb06:	4b36      	ldr	r3, [pc, #216]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bb10:	428b      	cmp	r3, r1
 800bb12:	d006      	beq.n	800bb22 <EE_CleanUp+0xe6>
 800bb14:	4b32      	ldr	r3, [pc, #200]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	029b      	lsls	r3, r3, #10
 800bb1a:	0859      	lsrs	r1, r3, #1
 800bb1c:	4b31      	ldr	r3, [pc, #196]	; (800bbe4 <EE_CleanUp+0x1a8>)
 800bb1e:	400b      	ands	r3, r1
 800bb20:	e001      	b.n	800bb26 <EE_CleanUp+0xea>
 800bb22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb2a:	fbb1 f1f3 	udiv	r1, r1, r3
 800bb2e:	4b2c      	ldr	r3, [pc, #176]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bb38:	4283      	cmp	r3, r0
 800bb3a:	d006      	beq.n	800bb4a <EE_CleanUp+0x10e>
 800bb3c:	4b28      	ldr	r3, [pc, #160]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	029b      	lsls	r3, r3, #10
 800bb42:	0858      	lsrs	r0, r3, #1
 800bb44:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <EE_CleanUp+0x1a8>)
 800bb46:	4003      	ands	r3, r0
 800bb48:	e001      	b.n	800bb4e <EE_CleanUp+0x112>
 800bb4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb4e:	fb01 f303 	mul.w	r3, r1, r3
 800bb52:	4413      	add	r3, r2
 800bb54:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800bb56:	68b8      	ldr	r0, [r7, #8]
 800bb58:	f001 f890 	bl	800cc7c <GetPageState>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 800bb60:	79bb      	ldrb	r3, [r7, #6]
 800bb62:	2b04      	cmp	r3, #4
 800bb64:	d001      	beq.n	800bb6a <EE_CleanUp+0x12e>
        {
          return EE_ERROR_NOERASING_PAGE;
 800bb66:	2305      	movs	r3, #5
 800bb68:	e035      	b.n	800bbd6 <EE_CleanUp+0x19a>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	613b      	str	r3, [r7, #16]
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	3302      	adds	r3, #2
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d3c1      	bcc.n	800bafe <EE_CleanUp+0xc2>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
      #endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800bb7a:	2102      	movs	r1, #2
 800bb7c:	6978      	ldr	r0, [r7, #20]
 800bb7e:	f001 f921 	bl	800cdc4 <FI_PageErase>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <EE_CleanUp+0x150>
      {
        #ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
        #endif
        return EE_ERASE_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e024      	b.n	800bbd6 <EE_CleanUp+0x19a>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
        #endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800bb8c:	f001 f9c8 	bl	800cf20 <FI_CacheFlush>
        
        return EE_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	e020      	b.n	800bbd6 <EE_CleanUp+0x19a>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	3302      	adds	r3, #2
 800bb98:	617b      	str	r3, [r7, #20]
 800bb9a:	4b11      	ldr	r3, [pc, #68]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d006      	beq.n	800bbb6 <EE_CleanUp+0x17a>
 800bba8:	4b0d      	ldr	r3, [pc, #52]	; (800bbe0 <EE_CleanUp+0x1a4>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	029b      	lsls	r3, r3, #10
 800bbae:	085a      	lsrs	r2, r3, #1
 800bbb0:	4b0c      	ldr	r3, [pc, #48]	; (800bbe4 <EE_CleanUp+0x1a8>)
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	e001      	b.n	800bbba <EE_CleanUp+0x17e>
 800bbb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bbba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bbbe:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbc2:	fb03 f301 	mul.w	r3, r3, r1
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	0adb      	lsrs	r3, r3, #11
 800bbca:	3304      	adds	r3, #4
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	f4ff af5d 	bcc.w	800ba8e <EE_CleanUp+0x52>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800bbd4:	2305      	movs	r3, #5
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	1fff75e0 	.word	0x1fff75e0
 800bbe4:	01fffe00 	.word	0x01fffe00

0800bbe8 <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	617b      	str	r3, [r7, #20]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800bbfe:	2305      	movs	r3, #5
 800bc00:	71fb      	strb	r3, [r7, #7]
 800bc02:	2305      	movs	r3, #5
 800bc04:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800bc06:	4b61      	ldr	r3, [pc, #388]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d006      	beq.n	800bc22 <EE_CleanUp_IT+0x3a>
 800bc14:	4b5d      	ldr	r3, [pc, #372]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	029b      	lsls	r3, r3, #10
 800bc1a:	085a      	lsrs	r2, r3, #1
 800bc1c:	4b5c      	ldr	r3, [pc, #368]	; (800bd90 <EE_CleanUp_IT+0x1a8>)
 800bc1e:	4013      	ands	r3, r2
 800bc20:	e001      	b.n	800bc26 <EE_CleanUp_IT+0x3e>
 800bc22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bc2a:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc2e:	fb03 f301 	mul.w	r3, r3, r1
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	0adb      	lsrs	r3, r3, #11
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	e085      	b.n	800bd46 <EE_CleanUp_IT+0x15e>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bc40:	02da      	lsls	r2, r3, #11
 800bc42:	4b52      	ldr	r3, [pc, #328]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bc4c:	428b      	cmp	r3, r1
 800bc4e:	d006      	beq.n	800bc5e <EE_CleanUp_IT+0x76>
 800bc50:	4b4e      	ldr	r3, [pc, #312]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	029b      	lsls	r3, r3, #10
 800bc56:	0859      	lsrs	r1, r3, #1
 800bc58:	4b4d      	ldr	r3, [pc, #308]	; (800bd90 <EE_CleanUp_IT+0x1a8>)
 800bc5a:	400b      	ands	r3, r1
 800bc5c:	e001      	b.n	800bc62 <EE_CleanUp_IT+0x7a>
 800bc5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc62:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc66:	fbb1 f1f3 	udiv	r1, r1, r3
 800bc6a:	4b48      	ldr	r3, [pc, #288]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bc74:	4283      	cmp	r3, r0
 800bc76:	d006      	beq.n	800bc86 <EE_CleanUp_IT+0x9e>
 800bc78:	4b44      	ldr	r3, [pc, #272]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	029b      	lsls	r3, r3, #10
 800bc7e:	0858      	lsrs	r0, r3, #1
 800bc80:	4b43      	ldr	r3, [pc, #268]	; (800bd90 <EE_CleanUp_IT+0x1a8>)
 800bc82:	4003      	ands	r3, r0
 800bc84:	e001      	b.n	800bc8a <EE_CleanUp_IT+0xa2>
 800bc86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc8a:	fb01 f303 	mul.w	r3, r1, r3
 800bc8e:	4413      	add	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f000 fff2 	bl	800cc7c <GetPageState>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800bc9c:	79fb      	ldrb	r3, [r7, #7]
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d14e      	bne.n	800bd40 <EE_CleanUp_IT+0x158>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	3301      	adds	r3, #1
 800bca6:	613b      	str	r3, [r7, #16]
 800bca8:	e038      	b.n	800bd1c <EE_CleanUp_IT+0x134>
      {
        pageaddress = PAGE_ADDRESS(page);
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bcb0:	02da      	lsls	r2, r3, #11
 800bcb2:	4b36      	ldr	r3, [pc, #216]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bcbc:	428b      	cmp	r3, r1
 800bcbe:	d006      	beq.n	800bcce <EE_CleanUp_IT+0xe6>
 800bcc0:	4b32      	ldr	r3, [pc, #200]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	029b      	lsls	r3, r3, #10
 800bcc6:	0859      	lsrs	r1, r3, #1
 800bcc8:	4b31      	ldr	r3, [pc, #196]	; (800bd90 <EE_CleanUp_IT+0x1a8>)
 800bcca:	400b      	ands	r3, r1
 800bccc:	e001      	b.n	800bcd2 <EE_CleanUp_IT+0xea>
 800bcce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcd2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bcd6:	fbb1 f1f3 	udiv	r1, r1, r3
 800bcda:	4b2c      	ldr	r3, [pc, #176]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bce4:	4283      	cmp	r3, r0
 800bce6:	d006      	beq.n	800bcf6 <EE_CleanUp_IT+0x10e>
 800bce8:	4b28      	ldr	r3, [pc, #160]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	029b      	lsls	r3, r3, #10
 800bcee:	0858      	lsrs	r0, r3, #1
 800bcf0:	4b27      	ldr	r3, [pc, #156]	; (800bd90 <EE_CleanUp_IT+0x1a8>)
 800bcf2:	4003      	ands	r3, r0
 800bcf4:	e001      	b.n	800bcfa <EE_CleanUp_IT+0x112>
 800bcf6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcfa:	fb01 f303 	mul.w	r3, r1, r3
 800bcfe:	4413      	add	r3, r2
 800bd00:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800bd02:	68b8      	ldr	r0, [r7, #8]
 800bd04:	f000 ffba 	bl	800cc7c <GetPageState>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 800bd0c:	79bb      	ldrb	r3, [r7, #6]
 800bd0e:	2b04      	cmp	r3, #4
 800bd10:	d001      	beq.n	800bd16 <EE_CleanUp_IT+0x12e>
        {
          return EE_ERROR_NOERASING_PAGE;
 800bd12:	2305      	movs	r3, #5
 800bd14:	e035      	b.n	800bd82 <EE_CleanUp_IT+0x19a>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	3302      	adds	r3, #2
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d3c1      	bcc.n	800bcaa <EE_CleanUp_IT+0xc2>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
      #endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800bd26:	2102      	movs	r1, #2
 800bd28:	6978      	ldr	r0, [r7, #20]
 800bd2a:	f001 f8a5 	bl	800ce78 <FI_PageErase_IT>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <EE_CleanUp_IT+0x150>
      {
        return EE_ERASE_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e024      	b.n	800bd82 <EE_CleanUp_IT+0x19a>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800bd38:	f001 f8f2 	bl	800cf20 <FI_CacheFlush>
        return EE_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e020      	b.n	800bd82 <EE_CleanUp_IT+0x19a>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	3302      	adds	r3, #2
 800bd44:	617b      	str	r3, [r7, #20]
 800bd46:	4b11      	ldr	r3, [pc, #68]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d006      	beq.n	800bd62 <EE_CleanUp_IT+0x17a>
 800bd54:	4b0d      	ldr	r3, [pc, #52]	; (800bd8c <EE_CleanUp_IT+0x1a4>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	029b      	lsls	r3, r3, #10
 800bd5a:	085a      	lsrs	r2, r3, #1
 800bd5c:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <EE_CleanUp_IT+0x1a8>)
 800bd5e:	4013      	ands	r3, r2
 800bd60:	e001      	b.n	800bd66 <EE_CleanUp_IT+0x17e>
 800bd62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bd66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bd6a:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd6e:	fb03 f301 	mul.w	r3, r3, r1
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	0adb      	lsrs	r3, r3, #11
 800bd76:	3304      	adds	r3, #4
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	f4ff af5d 	bcc.w	800bc3a <EE_CleanUp_IT+0x52>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800bd80:	2305      	movs	r3, #5
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	1fff75e0 	.word	0x1fff75e0
 800bd90:	01fffe00 	.word	0x01fffe00

0800bd94 <EE_DeleteCorruptedFlashAddress>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_DeleteCorruptedFlashAddress(uint32_t Address)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  return FI_DeleteCorruptedFlashAddress(Address);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f001 f92f 	bl	800d000 <FI_DeleteCorruptedFlashAddress>
 800bda2:	4603      	mov	r3, r0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <ReadVariable>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08a      	sub	sp, #40	; 0x28
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800bdb8:	f04f 0200 	mov.w	r2, #0
 800bdbc:	f04f 0300 	mov.w	r3, #0
 800bdc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800bdc8:	2300      	movs	r3, #0
 800bdca:	623b      	str	r3, [r7, #32]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	61fb      	str	r3, [r7, #28]
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 800bdd4:	2305      	movs	r3, #5
 800bdd6:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 800bdd8:	2000      	movs	r0, #0
 800bdda:	f000 f941 	bl	800c060 <FindPage>
 800bdde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde6:	d101      	bne.n	800bdec <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e0ed      	b.n	800bfc8 <ReadVariable+0x21c>
  }
  pageaddress = PAGE_ADDRESS(page);
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bdf2:	02da      	lsls	r2, r3, #11
 800bdf4:	4b76      	ldr	r3, [pc, #472]	; (800bfd0 <ReadVariable+0x224>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bdfe:	428b      	cmp	r3, r1
 800be00:	d006      	beq.n	800be10 <ReadVariable+0x64>
 800be02:	4b73      	ldr	r3, [pc, #460]	; (800bfd0 <ReadVariable+0x224>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	029b      	lsls	r3, r3, #10
 800be08:	0859      	lsrs	r1, r3, #1
 800be0a:	4b72      	ldr	r3, [pc, #456]	; (800bfd4 <ReadVariable+0x228>)
 800be0c:	400b      	ands	r3, r1
 800be0e:	e001      	b.n	800be14 <ReadVariable+0x68>
 800be10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be18:	fbb1 f1f3 	udiv	r1, r1, r3
 800be1c:	4b6c      	ldr	r3, [pc, #432]	; (800bfd0 <ReadVariable+0x224>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	b29b      	uxth	r3, r3
 800be22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800be26:	4283      	cmp	r3, r0
 800be28:	d006      	beq.n	800be38 <ReadVariable+0x8c>
 800be2a:	4b69      	ldr	r3, [pc, #420]	; (800bfd0 <ReadVariable+0x224>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	029b      	lsls	r3, r3, #10
 800be30:	0858      	lsrs	r0, r3, #1
 800be32:	4b68      	ldr	r3, [pc, #416]	; (800bfd4 <ReadVariable+0x228>)
 800be34:	4003      	ands	r3, r0
 800be36:	e001      	b.n	800be3c <ReadVariable+0x90>
 800be38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be3c:	fb01 f303 	mul.w	r3, r1, r3
 800be40:	4413      	add	r3, r2
 800be42:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 800be44:	6a38      	ldr	r0, [r7, #32]
 800be46:	f000 ff19 	bl	800cc7c <GetPageState>
 800be4a:	4603      	mov	r3, r0
 800be4c:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800be4e:	e0ae      	b.n	800bfae <ReadVariable+0x202>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800be50:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800be54:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800be56:	e03f      	b.n	800bed8 <ReadVariable+0x12c>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 800be58:	6a3a      	ldr	r2, [r7, #32]
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	4413      	add	r3, r2
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (addressvalue != EE_PAGESTAT_ERASED)
 800be66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	bf08      	it	eq
 800be70:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800be74:	d02d      	beq.n	800bed2 <ReadVariable+0x126>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800be76:	8a3b      	ldrh	r3, [r7, #16]
 800be78:	88fa      	ldrh	r2, [r7, #6]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d129      	bne.n	800bed2 <ReadVariable+0x126>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800be7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800be82:	f04f 0200 	mov.w	r2, #0
 800be86:	f04f 0300 	mov.w	r3, #0
 800be8a:	000a      	movs	r2, r1
 800be8c:	2300      	movs	r3, #0
 800be8e:	8a3b      	ldrh	r3, [r7, #16]
 800be90:	4619      	mov	r1, r3
 800be92:	4610      	mov	r0, r2
 800be94:	f000 ff68 	bl	800cd68 <CalculateCrc>
 800be98:	4603      	mov	r3, r0
 800be9a:	60fb      	str	r3, [r7, #12]

          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 800be9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	0c02      	lsrs	r2, r0, #16
 800beaa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800beae:	0c0b      	lsrs	r3, r1, #16
 800beb0:	b293      	uxth	r3, r2
 800beb2:	461a      	mov	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d10b      	bne.n	800bed2 <ReadVariable+0x126>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 800beba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bebe:	f04f 0200 	mov.w	r2, #0
 800bec2:	f04f 0300 	mov.w	r3, #0
 800bec6:	000a      	movs	r2, r1
 800bec8:	2300      	movs	r3, #0
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	e07a      	b.n	800bfc8 <ReadVariable+0x21c>
          }
        }
      }
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	3b08      	subs	r3, #8
 800bed6:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	2b1f      	cmp	r3, #31
 800bedc:	d8bc      	bhi.n	800be58 <ReadVariable+0xac>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800bede:	4b3c      	ldr	r3, [pc, #240]	; (800bfd0 <ReadVariable+0x224>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bee8:	4293      	cmp	r3, r2
 800beea:	d006      	beq.n	800befa <ReadVariable+0x14e>
 800beec:	4b38      	ldr	r3, [pc, #224]	; (800bfd0 <ReadVariable+0x224>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	029b      	lsls	r3, r3, #10
 800bef2:	085a      	lsrs	r2, r3, #1
 800bef4:	4b37      	ldr	r3, [pc, #220]	; (800bfd4 <ReadVariable+0x228>)
 800bef6:	4013      	ands	r3, r2
 800bef8:	e001      	b.n	800befe <ReadVariable+0x152>
 800befa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800befe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bf02:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf06:	fb03 f301 	mul.w	r3, r3, r1
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	0adb      	lsrs	r3, r3, #11
 800bf0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	3303      	adds	r3, #3
 800bf14:	f003 0103 	and.w	r1, r3, #3
 800bf18:	4b2d      	ldr	r3, [pc, #180]	; (800bfd0 <ReadVariable+0x224>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d006      	beq.n	800bf34 <ReadVariable+0x188>
 800bf26:	4b2a      	ldr	r3, [pc, #168]	; (800bfd0 <ReadVariable+0x224>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	029b      	lsls	r3, r3, #10
 800bf2c:	085a      	lsrs	r2, r3, #1
 800bf2e:	4b29      	ldr	r3, [pc, #164]	; (800bfd4 <ReadVariable+0x228>)
 800bf30:	4013      	ands	r3, r2
 800bf32:	e001      	b.n	800bf38 <ReadVariable+0x18c>
 800bf34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bf3c:	fbb2 f0f3 	udiv	r0, r2, r3
 800bf40:	fb03 f300 	mul.w	r3, r3, r0
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	0adb      	lsrs	r3, r3, #11
 800bf48:	440b      	add	r3, r1
 800bf4a:	627b      	str	r3, [r7, #36]	; 0x24
    pageaddress = PAGE_ADDRESS(page);
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bf52:	02da      	lsls	r2, r3, #11
 800bf54:	4b1e      	ldr	r3, [pc, #120]	; (800bfd0 <ReadVariable+0x224>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf5e:	428b      	cmp	r3, r1
 800bf60:	d006      	beq.n	800bf70 <ReadVariable+0x1c4>
 800bf62:	4b1b      	ldr	r3, [pc, #108]	; (800bfd0 <ReadVariable+0x224>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	029b      	lsls	r3, r3, #10
 800bf68:	0859      	lsrs	r1, r3, #1
 800bf6a:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <ReadVariable+0x228>)
 800bf6c:	400b      	ands	r3, r1
 800bf6e:	e001      	b.n	800bf74 <ReadVariable+0x1c8>
 800bf70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bf78:	fbb1 f1f3 	udiv	r1, r1, r3
 800bf7c:	4b14      	ldr	r3, [pc, #80]	; (800bfd0 <ReadVariable+0x224>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bf86:	4283      	cmp	r3, r0
 800bf88:	d006      	beq.n	800bf98 <ReadVariable+0x1ec>
 800bf8a:	4b11      	ldr	r3, [pc, #68]	; (800bfd0 <ReadVariable+0x224>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	029b      	lsls	r3, r3, #10
 800bf90:	0858      	lsrs	r0, r3, #1
 800bf92:	4b10      	ldr	r3, [pc, #64]	; (800bfd4 <ReadVariable+0x228>)
 800bf94:	4003      	ands	r3, r0
 800bf96:	e001      	b.n	800bf9c <ReadVariable+0x1f0>
 800bf98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf9c:	fb01 f303 	mul.w	r3, r1, r3
 800bfa0:	4413      	add	r3, r2
 800bfa2:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 800bfa4:	6a38      	ldr	r0, [r7, #32]
 800bfa6:	f000 fe69 	bl	800cc7c <GetPageState>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800bfae:	7efb      	ldrb	r3, [r7, #27]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	f43f af4d 	beq.w	800be50 <ReadVariable+0xa4>
 800bfb6:	7efb      	ldrb	r3, [r7, #27]
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	f43f af49 	beq.w	800be50 <ReadVariable+0xa4>
 800bfbe:	7efb      	ldrb	r3, [r7, #27]
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	f43f af45 	beq.w	800be50 <ReadVariable+0xa4>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800bfc6:	2307      	movs	r3, #7
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3728      	adds	r7, #40	; 0x28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	1fff75e0 	.word	0x1fff75e0
 800bfd4:	01fffe00 	.word	0x01fffe00

0800bfd8 <WriteVariable>:
  *           - EE_CLEANUP_REQUIRED: on success, with page transfer occured
  *           - EE_FLASH_USED: flash currently used by CPU2
  *           - EE error code: if an error occurs
  */
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	6039      	str	r1, [r7, #0]
 800bfe2:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
  #ifdef DUALCORE_FLASH_SHARING
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
  #else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800bfe8:	88fb      	ldrh	r3, [r7, #6]
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fc91 	bl	800c914 <VerifyPagesFullWriteVariable>
 800bff2:	4603      	mov	r3, r0
 800bff4:	81fb      	strh	r3, [r7, #14]
  #endif
  if (status == EE_PAGE_FULL)
 800bff6:	89fb      	ldrh	r3, [r7, #14]
 800bff8:	2b12      	cmp	r3, #18
 800bffa:	d107      	bne.n	800c00c <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 800bffc:	88fb      	ldrh	r3, [r7, #6]
 800bffe:	2200      	movs	r2, #0
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	4618      	mov	r0, r3
 800c004:	f000 f998 	bl	800c338 <PagesTransfer>
 800c008:	4603      	mov	r3, r0
 800c00a:	e000      	b.n	800c00e <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 800c00c:	89fb      	ldrh	r3, [r7, #14]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800c016:	b480      	push	{r7}
 800c018:	b085      	sub	sp, #20
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 800c020:	2311      	movs	r3, #17
 800c022:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 800c028:	e00f      	b.n	800c04a <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
    if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	4413      	add	r3, r2
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c038:	bf08      	it	eq
 800c03a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800c03e:	d001      	beq.n	800c044 <VerifyPageFullyErased+0x2e>
    {
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 800c040:	2310      	movs	r3, #16
 800c042:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	3308      	adds	r3, #8
 800c048:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d3eb      	bcc.n	800c02a <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 800c052:	89fb      	ldrh	r3, [r7, #14]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 800c06a:	2305      	movs	r3, #5
 800c06c:	75fb      	strb	r3, [r7, #23]
 800c06e:	2305      	movs	r3, #5
 800c070:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 800c072:	2300      	movs	r3, #0
 800c074:	613b      	str	r3, [r7, #16]
 800c076:	2300      	movs	r3, #0
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	2300      	movs	r3, #0
 800c07c:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 800c07e:	4baa      	ldr	r3, [pc, #680]	; (800c328 <FindPage+0x2c8>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c08a:	02da      	lsls	r2, r3, #11
 800c08c:	4ba7      	ldr	r3, [pc, #668]	; (800c32c <FindPage+0x2cc>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	b29b      	uxth	r3, r3
 800c092:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c096:	428b      	cmp	r3, r1
 800c098:	d006      	beq.n	800c0a8 <FindPage+0x48>
 800c09a:	4ba4      	ldr	r3, [pc, #656]	; (800c32c <FindPage+0x2cc>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	029b      	lsls	r3, r3, #10
 800c0a0:	0859      	lsrs	r1, r3, #1
 800c0a2:	4ba3      	ldr	r3, [pc, #652]	; (800c330 <FindPage+0x2d0>)
 800c0a4:	400b      	ands	r3, r1
 800c0a6:	e001      	b.n	800c0ac <FindPage+0x4c>
 800c0a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c0b0:	fbb1 f1f3 	udiv	r1, r1, r3
 800c0b4:	4b9d      	ldr	r3, [pc, #628]	; (800c32c <FindPage+0x2cc>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c0be:	4283      	cmp	r3, r0
 800c0c0:	d006      	beq.n	800c0d0 <FindPage+0x70>
 800c0c2:	4b9a      	ldr	r3, [pc, #616]	; (800c32c <FindPage+0x2cc>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	029b      	lsls	r3, r3, #10
 800c0c8:	0858      	lsrs	r0, r3, #1
 800c0ca:	4b99      	ldr	r3, [pc, #612]	; (800c330 <FindPage+0x2d0>)
 800c0cc:	4003      	ands	r3, r0
 800c0ce:	e001      	b.n	800c0d4 <FindPage+0x74>
 800c0d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0d4:	fb01 f303 	mul.w	r3, r1, r3
 800c0d8:	4413      	add	r3, r2
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 fdce 	bl	800cc7c <GetPageState>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800c0e4:	4b91      	ldr	r3, [pc, #580]	; (800c32c <FindPage+0x2cc>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d006      	beq.n	800c100 <FindPage+0xa0>
 800c0f2:	4b8e      	ldr	r3, [pc, #568]	; (800c32c <FindPage+0x2cc>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	029b      	lsls	r3, r3, #10
 800c0f8:	085a      	lsrs	r2, r3, #1
 800c0fa:	4b8d      	ldr	r3, [pc, #564]	; (800c330 <FindPage+0x2d0>)
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	e001      	b.n	800c104 <FindPage+0xa4>
 800c100:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c104:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c108:	fbb2 f1f3 	udiv	r1, r2, r3
 800c10c:	fb03 f301 	mul.w	r3, r3, r1
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	0adb      	lsrs	r3, r3, #11
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	3301      	adds	r3, #1
 800c11a:	f003 0103 	and.w	r1, r3, #3
 800c11e:	4b83      	ldr	r3, [pc, #524]	; (800c32c <FindPage+0x2cc>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	b29b      	uxth	r3, r3
 800c124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c128:	4293      	cmp	r3, r2
 800c12a:	d006      	beq.n	800c13a <FindPage+0xda>
 800c12c:	4b7f      	ldr	r3, [pc, #508]	; (800c32c <FindPage+0x2cc>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	029b      	lsls	r3, r3, #10
 800c132:	085a      	lsrs	r2, r3, #1
 800c134:	4b7e      	ldr	r3, [pc, #504]	; (800c330 <FindPage+0x2d0>)
 800c136:	4013      	ands	r3, r2
 800c138:	e001      	b.n	800c13e <FindPage+0xde>
 800c13a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c13e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c142:	fbb2 f0f3 	udiv	r0, r2, r3
 800c146:	fb03 f300 	mul.w	r3, r3, r0
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	0adb      	lsrs	r3, r3, #11
 800c14e:	440b      	add	r3, r1
 800c150:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c158:	02da      	lsls	r2, r3, #11
 800c15a:	4b74      	ldr	r3, [pc, #464]	; (800c32c <FindPage+0x2cc>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c164:	428b      	cmp	r3, r1
 800c166:	d006      	beq.n	800c176 <FindPage+0x116>
 800c168:	4b70      	ldr	r3, [pc, #448]	; (800c32c <FindPage+0x2cc>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	029b      	lsls	r3, r3, #10
 800c16e:	0859      	lsrs	r1, r3, #1
 800c170:	4b6f      	ldr	r3, [pc, #444]	; (800c330 <FindPage+0x2d0>)
 800c172:	400b      	ands	r3, r1
 800c174:	e001      	b.n	800c17a <FindPage+0x11a>
 800c176:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c17a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c17e:	fbb1 f1f3 	udiv	r1, r1, r3
 800c182:	4b6a      	ldr	r3, [pc, #424]	; (800c32c <FindPage+0x2cc>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	b29b      	uxth	r3, r3
 800c188:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c18c:	4283      	cmp	r3, r0
 800c18e:	d006      	beq.n	800c19e <FindPage+0x13e>
 800c190:	4b66      	ldr	r3, [pc, #408]	; (800c32c <FindPage+0x2cc>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	029b      	lsls	r3, r3, #10
 800c196:	0858      	lsrs	r0, r3, #1
 800c198:	4b65      	ldr	r3, [pc, #404]	; (800c330 <FindPage+0x2d0>)
 800c19a:	4003      	ands	r3, r0
 800c19c:	e001      	b.n	800c1a2 <FindPage+0x142>
 800c19e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1a2:	fb01 f303 	mul.w	r3, r1, r3
 800c1a6:	4413      	add	r3, r2
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 fd67 	bl	800cc7c <GetPageState>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 800c1b2:	4b5e      	ldr	r3, [pc, #376]	; (800c32c <FindPage+0x2cc>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d006      	beq.n	800c1ce <FindPage+0x16e>
 800c1c0:	4b5a      	ldr	r3, [pc, #360]	; (800c32c <FindPage+0x2cc>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	029b      	lsls	r3, r3, #10
 800c1c6:	085a      	lsrs	r2, r3, #1
 800c1c8:	4b59      	ldr	r3, [pc, #356]	; (800c330 <FindPage+0x2d0>)
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	e001      	b.n	800c1d2 <FindPage+0x172>
 800c1ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c1d6:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1da:	fb03 f301 	mul.w	r3, r3, r1
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	0adb      	lsrs	r3, r3, #11
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	3303      	adds	r3, #3
 800c1e8:	f003 0103 	and.w	r1, r3, #3
 800c1ec:	4b4f      	ldr	r3, [pc, #316]	; (800c32c <FindPage+0x2cc>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d006      	beq.n	800c208 <FindPage+0x1a8>
 800c1fa:	4b4c      	ldr	r3, [pc, #304]	; (800c32c <FindPage+0x2cc>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	029b      	lsls	r3, r3, #10
 800c200:	085a      	lsrs	r2, r3, #1
 800c202:	4b4b      	ldr	r3, [pc, #300]	; (800c330 <FindPage+0x2d0>)
 800c204:	4013      	ands	r3, r2
 800c206:	e001      	b.n	800c20c <FindPage+0x1ac>
 800c208:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c20c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c210:	fbb2 f0f3 	udiv	r0, r2, r3
 800c214:	fb03 f300 	mul.w	r3, r3, r0
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	0adb      	lsrs	r3, r3, #11
 800c21c:	440b      	add	r3, r1
 800c21e:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d071      	beq.n	800c30a <FindPage+0x2aa>
 800c226:	2b02      	cmp	r3, #2
 800c228:	dc77      	bgt.n	800c31a <FindPage+0x2ba>
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d060      	beq.n	800c2f0 <FindPage+0x290>
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d173      	bne.n	800c31a <FindPage+0x2ba>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	2b02      	cmp	r3, #2
 800c236:	d12a      	bne.n	800c28e <FindPage+0x22e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800c238:	4b3e      	ldr	r3, [pc, #248]	; (800c334 <FindPage+0x2d4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c240:	d201      	bcs.n	800c246 <FindPage+0x1e6>
        {
          /* Return current Active page */
          return currentpage;
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	e06b      	b.n	800c31e <FindPage+0x2be>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800c246:	7dbb      	ldrb	r3, [r7, #22]
 800c248:	2b04      	cmp	r3, #4
 800c24a:	d107      	bne.n	800c25c <FindPage+0x1fc>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 800c24c:	f7ff fbf6 	bl	800ba3c <EE_CleanUp>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <FindPage+0x1fc>
            {
              return EE_NO_PAGE_FOUND;
 800c256:	f04f 33ff 	mov.w	r3, #4294967295
 800c25a:	e060      	b.n	800c31e <FindPage+0x2be>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800c25c:	2103      	movs	r1, #3
 800c25e:	6938      	ldr	r0, [r7, #16]
 800c260:	f000 fbf2 	bl	800ca48 <SetPageState>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <FindPage+0x210>
          {
            return EE_NO_PAGE_FOUND;
 800c26a:	f04f 33ff 	mov.w	r3, #4294967295
 800c26e:	e056      	b.n	800c31e <FindPage+0x2be>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 800c270:	2102      	movs	r1, #2
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f000 fbe8 	bl	800ca48 <SetPageState>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <FindPage+0x224>
          {
            return EE_NO_PAGE_FOUND;
 800c27e:	f04f 33ff 	mov.w	r3, #4294967295
 800c282:	e04c      	b.n	800c31e <FindPage+0x2be>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800c284:	4b2b      	ldr	r3, [pc, #172]	; (800c334 <FindPage+0x2d4>)
 800c286:	2220      	movs	r2, #32
 800c288:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	e047      	b.n	800c31e <FindPage+0x2be>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800c28e:	7dfb      	ldrb	r3, [r7, #23]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d12a      	bne.n	800c2ea <FindPage+0x28a>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 800c294:	4b27      	ldr	r3, [pc, #156]	; (800c334 <FindPage+0x2d4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c29c:	d201      	bcs.n	800c2a2 <FindPage+0x242>
          {
            /* Return current receive page */
            return currentpage;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	e03d      	b.n	800c31e <FindPage+0x2be>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 800c2a2:	7dbb      	ldrb	r3, [r7, #22]
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	d107      	bne.n	800c2b8 <FindPage+0x258>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800c2a8:	f7ff fbc8 	bl	800ba3c <EE_CleanUp>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <FindPage+0x258>
              {
                return EE_NO_PAGE_FOUND;
 800c2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b6:	e032      	b.n	800c31e <FindPage+0x2be>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800c2b8:	2103      	movs	r1, #3
 800c2ba:	6938      	ldr	r0, [r7, #16]
 800c2bc:	f000 fbc4 	bl	800ca48 <SetPageState>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d002      	beq.n	800c2cc <FindPage+0x26c>
            {
              return EE_NO_PAGE_FOUND;
 800c2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ca:	e028      	b.n	800c31e <FindPage+0x2be>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 fbba 	bl	800ca48 <SetPageState>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <FindPage+0x280>
            {
              return EE_NO_PAGE_FOUND;
 800c2da:	f04f 33ff 	mov.w	r3, #4294967295
 800c2de:	e01e      	b.n	800c31e <FindPage+0x2be>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800c2e0:	4b14      	ldr	r3, [pc, #80]	; (800c334 <FindPage+0x2d4>)
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	e019      	b.n	800c31e <FindPage+0x2be>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800c2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ee:	e016      	b.n	800c31e <FindPage+0x2be>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d101      	bne.n	800c2fa <FindPage+0x29a>
      {
        return currentpage;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	e011      	b.n	800c31e <FindPage+0x2be>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d101      	bne.n	800c304 <FindPage+0x2a4>
        {
          return previouspage;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	e00c      	b.n	800c31e <FindPage+0x2be>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800c304:	f04f 33ff 	mov.w	r3, #4294967295
 800c308:	e009      	b.n	800c31e <FindPage+0x2be>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 800c30a:	7dbb      	ldrb	r3, [r7, #22]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <FindPage+0x2b4>
      {
        return followingpage;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	e004      	b.n	800c31e <FindPage+0x2be>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 800c314:	f04f 33ff 	mov.w	r3, #4294967295
 800c318:	e001      	b.n	800c31e <FindPage+0x2be>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	20000252 	.word	0x20000252
 800c32c:	1fff75e0 	.word	0x1fff75e0
 800c330:	01fffe00 	.word	0x01fffe00
 800c334:	20000030 	.word	0x20000030

0800c338 <PagesTransfer>:
  * @retval EE_Status
  *           - EE_CLEANUP_REQUIRED: on success
  *           - EE error code: if an error occurs
  */
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08a      	sub	sp, #40	; 0x28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	6039      	str	r1, [r7, #0]
 800c342:	80fb      	strh	r3, [r7, #6]
 800c344:	4613      	mov	r3, r2
 800c346:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 800c348:	2305      	movs	r3, #5
 800c34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t pageaddress = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800c35a:	f04f 0200 	mov.w	r2, #0
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	e9c7 2304 	strd	r2, r3, [r7, #16]
  EE_Status status = EE_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60bb      	str	r3, [r7, #8]

  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 800c36e:	797b      	ldrb	r3, [r7, #5]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <PagesTransfer+0x40>
 800c374:	2302      	movs	r3, #2
 800c376:	e000      	b.n	800c37a <PagesTransfer+0x42>
 800c378:	2301      	movs	r3, #1
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7ff fe70 	bl	800c060 <FindPage>
 800c380:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 800c382:	6a3b      	ldr	r3, [r7, #32]
 800c384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c388:	d101      	bne.n	800c38e <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 800c38a:	2304      	movs	r3, #4
 800c38c:	e2b3      	b.n	800c8f6 <PagesTransfer+0x5be>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 800c38e:	4bb4      	ldr	r3, [pc, #720]	; (800c660 <PagesTransfer+0x328>)
 800c390:	2200      	movs	r2, #0
 800c392:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	b2da      	uxtb	r2, r3
 800c398:	4bb2      	ldr	r3, [pc, #712]	; (800c664 <PagesTransfer+0x32c>)
 800c39a:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800c39c:	4bb2      	ldr	r3, [pc, #712]	; (800c668 <PagesTransfer+0x330>)
 800c39e:	2220      	movs	r2, #32
 800c3a0:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 800c3a2:	797b      	ldrb	r3, [r7, #5]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d108      	bne.n	800c3ba <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	6a38      	ldr	r0, [r7, #32]
 800c3ac:	f000 fb4c 	bl	800ca48 <SetPageState>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	e29d      	b.n	800c8f6 <PagesTransfer+0x5be>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 800c3ba:	4bac      	ldr	r3, [pc, #688]	; (800c66c <PagesTransfer+0x334>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d006      	beq.n	800c3d6 <PagesTransfer+0x9e>
 800c3c8:	4ba8      	ldr	r3, [pc, #672]	; (800c66c <PagesTransfer+0x334>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	029b      	lsls	r3, r3, #10
 800c3ce:	085a      	lsrs	r2, r3, #1
 800c3d0:	4ba7      	ldr	r3, [pc, #668]	; (800c670 <PagesTransfer+0x338>)
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	e001      	b.n	800c3da <PagesTransfer+0xa2>
 800c3d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c3da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c3de:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3e2:	fb03 f301 	mul.w	r3, r3, r1
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	0adb      	lsrs	r3, r3, #11
 800c3ea:	6a3a      	ldr	r2, [r7, #32]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	3303      	adds	r3, #3
 800c3f0:	f003 0103 	and.w	r1, r3, #3
 800c3f4:	4b9d      	ldr	r3, [pc, #628]	; (800c66c <PagesTransfer+0x334>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d006      	beq.n	800c410 <PagesTransfer+0xd8>
 800c402:	4b9a      	ldr	r3, [pc, #616]	; (800c66c <PagesTransfer+0x334>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	029b      	lsls	r3, r3, #10
 800c408:	085a      	lsrs	r2, r3, #1
 800c40a:	4b99      	ldr	r3, [pc, #612]	; (800c670 <PagesTransfer+0x338>)
 800c40c:	4013      	ands	r3, r2
 800c40e:	e001      	b.n	800c414 <PagesTransfer+0xdc>
 800c410:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c414:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c418:	fbb2 f0f3 	udiv	r0, r2, r3
 800c41c:	fb03 f300 	mul.w	r3, r3, r0
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	0adb      	lsrs	r3, r3, #11
 800c424:	440b      	add	r3, r1
 800c426:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c42e:	02da      	lsls	r2, r3, #11
 800c430:	4b8e      	ldr	r3, [pc, #568]	; (800c66c <PagesTransfer+0x334>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	b29b      	uxth	r3, r3
 800c436:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c43a:	428b      	cmp	r3, r1
 800c43c:	d006      	beq.n	800c44c <PagesTransfer+0x114>
 800c43e:	4b8b      	ldr	r3, [pc, #556]	; (800c66c <PagesTransfer+0x334>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	029b      	lsls	r3, r3, #10
 800c444:	0859      	lsrs	r1, r3, #1
 800c446:	4b8a      	ldr	r3, [pc, #552]	; (800c670 <PagesTransfer+0x338>)
 800c448:	400b      	ands	r3, r1
 800c44a:	e001      	b.n	800c450 <PagesTransfer+0x118>
 800c44c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c450:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c454:	fbb1 f1f3 	udiv	r1, r1, r3
 800c458:	4b84      	ldr	r3, [pc, #528]	; (800c66c <PagesTransfer+0x334>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c462:	4283      	cmp	r3, r0
 800c464:	d006      	beq.n	800c474 <PagesTransfer+0x13c>
 800c466:	4b81      	ldr	r3, [pc, #516]	; (800c66c <PagesTransfer+0x334>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	029b      	lsls	r3, r3, #10
 800c46c:	0858      	lsrs	r0, r3, #1
 800c46e:	4b80      	ldr	r3, [pc, #512]	; (800c670 <PagesTransfer+0x338>)
 800c470:	4003      	ands	r3, r0
 800c472:	e001      	b.n	800c478 <PagesTransfer+0x140>
 800c474:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c478:	fb01 f303 	mul.w	r3, r1, r3
 800c47c:	4413      	add	r3, r2
 800c47e:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 800c480:	69b8      	ldr	r0, [r7, #24]
 800c482:	f000 fbfb 	bl	800cc7c <GetPageState>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800c48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c490:	2b02      	cmp	r3, #2
 800c492:	d004      	beq.n	800c49e <PagesTransfer+0x166>
 800c494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c498:	2b04      	cmp	r3, #4
 800c49a:	f040 8102 	bne.w	800c6a2 <PagesTransfer+0x36a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800c49e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d108      	bne.n	800c4b8 <PagesTransfer+0x180>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800c4a6:	2104      	movs	r1, #4
 800c4a8:	6a38      	ldr	r0, [r7, #32]
 800c4aa:	f000 facd 	bl	800ca48 <SetPageState>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <PagesTransfer+0x180>
      {
        return EE_WRITE_ERROR;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	e21e      	b.n	800c8f6 <PagesTransfer+0x5be>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 800c4b8:	4b6c      	ldr	r3, [pc, #432]	; (800c66c <PagesTransfer+0x334>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d006      	beq.n	800c4d4 <PagesTransfer+0x19c>
 800c4c6:	4b69      	ldr	r3, [pc, #420]	; (800c66c <PagesTransfer+0x334>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	029b      	lsls	r3, r3, #10
 800c4cc:	085a      	lsrs	r2, r3, #1
 800c4ce:	4b68      	ldr	r3, [pc, #416]	; (800c670 <PagesTransfer+0x338>)
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	e001      	b.n	800c4d8 <PagesTransfer+0x1a0>
 800c4d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c4dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800c4e0:	fb03 f301 	mul.w	r3, r3, r1
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	0adb      	lsrs	r3, r3, #11
 800c4e8:	6a3a      	ldr	r2, [r7, #32]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	3303      	adds	r3, #3
 800c4ee:	f003 0103 	and.w	r1, r3, #3
 800c4f2:	4b5e      	ldr	r3, [pc, #376]	; (800c66c <PagesTransfer+0x334>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d006      	beq.n	800c50e <PagesTransfer+0x1d6>
 800c500:	4b5a      	ldr	r3, [pc, #360]	; (800c66c <PagesTransfer+0x334>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	029b      	lsls	r3, r3, #10
 800c506:	085a      	lsrs	r2, r3, #1
 800c508:	4b59      	ldr	r3, [pc, #356]	; (800c670 <PagesTransfer+0x338>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	e001      	b.n	800c512 <PagesTransfer+0x1da>
 800c50e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c512:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c516:	fbb2 f0f3 	udiv	r0, r2, r3
 800c51a:	fb03 f300 	mul.w	r3, r3, r0
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	0adb      	lsrs	r3, r3, #11
 800c522:	440b      	add	r3, r1
 800c524:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 800c526:	6a3b      	ldr	r3, [r7, #32]
 800c528:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c52c:	02da      	lsls	r2, r3, #11
 800c52e:	4b4f      	ldr	r3, [pc, #316]	; (800c66c <PagesTransfer+0x334>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	b29b      	uxth	r3, r3
 800c534:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c538:	428b      	cmp	r3, r1
 800c53a:	d006      	beq.n	800c54a <PagesTransfer+0x212>
 800c53c:	4b4b      	ldr	r3, [pc, #300]	; (800c66c <PagesTransfer+0x334>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	029b      	lsls	r3, r3, #10
 800c542:	0859      	lsrs	r1, r3, #1
 800c544:	4b4a      	ldr	r3, [pc, #296]	; (800c670 <PagesTransfer+0x338>)
 800c546:	400b      	ands	r3, r1
 800c548:	e001      	b.n	800c54e <PagesTransfer+0x216>
 800c54a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c54e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c552:	fbb1 f1f3 	udiv	r1, r1, r3
 800c556:	4b45      	ldr	r3, [pc, #276]	; (800c66c <PagesTransfer+0x334>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c560:	4283      	cmp	r3, r0
 800c562:	d006      	beq.n	800c572 <PagesTransfer+0x23a>
 800c564:	4b41      	ldr	r3, [pc, #260]	; (800c66c <PagesTransfer+0x334>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	029b      	lsls	r3, r3, #10
 800c56a:	0858      	lsrs	r0, r3, #1
 800c56c:	4b40      	ldr	r3, [pc, #256]	; (800c670 <PagesTransfer+0x338>)
 800c56e:	4003      	ands	r3, r0
 800c570:	e001      	b.n	800c576 <PagesTransfer+0x23e>
 800c572:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c576:	fb01 f303 	mul.w	r3, r1, r3
 800c57a:	4413      	add	r3, r2
 800c57c:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 800c57e:	69b8      	ldr	r0, [r7, #24]
 800c580:	f000 fb7c 	bl	800cc7c <GetPageState>
 800c584:	4603      	mov	r3, r0
 800c586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800c58a:	e07f      	b.n	800c68c <PagesTransfer+0x354>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 800c58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c590:	2b03      	cmp	r3, #3
 800c592:	d108      	bne.n	800c5a6 <PagesTransfer+0x26e>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800c594:	2104      	movs	r1, #4
 800c596:	6a38      	ldr	r0, [r7, #32]
 800c598:	f000 fa56 	bl	800ca48 <SetPageState>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <PagesTransfer+0x26e>
        {
          return EE_WRITE_ERROR;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	e1a7      	b.n	800c8f6 <PagesTransfer+0x5be>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 800c5a6:	4b31      	ldr	r3, [pc, #196]	; (800c66c <PagesTransfer+0x334>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d006      	beq.n	800c5c2 <PagesTransfer+0x28a>
 800c5b4:	4b2d      	ldr	r3, [pc, #180]	; (800c66c <PagesTransfer+0x334>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	029b      	lsls	r3, r3, #10
 800c5ba:	085a      	lsrs	r2, r3, #1
 800c5bc:	4b2c      	ldr	r3, [pc, #176]	; (800c670 <PagesTransfer+0x338>)
 800c5be:	4013      	ands	r3, r2
 800c5c0:	e001      	b.n	800c5c6 <PagesTransfer+0x28e>
 800c5c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c5c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c5ca:	fbb2 f1f3 	udiv	r1, r2, r3
 800c5ce:	fb03 f301 	mul.w	r3, r3, r1
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	0adb      	lsrs	r3, r3, #11
 800c5d6:	6a3a      	ldr	r2, [r7, #32]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	3303      	adds	r3, #3
 800c5dc:	f003 0103 	and.w	r1, r3, #3
 800c5e0:	4b22      	ldr	r3, [pc, #136]	; (800c66c <PagesTransfer+0x334>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d006      	beq.n	800c5fc <PagesTransfer+0x2c4>
 800c5ee:	4b1f      	ldr	r3, [pc, #124]	; (800c66c <PagesTransfer+0x334>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	029b      	lsls	r3, r3, #10
 800c5f4:	085a      	lsrs	r2, r3, #1
 800c5f6:	4b1e      	ldr	r3, [pc, #120]	; (800c670 <PagesTransfer+0x338>)
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	e001      	b.n	800c600 <PagesTransfer+0x2c8>
 800c5fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c600:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c604:	fbb2 f0f3 	udiv	r0, r2, r3
 800c608:	fb03 f300 	mul.w	r3, r3, r0
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	0adb      	lsrs	r3, r3, #11
 800c610:	440b      	add	r3, r1
 800c612:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c61a:	02da      	lsls	r2, r3, #11
 800c61c:	4b13      	ldr	r3, [pc, #76]	; (800c66c <PagesTransfer+0x334>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	b29b      	uxth	r3, r3
 800c622:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c626:	428b      	cmp	r3, r1
 800c628:	d006      	beq.n	800c638 <PagesTransfer+0x300>
 800c62a:	4b10      	ldr	r3, [pc, #64]	; (800c66c <PagesTransfer+0x334>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	029b      	lsls	r3, r3, #10
 800c630:	0859      	lsrs	r1, r3, #1
 800c632:	4b0f      	ldr	r3, [pc, #60]	; (800c670 <PagesTransfer+0x338>)
 800c634:	400b      	ands	r3, r1
 800c636:	e001      	b.n	800c63c <PagesTransfer+0x304>
 800c638:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c63c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c640:	fbb1 f1f3 	udiv	r1, r1, r3
 800c644:	4b09      	ldr	r3, [pc, #36]	; (800c66c <PagesTransfer+0x334>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	b29b      	uxth	r3, r3
 800c64a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c64e:	4283      	cmp	r3, r0
 800c650:	d010      	beq.n	800c674 <PagesTransfer+0x33c>
 800c652:	4b06      	ldr	r3, [pc, #24]	; (800c66c <PagesTransfer+0x334>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	029b      	lsls	r3, r3, #10
 800c658:	0858      	lsrs	r0, r3, #1
 800c65a:	4b05      	ldr	r3, [pc, #20]	; (800c670 <PagesTransfer+0x338>)
 800c65c:	4003      	ands	r3, r0
 800c65e:	e00b      	b.n	800c678 <PagesTransfer+0x340>
 800c660:	20000250 	.word	0x20000250
 800c664:	20000252 	.word	0x20000252
 800c668:	20000030 	.word	0x20000030
 800c66c:	1fff75e0 	.word	0x1fff75e0
 800c670:	01fffe00 	.word	0x01fffe00
 800c674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c678:	fb01 f303 	mul.w	r3, r1, r3
 800c67c:	4413      	add	r3, r2
 800c67e:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 800c680:	69b8      	ldr	r0, [r7, #24]
 800c682:	f000 fafb 	bl	800cc7c <GetPageState>
 800c686:	4603      	mov	r3, r0
 800c688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800c68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c690:	2b03      	cmp	r3, #3
 800c692:	f43f af7b 	beq.w	800c58c <PagesTransfer+0x254>
 800c696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	f43f af76 	beq.w	800c58c <PagesTransfer+0x254>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800c6a0:	e008      	b.n	800c6b4 <PagesTransfer+0x37c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 800c6a2:	797b      	ldrb	r3, [r7, #5]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d103      	bne.n	800c6b0 <PagesTransfer+0x378>
 800c6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d001      	beq.n	800c6b4 <PagesTransfer+0x37c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 800c6b0:	230a      	movs	r3, #10
 800c6b2:	e120      	b.n	800c8f6 <PagesTransfer+0x5be>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 800c6b4:	797b      	ldrb	r3, [r7, #5]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	f040 80d1 	bne.w	800c85e <PagesTransfer+0x526>
  {
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800c6bc:	2320      	movs	r3, #32
 800c6be:	61fb      	str	r3, [r7, #28]
 800c6c0:	e047      	b.n	800c752 <PagesTransfer+0x41a>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800c6c2:	4b8f      	ldr	r3, [pc, #572]	; (800c900 <PagesTransfer+0x5c8>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c6ca:	02da      	lsls	r2, r3, #11
 800c6cc:	4b8d      	ldr	r3, [pc, #564]	; (800c904 <PagesTransfer+0x5cc>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c6d6:	428b      	cmp	r3, r1
 800c6d8:	d006      	beq.n	800c6e8 <PagesTransfer+0x3b0>
 800c6da:	4b8a      	ldr	r3, [pc, #552]	; (800c904 <PagesTransfer+0x5cc>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	029b      	lsls	r3, r3, #10
 800c6e0:	0859      	lsrs	r1, r3, #1
 800c6e2:	4b89      	ldr	r3, [pc, #548]	; (800c908 <PagesTransfer+0x5d0>)
 800c6e4:	400b      	ands	r3, r1
 800c6e6:	e001      	b.n	800c6ec <PagesTransfer+0x3b4>
 800c6e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c6ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6f0:	fbb1 f1f3 	udiv	r1, r1, r3
 800c6f4:	4b83      	ldr	r3, [pc, #524]	; (800c904 <PagesTransfer+0x5cc>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c6fe:	4283      	cmp	r3, r0
 800c700:	d006      	beq.n	800c710 <PagesTransfer+0x3d8>
 800c702:	4b80      	ldr	r3, [pc, #512]	; (800c904 <PagesTransfer+0x5cc>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	029b      	lsls	r3, r3, #10
 800c708:	0858      	lsrs	r0, r3, #1
 800c70a:	4b7f      	ldr	r3, [pc, #508]	; (800c908 <PagesTransfer+0x5d0>)
 800c70c:	4003      	ands	r3, r0
 800c70e:	e001      	b.n	800c714 <PagesTransfer+0x3dc>
 800c710:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c714:	fb01 f303 	mul.w	r3, r1, r3
 800c718:	441a      	add	r2, r3
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	4413      	add	r3, r2
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	e9c7 2304 	strd	r2, r3, [r7, #16]

      /* Check if element is valid */
      if (addressvalue != EE_PAGESTAT_ERASED)
 800c726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72e:	bf08      	it	eq
 800c730:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800c734:	d012      	beq.n	800c75c <PagesTransfer+0x424>
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 800c736:	4b75      	ldr	r3, [pc, #468]	; (800c90c <PagesTransfer+0x5d4>)
 800c738:	881b      	ldrh	r3, [r3, #0]
 800c73a:	3301      	adds	r3, #1
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	4b73      	ldr	r3, [pc, #460]	; (800c90c <PagesTransfer+0x5d4>)
 800c740:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 800c742:	4b73      	ldr	r3, [pc, #460]	; (800c910 <PagesTransfer+0x5d8>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3308      	adds	r3, #8
 800c748:	4a71      	ldr	r2, [pc, #452]	; (800c910 <PagesTransfer+0x5d8>)
 800c74a:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	3308      	adds	r3, #8
 800c750:	61fb      	str	r3, [r7, #28]
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c758:	d3b3      	bcc.n	800c6c2 <PagesTransfer+0x38a>
 800c75a:	e000      	b.n	800c75e <PagesTransfer+0x426>
      }
      else
      {
        break;
 800c75c:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 800c75e:	4b68      	ldr	r3, [pc, #416]	; (800c900 <PagesTransfer+0x5c8>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800c764:	2300      	movs	r3, #0
 800c766:	61fb      	str	r3, [r7, #28]
 800c768:	e074      	b.n	800c854 <PagesTransfer+0x51c>
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 800c76a:	4b66      	ldr	r3, [pc, #408]	; (800c904 <PagesTransfer+0x5cc>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c774:	4293      	cmp	r3, r2
 800c776:	d006      	beq.n	800c786 <PagesTransfer+0x44e>
 800c778:	4b62      	ldr	r3, [pc, #392]	; (800c904 <PagesTransfer+0x5cc>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	029b      	lsls	r3, r3, #10
 800c77e:	085a      	lsrs	r2, r3, #1
 800c780:	4b61      	ldr	r3, [pc, #388]	; (800c908 <PagesTransfer+0x5d0>)
 800c782:	4013      	ands	r3, r2
 800c784:	e001      	b.n	800c78a <PagesTransfer+0x452>
 800c786:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c78a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c78e:	fbb2 f1f3 	udiv	r1, r2, r3
 800c792:	fb03 f301 	mul.w	r3, r3, r1
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	0adb      	lsrs	r3, r3, #11
 800c79a:	6a3a      	ldr	r2, [r7, #32]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	3303      	adds	r3, #3
 800c7a0:	f003 0103 	and.w	r1, r3, #3
 800c7a4:	4b57      	ldr	r3, [pc, #348]	; (800c904 <PagesTransfer+0x5cc>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d006      	beq.n	800c7c0 <PagesTransfer+0x488>
 800c7b2:	4b54      	ldr	r3, [pc, #336]	; (800c904 <PagesTransfer+0x5cc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	029b      	lsls	r3, r3, #10
 800c7b8:	085a      	lsrs	r2, r3, #1
 800c7ba:	4b53      	ldr	r3, [pc, #332]	; (800c908 <PagesTransfer+0x5d0>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	e001      	b.n	800c7c4 <PagesTransfer+0x48c>
 800c7c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c7c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c7c8:	fbb2 f0f3 	udiv	r0, r2, r3
 800c7cc:	fb03 f300 	mul.w	r3, r3, r0
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	0adb      	lsrs	r3, r3, #11
 800c7d4:	440b      	add	r3, r1
 800c7d6:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7de:	02da      	lsls	r2, r3, #11
 800c7e0:	4b48      	ldr	r3, [pc, #288]	; (800c904 <PagesTransfer+0x5cc>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c7ea:	428b      	cmp	r3, r1
 800c7ec:	d006      	beq.n	800c7fc <PagesTransfer+0x4c4>
 800c7ee:	4b45      	ldr	r3, [pc, #276]	; (800c904 <PagesTransfer+0x5cc>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	029b      	lsls	r3, r3, #10
 800c7f4:	0859      	lsrs	r1, r3, #1
 800c7f6:	4b44      	ldr	r3, [pc, #272]	; (800c908 <PagesTransfer+0x5d0>)
 800c7f8:	400b      	ands	r3, r1
 800c7fa:	e001      	b.n	800c800 <PagesTransfer+0x4c8>
 800c7fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c800:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c804:	fbb1 f1f3 	udiv	r1, r1, r3
 800c808:	4b3e      	ldr	r3, [pc, #248]	; (800c904 <PagesTransfer+0x5cc>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c812:	4283      	cmp	r3, r0
 800c814:	d006      	beq.n	800c824 <PagesTransfer+0x4ec>
 800c816:	4b3b      	ldr	r3, [pc, #236]	; (800c904 <PagesTransfer+0x5cc>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	029b      	lsls	r3, r3, #10
 800c81c:	0858      	lsrs	r0, r3, #1
 800c81e:	4b3a      	ldr	r3, [pc, #232]	; (800c908 <PagesTransfer+0x5d0>)
 800c820:	4003      	ands	r3, r0
 800c822:	e001      	b.n	800c828 <PagesTransfer+0x4f0>
 800c824:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c828:	fb01 f303 	mul.w	r3, r1, r3
 800c82c:	4413      	add	r3, r2
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fa24 	bl	800cc7c <GetPageState>
 800c834:	4603      	mov	r3, r0
 800c836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800c83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c83e:	2b03      	cmp	r3, #3
 800c840:	d10c      	bne.n	800c85c <PagesTransfer+0x524>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800c842:	4b32      	ldr	r3, [pc, #200]	; (800c90c <PagesTransfer+0x5d4>)
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	33fc      	adds	r3, #252	; 0xfc
 800c848:	b29a      	uxth	r2, r3
 800c84a:	4b30      	ldr	r3, [pc, #192]	; (800c90c <PagesTransfer+0x5d4>)
 800c84c:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	3301      	adds	r3, #1
 800c852:	61fb      	str	r3, [r7, #28]
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	2b03      	cmp	r3, #3
 800c858:	d987      	bls.n	800c76a <PagesTransfer+0x432>
 800c85a:	e000      	b.n	800c85e <PagesTransfer+0x526>
      }
      else
      {
        break;
 800c85c:	bf00      	nop
    return EE_WRITE_ERROR;
  }
#else
  /* Write the variable passed as parameter in the new active page */
  /* If program operation was failed, a Flash error code is returned */
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 800c85e:	88fb      	ldrh	r3, [r7, #6]
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	4618      	mov	r0, r3
 800c864:	f000 f856 	bl	800c914 <VerifyPagesFullWriteVariable>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <PagesTransfer+0x53a>
  {
    return EE_WRITE_ERROR;
 800c86e:	2302      	movs	r3, #2
 800c870:	e041      	b.n	800c8f6 <PagesTransfer+0x5be>
  /* ordered from the beginning. */
  /* In case of recovery, Pre-Last element in receive page could be */
  /* corrupted if reset occured during write of this element, */
  /* and last element is dummy value that we have just written. */
  /* Transfer shall then resume from (uhNbWrittenElements-3) variable index */
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800c872:	4b26      	ldr	r3, [pc, #152]	; (800c90c <PagesTransfer+0x5d4>)
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	2b02      	cmp	r3, #2
 800c878:	d903      	bls.n	800c882 <PagesTransfer+0x54a>
 800c87a:	4b24      	ldr	r3, [pc, #144]	; (800c90c <PagesTransfer+0x5d4>)
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	3b02      	subs	r3, #2
 800c880:	e000      	b.n	800c884 <PagesTransfer+0x54c>
 800c882:	2301      	movs	r3, #1
 800c884:	61fb      	str	r3, [r7, #28]
 800c886:	e026      	b.n	800c8d6 <PagesTransfer+0x59e>
  {
    /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 800c888:	88fb      	ldrh	r3, [r7, #6]
 800c88a:	69fa      	ldr	r2, [r7, #28]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d01f      	beq.n	800c8d0 <PagesTransfer+0x598>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	b29b      	uxth	r3, r3
 800c894:	f107 0208 	add.w	r2, r7, #8
 800c898:	4611      	mov	r1, r2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7ff fa86 	bl	800bdac <ReadVariable>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 800c8a4:	89fb      	ldrh	r3, [r7, #14]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10d      	bne.n	800c8c6 <PagesTransfer+0x58e>
        /* Transfer the variable to the new active page */
        /* If program operation was failed, a Flash error code is returned */
        #ifdef DUALCORE_FLASH_SHARING
        status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
        #else
        status = VerifyPagesFullWriteVariable(varidx, DataValue);
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 f82e 	bl	800c914 <VerifyPagesFullWriteVariable>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	81fb      	strh	r3, [r7, #14]
        #endif
        if (status != EE_OK)
 800c8bc:	89fb      	ldrh	r3, [r7, #14]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <PagesTransfer+0x598>
        {
          return status;
 800c8c2:	89fb      	ldrh	r3, [r7, #14]
 800c8c4:	e017      	b.n	800c8f6 <PagesTransfer+0x5be>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 800c8c6:	89fb      	ldrh	r3, [r7, #14]
 800c8c8:	2b07      	cmp	r3, #7
 800c8ca:	d001      	beq.n	800c8d0 <PagesTransfer+0x598>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 800c8cc:	89fb      	ldrh	r3, [r7, #14]
 800c8ce:	e012      	b.n	800c8f6 <PagesTransfer+0x5be>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	61fb      	str	r3, [r7, #28]
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d9d5      	bls.n	800c888 <PagesTransfer+0x550>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800c8dc:	4b08      	ldr	r3, [pc, #32]	; (800c900 <PagesTransfer+0x5c8>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2102      	movs	r1, #2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 f8b0 	bl	800ca48 <SetPageState>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <PagesTransfer+0x5ba>
  {
    return EE_WRITE_ERROR;
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	e001      	b.n	800c8f6 <PagesTransfer+0x5be>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 800c8f2:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3728      	adds	r7, #40	; 0x28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20000252 	.word	0x20000252
 800c904:	1fff75e0 	.word	0x1fff75e0
 800c908:	01fffe00 	.word	0x01fffe00
 800c90c:	20000250 	.word	0x20000250
 800c910:	20000030 	.word	0x20000030

0800c914 <VerifyPagesFullWriteVariable>:
#ifdef DUALCORE_FLASH_SHARING
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 800c914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c918:	b087      	sub	sp, #28
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	4603      	mov	r3, r0
 800c91e:	6039      	str	r1, [r7, #0]
 800c920:	80fb      	strh	r3, [r7, #6]
  uint32_t crc = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	617b      	str	r3, [r7, #20]

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800c926:	4b44      	ldr	r3, [pc, #272]	; (800ca38 <VerifyPagesFullWriteVariable+0x124>)
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800c92e:	d301      	bcc.n	800c934 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 800c930:	2312      	movs	r3, #18
 800c932:	e07b      	b.n	800ca2c <VerifyPagesFullWriteVariable+0x118>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 800c934:	2001      	movs	r0, #1
 800c936:	f7ff fb93 	bl	800c060 <FindPage>
 800c93a:	6138      	str	r0, [r7, #16]
  uint32_t activepageaddress = 0U;
 800c93c:	2300      	movs	r3, #0
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c946:	d101      	bne.n	800c94c <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800c948:	2303      	movs	r3, #3
 800c94a:	e06f      	b.n	800ca2c <VerifyPagesFullWriteVariable+0x118>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c952:	02da      	lsls	r2, r3, #11
 800c954:	4b39      	ldr	r3, [pc, #228]	; (800ca3c <VerifyPagesFullWriteVariable+0x128>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c95e:	428b      	cmp	r3, r1
 800c960:	d006      	beq.n	800c970 <VerifyPagesFullWriteVariable+0x5c>
 800c962:	4b36      	ldr	r3, [pc, #216]	; (800ca3c <VerifyPagesFullWriteVariable+0x128>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	029b      	lsls	r3, r3, #10
 800c968:	0859      	lsrs	r1, r3, #1
 800c96a:	4b35      	ldr	r3, [pc, #212]	; (800ca40 <VerifyPagesFullWriteVariable+0x12c>)
 800c96c:	400b      	ands	r3, r1
 800c96e:	e001      	b.n	800c974 <VerifyPagesFullWriteVariable+0x60>
 800c970:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c974:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c978:	fbb1 f1f3 	udiv	r1, r1, r3
 800c97c:	4b2f      	ldr	r3, [pc, #188]	; (800ca3c <VerifyPagesFullWriteVariable+0x128>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	b29b      	uxth	r3, r3
 800c982:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c986:	4283      	cmp	r3, r0
 800c988:	d006      	beq.n	800c998 <VerifyPagesFullWriteVariable+0x84>
 800c98a:	4b2c      	ldr	r3, [pc, #176]	; (800ca3c <VerifyPagesFullWriteVariable+0x128>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	029b      	lsls	r3, r3, #10
 800c990:	0858      	lsrs	r0, r3, #1
 800c992:	4b2b      	ldr	r3, [pc, #172]	; (800ca40 <VerifyPagesFullWriteVariable+0x12c>)
 800c994:	4003      	ands	r3, r0
 800c996:	e001      	b.n	800c99c <VerifyPagesFullWriteVariable+0x88>
 800c998:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c99c:	fb01 f303 	mul.w	r3, r1, r3
 800c9a0:	4413      	add	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
  if ((Data == 0U) && (VirtAddress == 0U))
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d105      	bne.n	800c9b6 <VerifyPagesFullWriteVariable+0xa2>
 800c9aa:	88fb      	ldrh	r3, [r7, #6]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <VerifyPagesFullWriteVariable+0xa2>
  {
    crc = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	617b      	str	r3, [r7, #20]
 800c9b4:	e006      	b.n	800c9c4 <VerifyPagesFullWriteVariable+0xb0>
  }
  else
  {
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 800c9b6:	88fb      	ldrh	r3, [r7, #6]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6838      	ldr	r0, [r7, #0]
 800c9bc:	f000 f9d4 	bl	800cd68 <CalculateCrc>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	617b      	str	r3, [r7, #20]
  EE_Status ee_status = FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc), Write_type);
  if (ee_status != EE_OK) return ee_status;  
#else
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800c9c4:	4b1f      	ldr	r3, [pc, #124]	; (800ca44 <VerifyPagesFullWriteVariable+0x130>)
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	18d6      	adds	r6, r2, r3
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f04f 0100 	mov.w	r1, #0
 800c9d4:	f04f 0200 	mov.w	r2, #0
 800c9d8:	f04f 0300 	mov.w	r3, #0
 800c9dc:	0003      	movs	r3, r0
 800c9de:	2200      	movs	r2, #0
 800c9e0:	6979      	ldr	r1, [r7, #20]
 800c9e2:	0409      	lsls	r1, r1, #16
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	f04f 0100 	mov.w	r1, #0
 800c9ea:	ea42 0400 	orr.w	r4, r2, r0
 800c9ee:	ea43 0501 	orr.w	r5, r3, r1
 800c9f2:	88fa      	ldrh	r2, [r7, #6]
 800c9f4:	f04f 0300 	mov.w	r3, #0
 800c9f8:	ea44 0802 	orr.w	r8, r4, r2
 800c9fc:	ea45 0903 	orr.w	r9, r5, r3
 800ca00:	4642      	mov	r2, r8
 800ca02:	464b      	mov	r3, r9
 800ca04:	4630      	mov	r0, r6
 800ca06:	f000 f9cb 	bl	800cda0 <FI_WriteDoubleWord>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <VerifyPagesFullWriteVariable+0x100>
  {
    return EE_WRITE_ERROR;
 800ca10:	2302      	movs	r3, #2
 800ca12:	e00b      	b.n	800ca2c <VerifyPagesFullWriteVariable+0x118>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800ca14:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <VerifyPagesFullWriteVariable+0x130>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	3308      	adds	r3, #8
 800ca1a:	4a0a      	ldr	r2, [pc, #40]	; (800ca44 <VerifyPagesFullWriteVariable+0x130>)
 800ca1c:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 800ca1e:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <VerifyPagesFullWriteVariable+0x124>)
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	3301      	adds	r3, #1
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <VerifyPagesFullWriteVariable+0x124>)
 800ca28:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	371c      	adds	r7, #28
 800ca30:	46bd      	mov	sp, r7
 800ca32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca36:	bf00      	nop
 800ca38:	20000250 	.word	0x20000250
 800ca3c:	1fff75e0 	.word	0x1fff75e0
 800ca40:	01fffe00 	.word	0x01fffe00
 800ca44:	20000030 	.word	0x20000030

0800ca48 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	617b      	str	r3, [r7, #20]
 800ca58:	2300      	movs	r3, #0
 800ca5a:	613b      	str	r3, [r7, #16]
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	2300      	movs	r3, #0
 800ca62:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ca6a:	02da      	lsls	r2, r3, #11
 800ca6c:	4b80      	ldr	r3, [pc, #512]	; (800cc70 <SetPageState+0x228>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ca76:	428b      	cmp	r3, r1
 800ca78:	d006      	beq.n	800ca88 <SetPageState+0x40>
 800ca7a:	4b7d      	ldr	r3, [pc, #500]	; (800cc70 <SetPageState+0x228>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	029b      	lsls	r3, r3, #10
 800ca80:	0859      	lsrs	r1, r3, #1
 800ca82:	4b7c      	ldr	r3, [pc, #496]	; (800cc74 <SetPageState+0x22c>)
 800ca84:	400b      	ands	r3, r1
 800ca86:	e001      	b.n	800ca8c <SetPageState+0x44>
 800ca88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ca8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ca90:	fbb1 f1f3 	udiv	r1, r1, r3
 800ca94:	4b76      	ldr	r3, [pc, #472]	; (800cc70 <SetPageState+0x228>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ca9e:	4283      	cmp	r3, r0
 800caa0:	d006      	beq.n	800cab0 <SetPageState+0x68>
 800caa2:	4b73      	ldr	r3, [pc, #460]	; (800cc70 <SetPageState+0x228>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	029b      	lsls	r3, r3, #10
 800caa8:	0858      	lsrs	r0, r3, #1
 800caaa:	4b72      	ldr	r3, [pc, #456]	; (800cc74 <SetPageState+0x22c>)
 800caac:	4003      	ands	r3, r0
 800caae:	e001      	b.n	800cab4 <SetPageState+0x6c>
 800cab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cab4:	fb01 f303 	mul.w	r3, r1, r3
 800cab8:	4413      	add	r3, r2
 800caba:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cac2:	02da      	lsls	r2, r3, #11
 800cac4:	4b6a      	ldr	r3, [pc, #424]	; (800cc70 <SetPageState+0x228>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cace:	428b      	cmp	r3, r1
 800cad0:	d006      	beq.n	800cae0 <SetPageState+0x98>
 800cad2:	4b67      	ldr	r3, [pc, #412]	; (800cc70 <SetPageState+0x228>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	029b      	lsls	r3, r3, #10
 800cad8:	0859      	lsrs	r1, r3, #1
 800cada:	4b66      	ldr	r3, [pc, #408]	; (800cc74 <SetPageState+0x22c>)
 800cadc:	400b      	ands	r3, r1
 800cade:	e001      	b.n	800cae4 <SetPageState+0x9c>
 800cae0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cae4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cae8:	fbb1 f1f3 	udiv	r1, r1, r3
 800caec:	4b60      	ldr	r3, [pc, #384]	; (800cc70 <SetPageState+0x228>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800caf6:	4283      	cmp	r3, r0
 800caf8:	d006      	beq.n	800cb08 <SetPageState+0xc0>
 800cafa:	4b5d      	ldr	r3, [pc, #372]	; (800cc70 <SetPageState+0x228>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	029b      	lsls	r3, r3, #10
 800cb00:	0858      	lsrs	r0, r3, #1
 800cb02:	4b5c      	ldr	r3, [pc, #368]	; (800cc74 <SetPageState+0x22c>)
 800cb04:	4003      	ands	r3, r0
 800cb06:	e001      	b.n	800cb0c <SetPageState+0xc4>
 800cb08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb0c:	fb01 f303 	mul.w	r3, r1, r3
 800cb10:	4413      	add	r3, r2
 800cb12:	3308      	adds	r3, #8
 800cb14:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cb1c:	02da      	lsls	r2, r3, #11
 800cb1e:	4b54      	ldr	r3, [pc, #336]	; (800cc70 <SetPageState+0x228>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cb28:	428b      	cmp	r3, r1
 800cb2a:	d006      	beq.n	800cb3a <SetPageState+0xf2>
 800cb2c:	4b50      	ldr	r3, [pc, #320]	; (800cc70 <SetPageState+0x228>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	029b      	lsls	r3, r3, #10
 800cb32:	0859      	lsrs	r1, r3, #1
 800cb34:	4b4f      	ldr	r3, [pc, #316]	; (800cc74 <SetPageState+0x22c>)
 800cb36:	400b      	ands	r3, r1
 800cb38:	e001      	b.n	800cb3e <SetPageState+0xf6>
 800cb3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb3e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb42:	fbb1 f1f3 	udiv	r1, r1, r3
 800cb46:	4b4a      	ldr	r3, [pc, #296]	; (800cc70 <SetPageState+0x228>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cb50:	4283      	cmp	r3, r0
 800cb52:	d006      	beq.n	800cb62 <SetPageState+0x11a>
 800cb54:	4b46      	ldr	r3, [pc, #280]	; (800cc70 <SetPageState+0x228>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	029b      	lsls	r3, r3, #10
 800cb5a:	0858      	lsrs	r0, r3, #1
 800cb5c:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <SetPageState+0x22c>)
 800cb5e:	4003      	ands	r3, r0
 800cb60:	e001      	b.n	800cb66 <SetPageState+0x11e>
 800cb62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb66:	fb01 f303 	mul.w	r3, r1, r3
 800cb6a:	4413      	add	r3, r2
 800cb6c:	3310      	adds	r3, #16
 800cb6e:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cb76:	02da      	lsls	r2, r3, #11
 800cb78:	4b3d      	ldr	r3, [pc, #244]	; (800cc70 <SetPageState+0x228>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cb82:	428b      	cmp	r3, r1
 800cb84:	d006      	beq.n	800cb94 <SetPageState+0x14c>
 800cb86:	4b3a      	ldr	r3, [pc, #232]	; (800cc70 <SetPageState+0x228>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	029b      	lsls	r3, r3, #10
 800cb8c:	0859      	lsrs	r1, r3, #1
 800cb8e:	4b39      	ldr	r3, [pc, #228]	; (800cc74 <SetPageState+0x22c>)
 800cb90:	400b      	ands	r3, r1
 800cb92:	e001      	b.n	800cb98 <SetPageState+0x150>
 800cb94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb9c:	fbb1 f1f3 	udiv	r1, r1, r3
 800cba0:	4b33      	ldr	r3, [pc, #204]	; (800cc70 <SetPageState+0x228>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cbaa:	4283      	cmp	r3, r0
 800cbac:	d006      	beq.n	800cbbc <SetPageState+0x174>
 800cbae:	4b30      	ldr	r3, [pc, #192]	; (800cc70 <SetPageState+0x228>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	029b      	lsls	r3, r3, #10
 800cbb4:	0858      	lsrs	r0, r3, #1
 800cbb6:	4b2f      	ldr	r3, [pc, #188]	; (800cc74 <SetPageState+0x22c>)
 800cbb8:	4003      	ands	r3, r0
 800cbba:	e001      	b.n	800cbc0 <SetPageState+0x178>
 800cbbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbc0:	fb01 f303 	mul.w	r3, r1, r3
 800cbc4:	4413      	add	r3, r2
 800cbc6:	3318      	adds	r3, #24
 800cbc8:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	2b03      	cmp	r3, #3
 800cbd0:	d844      	bhi.n	800cc5c <SetPageState+0x214>
 800cbd2:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <SetPageState+0x190>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800cbe9 	.word	0x0800cbe9
 800cbdc:	0800cc0b 	.word	0x0800cc0b
 800cbe0:	0800cc2d 	.word	0x0800cc2d
 800cbe4:	0800cc45 	.word	0x0800cc45
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 800cbe8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800cbec:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800cbf0:	6978      	ldr	r0, [r7, #20]
 800cbf2:	f000 f8d5 	bl	800cda0 <FI_WriteDoubleWord>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <SetPageState+0x1b8>
      {
        return EE_WRITE_ERROR;
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	e033      	b.n	800cc68 <SetPageState+0x220>
      }
      ubCurrentActivePage = Page;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	4b1c      	ldr	r3, [pc, #112]	; (800cc78 <SetPageState+0x230>)
 800cc06:	701a      	strb	r2, [r3, #0]
    }
    break;
 800cc08:	e02d      	b.n	800cc66 <SetPageState+0x21e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 800cc0a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800cc0e:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800cc12:	6938      	ldr	r0, [r7, #16]
 800cc14:	f000 f8c4 	bl	800cda0 <FI_WriteDoubleWord>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <SetPageState+0x1da>
      {
        return EE_WRITE_ERROR;
 800cc1e:	2302      	movs	r3, #2
 800cc20:	e022      	b.n	800cc68 <SetPageState+0x220>
      }
      ubCurrentActivePage = Page;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <SetPageState+0x230>)
 800cc28:	701a      	strb	r2, [r3, #0]
    }
    break;
 800cc2a:	e01c      	b.n	800cc66 <SetPageState+0x21e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 800cc2c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800cc30:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f000 f8b3 	bl	800cda0 <FI_WriteDoubleWord>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00f      	beq.n	800cc60 <SetPageState+0x218>
      {
        return EE_WRITE_ERROR;
 800cc40:	2302      	movs	r3, #2
 800cc42:	e011      	b.n	800cc68 <SetPageState+0x220>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800cc44:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800cc48:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800cc4c:	68b8      	ldr	r0, [r7, #8]
 800cc4e:	f000 f8a7 	bl	800cda0 <FI_WriteDoubleWord>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d005      	beq.n	800cc64 <SetPageState+0x21c>
      {
        return EE_WRITE_ERROR;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	e005      	b.n	800cc68 <SetPageState+0x220>
      }
    }
    break;
  default:
    break;
 800cc5c:	bf00      	nop
 800cc5e:	e002      	b.n	800cc66 <SetPageState+0x21e>
    break;
 800cc60:	bf00      	nop
 800cc62:	e000      	b.n	800cc66 <SetPageState+0x21e>
    break;
 800cc64:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	1fff75e0 	.word	0x1fff75e0
 800cc74:	01fffe00 	.word	0x01fffe00
 800cc78:	20000252 	.word	0x20000252

0800cc7c <GetPageState>:
  * @brief  Get page state in page header
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
static EE_State_type GetPageState(uint32_t Address)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b08b      	sub	sp, #44	; 0x2c
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 800cc84:	f04f 0200 	mov.w	r2, #0
 800cc88:	f04f 0300 	mov.w	r3, #0
 800cc8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800cc90:	f04f 0200 	mov.w	r2, #0
 800cc94:	f04f 0300 	mov.w	r3, #0
 800cc98:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800cc9c:	f04f 0200 	mov.w	r2, #0
 800cca0:	f04f 0300 	mov.w	r3, #0
 800cca4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cca8:	f04f 0200 	mov.w	r2, #0
 800ccac:	f04f 0300 	mov.w	r3, #0
 800ccb0:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccba:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	3308      	adds	r3, #8
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3310      	adds	r3, #16
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3318      	adds	r3, #24
 800ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccde:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800cce2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccea:	bf08      	it	eq
 800ccec:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800ccf0:	d001      	beq.n	800ccf6 <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 800ccf2:	2304      	movs	r3, #4
 800ccf4:	e01e      	b.n	800cd34 <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800ccf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ccfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfe:	bf08      	it	eq
 800cd00:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800cd04:	d001      	beq.n	800cd0a <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 800cd06:	2303      	movs	r3, #3
 800cd08:	e014      	b.n	800cd34 <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 800cd0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd12:	bf08      	it	eq
 800cd14:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800cd18:	d001      	beq.n	800cd1e <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	e00a      	b.n	800cd34 <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800cd1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd26:	bf08      	it	eq
 800cd28:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800cd2c:	d001      	beq.n	800cd32 <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e000      	b.n	800cd34 <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	372c      	adds	r7, #44	; 0x2c
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800cd44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cd48:	f7fd fdb0 	bl	800a8ac <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 800cd4c:	f248 0105 	movw	r1, #32773	; 0x8005
 800cd50:	4804      	ldr	r0, [pc, #16]	; (800cd64 <ConfigureCrc+0x24>)
 800cd52:	f7fd fd70 	bl	800a836 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800cd56:	2108      	movs	r1, #8
 800cd58:	4802      	ldr	r0, [pc, #8]	; (800cd64 <ConfigureCrc+0x24>)
 800cd5a:	f7fd fd59 	bl	800a810 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800cd5e:	bf00      	nop
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	40023000 	.word	0x40023000

0800cd68 <CalculateCrc>:
  * @param  Data value of  the eeprom variable.
  * @param  VirtAddress address of the eeprom variable.
  * @retval 16-bit CRC value computed on Data and Virtual Address.
  */
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800cd74:	4809      	ldr	r0, [pc, #36]	; (800cd9c <CalculateCrc+0x34>)
 800cd76:	f7fd fd3b 	bl	800a7f0 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
  LL_CRC_FeedData32(CRC, Data);
 800cd7a:	6879      	ldr	r1, [r7, #4]
 800cd7c:	4807      	ldr	r0, [pc, #28]	; (800cd9c <CalculateCrc+0x34>)
 800cd7e:	f7fd fd68 	bl	800a852 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800cd82:	887b      	ldrh	r3, [r7, #2]
 800cd84:	4619      	mov	r1, r3
 800cd86:	4805      	ldr	r0, [pc, #20]	; (800cd9c <CalculateCrc+0x34>)
 800cd88:	f7fd fd71 	bl	800a86e <LL_CRC_FeedData16>

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 800cd8c:	4803      	ldr	r0, [pc, #12]	; (800cd9c <CalculateCrc+0x34>)
 800cd8e:	f7fd fd7f 	bl	800a890 <LL_CRC_ReadData16>
 800cd92:	4603      	mov	r3, r0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	40023000 	.word	0x40023000

0800cda0 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 800cdac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdb0:	68f9      	ldr	r1, [r7, #12]
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	f7f8 fdba 	bl	800592c <HAL_FLASH_Program>
 800cdb8:	4603      	mov	r3, r0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
	...

0800cdc4 <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08a      	sub	sp, #40	; 0x28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	84fb      	strh	r3, [r7, #38]	; 0x26
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t bank = FLASH_BANK_1, page_error = 0U;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	623b      	str	r3, [r7, #32]
 800cdd8:	2300      	movs	r3, #0
 800cdda:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_BANK_2)
  bank = GetBankNumber(PAGE_ADDRESS(Page));
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cde2:	02da      	lsls	r2, r3, #11
 800cde4:	4b22      	ldr	r3, [pc, #136]	; (800ce70 <FI_PageErase+0xac>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cdee:	428b      	cmp	r3, r1
 800cdf0:	d006      	beq.n	800ce00 <FI_PageErase+0x3c>
 800cdf2:	4b1f      	ldr	r3, [pc, #124]	; (800ce70 <FI_PageErase+0xac>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	029b      	lsls	r3, r3, #10
 800cdf8:	0859      	lsrs	r1, r3, #1
 800cdfa:	4b1e      	ldr	r3, [pc, #120]	; (800ce74 <FI_PageErase+0xb0>)
 800cdfc:	400b      	ands	r3, r1
 800cdfe:	e001      	b.n	800ce04 <FI_PageErase+0x40>
 800ce00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ce08:	fbb1 f1f3 	udiv	r1, r1, r3
 800ce0c:	4b18      	ldr	r3, [pc, #96]	; (800ce70 <FI_PageErase+0xac>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ce16:	4283      	cmp	r3, r0
 800ce18:	d006      	beq.n	800ce28 <FI_PageErase+0x64>
 800ce1a:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <FI_PageErase+0xac>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	029b      	lsls	r3, r3, #10
 800ce20:	0858      	lsrs	r0, r3, #1
 800ce22:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <FI_PageErase+0xb0>)
 800ce24:	4003      	ands	r3, r0
 800ce26:	e001      	b.n	800ce2c <FI_PageErase+0x68>
 800ce28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce2c:	fb01 f303 	mul.w	r3, r1, r3
 800ce30:	4413      	add	r3, r2
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 f896 	bl	800cf64 <GetBankNumber>
 800ce38:	6238      	str	r0, [r7, #32]
#endif

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 800ce3e:	887b      	ldrh	r3, [r7, #2]
 800ce40:	61fb      	str	r3, [r7, #28]
  s_eraseinit.Page        = Page;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Banks       = bank;
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800ce4a:	f107 020c 	add.w	r2, r7, #12
 800ce4e:	f107 0310 	add.w	r3, r7, #16
 800ce52:	4611      	mov	r1, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f8 ffc7 	bl	8005de8 <HAL_FLASHEx_Erase>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d001      	beq.n	800ce64 <FI_PageErase+0xa0>
  {
    status = EE_ERASE_ERROR;
 800ce60:	2301      	movs	r3, #1
 800ce62:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  return status;
 800ce64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3728      	adds	r7, #40	; 0x28
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	1fff75e0 	.word	0x1fff75e0
 800ce74:	01fffe00 	.word	0x01fffe00

0800ce78 <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	460b      	mov	r3, r1
 800ce82:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	83fb      	strh	r3, [r7, #30]
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t bank = FLASH_BANK_1;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	61bb      	str	r3, [r7, #24]

#if defined(FLASH_BANK_2)
  bank = GetBankNumber(PAGE_ADDRESS(Page));
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ce92:	02da      	lsls	r2, r3, #11
 800ce94:	4b20      	ldr	r3, [pc, #128]	; (800cf18 <FI_PageErase_IT+0xa0>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ce9e:	428b      	cmp	r3, r1
 800cea0:	d006      	beq.n	800ceb0 <FI_PageErase_IT+0x38>
 800cea2:	4b1d      	ldr	r3, [pc, #116]	; (800cf18 <FI_PageErase_IT+0xa0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	029b      	lsls	r3, r3, #10
 800cea8:	0859      	lsrs	r1, r3, #1
 800ceaa:	4b1c      	ldr	r3, [pc, #112]	; (800cf1c <FI_PageErase_IT+0xa4>)
 800ceac:	400b      	ands	r3, r1
 800ceae:	e001      	b.n	800ceb4 <FI_PageErase_IT+0x3c>
 800ceb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ceb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ceb8:	fbb1 f1f3 	udiv	r1, r1, r3
 800cebc:	4b16      	ldr	r3, [pc, #88]	; (800cf18 <FI_PageErase_IT+0xa0>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cec6:	4283      	cmp	r3, r0
 800cec8:	d006      	beq.n	800ced8 <FI_PageErase_IT+0x60>
 800ceca:	4b13      	ldr	r3, [pc, #76]	; (800cf18 <FI_PageErase_IT+0xa0>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	029b      	lsls	r3, r3, #10
 800ced0:	0858      	lsrs	r0, r3, #1
 800ced2:	4b12      	ldr	r3, [pc, #72]	; (800cf1c <FI_PageErase_IT+0xa4>)
 800ced4:	4003      	ands	r3, r0
 800ced6:	e001      	b.n	800cedc <FI_PageErase_IT+0x64>
 800ced8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cedc:	fb01 f303 	mul.w	r3, r1, r3
 800cee0:	4413      	add	r3, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 f83e 	bl	800cf64 <GetBankNumber>
 800cee8:	61b8      	str	r0, [r7, #24]
#endif

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800ceea:	2300      	movs	r3, #0
 800ceec:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 800ceee:	887b      	ldrh	r3, [r7, #2]
 800cef0:	617b      	str	r3, [r7, #20]
  s_eraseinit.Page        = Page;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	613b      	str	r3, [r7, #16]
  s_eraseinit.Banks       = bank;
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	60fb      	str	r3, [r7, #12]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800cefa:	f107 0308 	add.w	r3, r7, #8
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f9 f814 	bl	8005f2c <HAL_FLASHEx_Erase_IT>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <FI_PageErase_IT+0x96>
  {
    status = EE_ERASE_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	83fb      	strh	r3, [r7, #30]
  }
  return status;
 800cf0e:	8bfb      	ldrh	r3, [r7, #30]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3720      	adds	r7, #32
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	1fff75e0 	.word	0x1fff75e0
 800cf1c:	01fffe00 	.word	0x01fffe00

0800cf20 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 800cf20:	b480      	push	{r7}
 800cf22:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 800cf24:	4b0e      	ldr	r3, [pc, #56]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a0d      	ldr	r2, [pc, #52]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf2e:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 800cf30:	4b0b      	ldr	r3, [pc, #44]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a0a      	ldr	r2, [pc, #40]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	4b08      	ldr	r3, [pc, #32]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a07      	ldr	r2, [pc, #28]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf46:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cf48:	4b05      	ldr	r3, [pc, #20]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a04      	ldr	r2, [pc, #16]	; (800cf60 <FI_CacheFlush+0x40>)
 800cf4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cf52:	6013      	str	r3, [r2, #0]
}
 800cf54:	bf00      	nop
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	40022000 	.word	0x40022000

0800cf64 <GetBankNumber>:
  * @brief  Gets the bank of a given address
  * @param  Address Address of the FLASH Memory
  * @retval Bank_Number The bank of a given address
  */
static uint32_t GetBankNumber(uint32_t Address)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0U;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800cf70:	4b1f      	ldr	r3, [pc, #124]	; (800cff0 <GetBankNumber+0x8c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d119      	bne.n	800cfb0 <GetBankNumber+0x4c>
  {
    /* No Bank swap */
    if (Address < (FLASH_BASE + FLASH_BANK_SIZE))
 800cf7c:	4b1d      	ldr	r3, [pc, #116]	; (800cff4 <GetBankNumber+0x90>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d008      	beq.n	800cf9c <GetBankNumber+0x38>
 800cf8a:	4b1a      	ldr	r3, [pc, #104]	; (800cff4 <GetBankNumber+0x90>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	029b      	lsls	r3, r3, #10
 800cf90:	085a      	lsrs	r2, r3, #1
 800cf92:	4b19      	ldr	r3, [pc, #100]	; (800cff8 <GetBankNumber+0x94>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800cf9a:	e000      	b.n	800cf9e <GetBankNumber+0x3a>
 800cf9c:	4b17      	ldr	r3, [pc, #92]	; (800cffc <GetBankNumber+0x98>)
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d902      	bls.n	800cfaa <GetBankNumber+0x46>
    {
      bank = FLASH_BANK_1;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	60fb      	str	r3, [r7, #12]
 800cfa8:	e01b      	b.n	800cfe2 <GetBankNumber+0x7e>
    }
    else
    {
      bank = FLASH_BANK_2;
 800cfaa:	2302      	movs	r3, #2
 800cfac:	60fb      	str	r3, [r7, #12]
 800cfae:	e018      	b.n	800cfe2 <GetBankNumber+0x7e>
    }
  }
  else
  {
    /* Bank swap */
    if (Address < (FLASH_BASE + FLASH_BANK_SIZE))
 800cfb0:	4b10      	ldr	r3, [pc, #64]	; (800cff4 <GetBankNumber+0x90>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d008      	beq.n	800cfd0 <GetBankNumber+0x6c>
 800cfbe:	4b0d      	ldr	r3, [pc, #52]	; (800cff4 <GetBankNumber+0x90>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	029b      	lsls	r3, r3, #10
 800cfc4:	085a      	lsrs	r2, r3, #1
 800cfc6:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <GetBankNumber+0x94>)
 800cfc8:	4013      	ands	r3, r2
 800cfca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800cfce:	e000      	b.n	800cfd2 <GetBankNumber+0x6e>
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <GetBankNumber+0x98>)
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d902      	bls.n	800cfde <GetBankNumber+0x7a>
    {
      bank = FLASH_BANK_2;
 800cfd8:	2302      	movs	r3, #2
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	e001      	b.n	800cfe2 <GetBankNumber+0x7e>
    }
    else
    {
      bank = FLASH_BANK_1;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	60fb      	str	r3, [r7, #12]
    }
  }

  return bank;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	40010000 	.word	0x40010000
 800cff4:	1fff75e0 	.word	0x1fff75e0
 800cff8:	01fffe00 	.word	0x01fffe00
 800cffc:	08080000 	.word	0x08080000

0800d000 <FI_DeleteCorruptedFlashAddress>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_DeleteCorruptedFlashAddress(uint32_t Address)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  uint32_t dcachetoreactivate = 0U;
 800d008:	2300      	movs	r3, #0
 800d00a:	60bb      	str	r3, [r7, #8]
  EE_Status status = EE_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	81fb      	strh	r3, [r7, #14]

  /* Deactivate the data cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800d010:	4b3c      	ldr	r3, [pc, #240]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d007      	beq.n	800d02c <FI_DeleteCorruptedFlashAddress+0x2c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800d01c:	4b39      	ldr	r3, [pc, #228]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a38      	ldr	r2, [pc, #224]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d026:	6013      	str	r3, [r2, #0]
    dcachetoreactivate = 1U;
 800d028:	2301      	movs	r3, #1
 800d02a:	60bb      	str	r3, [r7, #8]
  }

  /* Set FLASH Programmation bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d02c:	4b35      	ldr	r3, [pc, #212]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	4a34      	ldr	r2, [pc, #208]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d032:	f043 0301 	orr.w	r3, r3, #1
 800d036:	6153      	str	r3, [r2, #20]

  /* Program double word of value 0 */
  *(__IO uint32_t*)(Address) = (uint32_t)0U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4U) = (uint32_t)0U;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	3304      	adds	r3, #4
 800d042:	461a      	mov	r2, r3
 800d044:	2300      	movs	r3, #0
 800d046:	6013      	str	r3, [r2, #0]

  /* Wait programmation completion */
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d048:	bf00      	nop
 800d04a:	4b2e      	ldr	r3, [pc, #184]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1f9      	bne.n	800d04a <FI_DeleteCorruptedFlashAddress+0x4a>
  {
  }

  /* Check if error occured */
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
 800d056:	4b2b      	ldr	r3, [pc, #172]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	f003 0302 	and.w	r3, r3, #2
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d11d      	bne.n	800d09e <FI_DeleteCorruptedFlashAddress+0x9e>
 800d062:	4b28      	ldr	r3, [pc, #160]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	f003 0308 	and.w	r3, r3, #8
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d117      	bne.n	800d09e <FI_DeleteCorruptedFlashAddress+0x9e>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 800d06e:	4b25      	ldr	r3, [pc, #148]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	f003 0310 	and.w	r3, r3, #16
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) ||
 800d076:	2b00      	cmp	r3, #0
 800d078:	d111      	bne.n	800d09e <FI_DeleteCorruptedFlashAddress+0x9e>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 800d07a:	4b22      	ldr	r3, [pc, #136]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d07c:	691b      	ldr	r3, [r3, #16]
 800d07e:	f003 0320 	and.w	r3, r3, #32
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10b      	bne.n	800d09e <FI_DeleteCorruptedFlashAddress+0x9e>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR)))
 800d086:	4b1f      	ldr	r3, [pc, #124]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  ||
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d105      	bne.n	800d09e <FI_DeleteCorruptedFlashAddress+0x9e>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR)))
 800d092:	4b1c      	ldr	r3, [pc, #112]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d001      	beq.n	800d0a2 <FI_DeleteCorruptedFlashAddress+0xa2>
  {
    status = EE_DELETE_ERROR;
 800d09e:	230d      	movs	r3, #13
 800d0a0:	81fb      	strh	r3, [r7, #14]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d0a2:	4b18      	ldr	r3, [pc, #96]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d002      	beq.n	800d0b4 <FI_DeleteCorruptedFlashAddress+0xb4>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d0ae:	4b15      	ldr	r3, [pc, #84]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	611a      	str	r2, [r3, #16]
  }

  /* Clear FLASH Programmation bit */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800d0b4:	4b13      	ldr	r3, [pc, #76]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0b6:	695b      	ldr	r3, [r3, #20]
 800d0b8:	4a12      	ldr	r2, [pc, #72]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0ba:	f023 0301 	bic.w	r3, r3, #1
 800d0be:	6153      	str	r3, [r2, #20]

  /* Flush the caches to be sure of the data consistency */
  if(dcachetoreactivate == 1U)
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d111      	bne.n	800d0ea <FI_DeleteCorruptedFlashAddress+0xea>
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a0e      	ldr	r2, [pc, #56]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d0d0:	6013      	str	r3, [r2, #0]
 800d0d2:	4b0c      	ldr	r3, [pc, #48]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a0b      	ldr	r2, [pc, #44]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0dc:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d0de:	4b09      	ldr	r3, [pc, #36]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a08      	ldr	r2, [pc, #32]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d0e8:	6013      	str	r3, [r2, #0]
  }

  /* Clear FLASH ECCD bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCD);
 800d0ea:	4b06      	ldr	r3, [pc, #24]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	4a05      	ldr	r2, [pc, #20]	; (800d104 <FI_DeleteCorruptedFlashAddress+0x104>)
 800d0f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0f4:	6193      	str	r3, [r2, #24]

  return status;
 800d0f6:	89fb      	ldrh	r3, [r7, #14]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	40022000 	.word	0x40022000

0800d108 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 800d108:	b480      	push	{r7}
 800d10a:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 800d10c:	2300      	movs	r3, #0
#endif
}
 800d10e:	4618      	mov	r0, r3
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <__errno>:
 800d118:	4b01      	ldr	r3, [pc, #4]	; (800d120 <__errno+0x8>)
 800d11a:	6818      	ldr	r0, [r3, #0]
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop
 800d120:	20000034 	.word	0x20000034

0800d124 <__libc_init_array>:
 800d124:	b570      	push	{r4, r5, r6, lr}
 800d126:	4d0d      	ldr	r5, [pc, #52]	; (800d15c <__libc_init_array+0x38>)
 800d128:	4c0d      	ldr	r4, [pc, #52]	; (800d160 <__libc_init_array+0x3c>)
 800d12a:	1b64      	subs	r4, r4, r5
 800d12c:	10a4      	asrs	r4, r4, #2
 800d12e:	2600      	movs	r6, #0
 800d130:	42a6      	cmp	r6, r4
 800d132:	d109      	bne.n	800d148 <__libc_init_array+0x24>
 800d134:	4d0b      	ldr	r5, [pc, #44]	; (800d164 <__libc_init_array+0x40>)
 800d136:	4c0c      	ldr	r4, [pc, #48]	; (800d168 <__libc_init_array+0x44>)
 800d138:	f004 fc46 	bl	80119c8 <_init>
 800d13c:	1b64      	subs	r4, r4, r5
 800d13e:	10a4      	asrs	r4, r4, #2
 800d140:	2600      	movs	r6, #0
 800d142:	42a6      	cmp	r6, r4
 800d144:	d105      	bne.n	800d152 <__libc_init_array+0x2e>
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	f855 3b04 	ldr.w	r3, [r5], #4
 800d14c:	4798      	blx	r3
 800d14e:	3601      	adds	r6, #1
 800d150:	e7ee      	b.n	800d130 <__libc_init_array+0xc>
 800d152:	f855 3b04 	ldr.w	r3, [r5], #4
 800d156:	4798      	blx	r3
 800d158:	3601      	adds	r6, #1
 800d15a:	e7f2      	b.n	800d142 <__libc_init_array+0x1e>
 800d15c:	08012294 	.word	0x08012294
 800d160:	08012294 	.word	0x08012294
 800d164:	08012294 	.word	0x08012294
 800d168:	08012298 	.word	0x08012298

0800d16c <memset>:
 800d16c:	4402      	add	r2, r0
 800d16e:	4603      	mov	r3, r0
 800d170:	4293      	cmp	r3, r2
 800d172:	d100      	bne.n	800d176 <memset+0xa>
 800d174:	4770      	bx	lr
 800d176:	f803 1b01 	strb.w	r1, [r3], #1
 800d17a:	e7f9      	b.n	800d170 <memset+0x4>

0800d17c <__cvt>:
 800d17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d180:	ec55 4b10 	vmov	r4, r5, d0
 800d184:	2d00      	cmp	r5, #0
 800d186:	460e      	mov	r6, r1
 800d188:	4619      	mov	r1, r3
 800d18a:	462b      	mov	r3, r5
 800d18c:	bfbb      	ittet	lt
 800d18e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d192:	461d      	movlt	r5, r3
 800d194:	2300      	movge	r3, #0
 800d196:	232d      	movlt	r3, #45	; 0x2d
 800d198:	700b      	strb	r3, [r1, #0]
 800d19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d19c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d1a0:	4691      	mov	r9, r2
 800d1a2:	f023 0820 	bic.w	r8, r3, #32
 800d1a6:	bfbc      	itt	lt
 800d1a8:	4622      	movlt	r2, r4
 800d1aa:	4614      	movlt	r4, r2
 800d1ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1b0:	d005      	beq.n	800d1be <__cvt+0x42>
 800d1b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d1b6:	d100      	bne.n	800d1ba <__cvt+0x3e>
 800d1b8:	3601      	adds	r6, #1
 800d1ba:	2102      	movs	r1, #2
 800d1bc:	e000      	b.n	800d1c0 <__cvt+0x44>
 800d1be:	2103      	movs	r1, #3
 800d1c0:	ab03      	add	r3, sp, #12
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	ab02      	add	r3, sp, #8
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	ec45 4b10 	vmov	d0, r4, r5
 800d1cc:	4653      	mov	r3, sl
 800d1ce:	4632      	mov	r2, r6
 800d1d0:	f001 fdb6 	bl	800ed40 <_dtoa_r>
 800d1d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d1d8:	4607      	mov	r7, r0
 800d1da:	d102      	bne.n	800d1e2 <__cvt+0x66>
 800d1dc:	f019 0f01 	tst.w	r9, #1
 800d1e0:	d022      	beq.n	800d228 <__cvt+0xac>
 800d1e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1e6:	eb07 0906 	add.w	r9, r7, r6
 800d1ea:	d110      	bne.n	800d20e <__cvt+0x92>
 800d1ec:	783b      	ldrb	r3, [r7, #0]
 800d1ee:	2b30      	cmp	r3, #48	; 0x30
 800d1f0:	d10a      	bne.n	800d208 <__cvt+0x8c>
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	f7f3 fc85 	bl	8000b08 <__aeabi_dcmpeq>
 800d1fe:	b918      	cbnz	r0, 800d208 <__cvt+0x8c>
 800d200:	f1c6 0601 	rsb	r6, r6, #1
 800d204:	f8ca 6000 	str.w	r6, [sl]
 800d208:	f8da 3000 	ldr.w	r3, [sl]
 800d20c:	4499      	add	r9, r3
 800d20e:	2200      	movs	r2, #0
 800d210:	2300      	movs	r3, #0
 800d212:	4620      	mov	r0, r4
 800d214:	4629      	mov	r1, r5
 800d216:	f7f3 fc77 	bl	8000b08 <__aeabi_dcmpeq>
 800d21a:	b108      	cbz	r0, 800d220 <__cvt+0xa4>
 800d21c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d220:	2230      	movs	r2, #48	; 0x30
 800d222:	9b03      	ldr	r3, [sp, #12]
 800d224:	454b      	cmp	r3, r9
 800d226:	d307      	bcc.n	800d238 <__cvt+0xbc>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d22c:	1bdb      	subs	r3, r3, r7
 800d22e:	4638      	mov	r0, r7
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	b004      	add	sp, #16
 800d234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d238:	1c59      	adds	r1, r3, #1
 800d23a:	9103      	str	r1, [sp, #12]
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	e7f0      	b.n	800d222 <__cvt+0xa6>

0800d240 <__exponent>:
 800d240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d242:	4603      	mov	r3, r0
 800d244:	2900      	cmp	r1, #0
 800d246:	bfb8      	it	lt
 800d248:	4249      	neglt	r1, r1
 800d24a:	f803 2b02 	strb.w	r2, [r3], #2
 800d24e:	bfb4      	ite	lt
 800d250:	222d      	movlt	r2, #45	; 0x2d
 800d252:	222b      	movge	r2, #43	; 0x2b
 800d254:	2909      	cmp	r1, #9
 800d256:	7042      	strb	r2, [r0, #1]
 800d258:	dd2a      	ble.n	800d2b0 <__exponent+0x70>
 800d25a:	f10d 0407 	add.w	r4, sp, #7
 800d25e:	46a4      	mov	ip, r4
 800d260:	270a      	movs	r7, #10
 800d262:	46a6      	mov	lr, r4
 800d264:	460a      	mov	r2, r1
 800d266:	fb91 f6f7 	sdiv	r6, r1, r7
 800d26a:	fb07 1516 	mls	r5, r7, r6, r1
 800d26e:	3530      	adds	r5, #48	; 0x30
 800d270:	2a63      	cmp	r2, #99	; 0x63
 800d272:	f104 34ff 	add.w	r4, r4, #4294967295
 800d276:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d27a:	4631      	mov	r1, r6
 800d27c:	dcf1      	bgt.n	800d262 <__exponent+0x22>
 800d27e:	3130      	adds	r1, #48	; 0x30
 800d280:	f1ae 0502 	sub.w	r5, lr, #2
 800d284:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d288:	1c44      	adds	r4, r0, #1
 800d28a:	4629      	mov	r1, r5
 800d28c:	4561      	cmp	r1, ip
 800d28e:	d30a      	bcc.n	800d2a6 <__exponent+0x66>
 800d290:	f10d 0209 	add.w	r2, sp, #9
 800d294:	eba2 020e 	sub.w	r2, r2, lr
 800d298:	4565      	cmp	r5, ip
 800d29a:	bf88      	it	hi
 800d29c:	2200      	movhi	r2, #0
 800d29e:	4413      	add	r3, r2
 800d2a0:	1a18      	subs	r0, r3, r0
 800d2a2:	b003      	add	sp, #12
 800d2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d2ae:	e7ed      	b.n	800d28c <__exponent+0x4c>
 800d2b0:	2330      	movs	r3, #48	; 0x30
 800d2b2:	3130      	adds	r1, #48	; 0x30
 800d2b4:	7083      	strb	r3, [r0, #2]
 800d2b6:	70c1      	strb	r1, [r0, #3]
 800d2b8:	1d03      	adds	r3, r0, #4
 800d2ba:	e7f1      	b.n	800d2a0 <__exponent+0x60>

0800d2bc <_printf_float>:
 800d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c0:	ed2d 8b02 	vpush	{d8}
 800d2c4:	b08d      	sub	sp, #52	; 0x34
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	461f      	mov	r7, r3
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	f002 fe91 	bl	800fff8 <_localeconv_r>
 800d2d6:	f8d0 a000 	ldr.w	sl, [r0]
 800d2da:	4650      	mov	r0, sl
 800d2dc:	f7f2 ff92 	bl	8000204 <strlen>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	9305      	str	r3, [sp, #20]
 800d2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d2f0:	3307      	adds	r3, #7
 800d2f2:	f023 0307 	bic.w	r3, r3, #7
 800d2f6:	f103 0208 	add.w	r2, r3, #8
 800d2fa:	f8c8 2000 	str.w	r2, [r8]
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d306:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d30a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d30e:	9307      	str	r3, [sp, #28]
 800d310:	f8cd 8018 	str.w	r8, [sp, #24]
 800d314:	ee08 0a10 	vmov	s16, r0
 800d318:	4b9f      	ldr	r3, [pc, #636]	; (800d598 <_printf_float+0x2dc>)
 800d31a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d31e:	f04f 32ff 	mov.w	r2, #4294967295
 800d322:	f7f3 fc23 	bl	8000b6c <__aeabi_dcmpun>
 800d326:	bb88      	cbnz	r0, 800d38c <_printf_float+0xd0>
 800d328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d32c:	4b9a      	ldr	r3, [pc, #616]	; (800d598 <_printf_float+0x2dc>)
 800d32e:	f04f 32ff 	mov.w	r2, #4294967295
 800d332:	f7f3 fbfd 	bl	8000b30 <__aeabi_dcmple>
 800d336:	bb48      	cbnz	r0, 800d38c <_printf_float+0xd0>
 800d338:	2200      	movs	r2, #0
 800d33a:	2300      	movs	r3, #0
 800d33c:	4640      	mov	r0, r8
 800d33e:	4649      	mov	r1, r9
 800d340:	f7f3 fbec 	bl	8000b1c <__aeabi_dcmplt>
 800d344:	b110      	cbz	r0, 800d34c <_printf_float+0x90>
 800d346:	232d      	movs	r3, #45	; 0x2d
 800d348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d34c:	4b93      	ldr	r3, [pc, #588]	; (800d59c <_printf_float+0x2e0>)
 800d34e:	4894      	ldr	r0, [pc, #592]	; (800d5a0 <_printf_float+0x2e4>)
 800d350:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d354:	bf94      	ite	ls
 800d356:	4698      	movls	r8, r3
 800d358:	4680      	movhi	r8, r0
 800d35a:	2303      	movs	r3, #3
 800d35c:	6123      	str	r3, [r4, #16]
 800d35e:	9b05      	ldr	r3, [sp, #20]
 800d360:	f023 0204 	bic.w	r2, r3, #4
 800d364:	6022      	str	r2, [r4, #0]
 800d366:	f04f 0900 	mov.w	r9, #0
 800d36a:	9700      	str	r7, [sp, #0]
 800d36c:	4633      	mov	r3, r6
 800d36e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f000 f9d8 	bl	800d728 <_printf_common>
 800d378:	3001      	adds	r0, #1
 800d37a:	f040 8090 	bne.w	800d49e <_printf_float+0x1e2>
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	b00d      	add	sp, #52	; 0x34
 800d384:	ecbd 8b02 	vpop	{d8}
 800d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38c:	4642      	mov	r2, r8
 800d38e:	464b      	mov	r3, r9
 800d390:	4640      	mov	r0, r8
 800d392:	4649      	mov	r1, r9
 800d394:	f7f3 fbea 	bl	8000b6c <__aeabi_dcmpun>
 800d398:	b140      	cbz	r0, 800d3ac <_printf_float+0xf0>
 800d39a:	464b      	mov	r3, r9
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	bfbc      	itt	lt
 800d3a0:	232d      	movlt	r3, #45	; 0x2d
 800d3a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d3a6:	487f      	ldr	r0, [pc, #508]	; (800d5a4 <_printf_float+0x2e8>)
 800d3a8:	4b7f      	ldr	r3, [pc, #508]	; (800d5a8 <_printf_float+0x2ec>)
 800d3aa:	e7d1      	b.n	800d350 <_printf_float+0x94>
 800d3ac:	6863      	ldr	r3, [r4, #4]
 800d3ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d3b2:	9206      	str	r2, [sp, #24]
 800d3b4:	1c5a      	adds	r2, r3, #1
 800d3b6:	d13f      	bne.n	800d438 <_printf_float+0x17c>
 800d3b8:	2306      	movs	r3, #6
 800d3ba:	6063      	str	r3, [r4, #4]
 800d3bc:	9b05      	ldr	r3, [sp, #20]
 800d3be:	6861      	ldr	r1, [r4, #4]
 800d3c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	9303      	str	r3, [sp, #12]
 800d3c8:	ab0a      	add	r3, sp, #40	; 0x28
 800d3ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d3ce:	ab09      	add	r3, sp, #36	; 0x24
 800d3d0:	ec49 8b10 	vmov	d0, r8, r9
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	6022      	str	r2, [r4, #0]
 800d3d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f7ff fecd 	bl	800d17c <__cvt>
 800d3e2:	9b06      	ldr	r3, [sp, #24]
 800d3e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3e6:	2b47      	cmp	r3, #71	; 0x47
 800d3e8:	4680      	mov	r8, r0
 800d3ea:	d108      	bne.n	800d3fe <_printf_float+0x142>
 800d3ec:	1cc8      	adds	r0, r1, #3
 800d3ee:	db02      	blt.n	800d3f6 <_printf_float+0x13a>
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	4299      	cmp	r1, r3
 800d3f4:	dd41      	ble.n	800d47a <_printf_float+0x1be>
 800d3f6:	f1ab 0b02 	sub.w	fp, fp, #2
 800d3fa:	fa5f fb8b 	uxtb.w	fp, fp
 800d3fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d402:	d820      	bhi.n	800d446 <_printf_float+0x18a>
 800d404:	3901      	subs	r1, #1
 800d406:	465a      	mov	r2, fp
 800d408:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d40c:	9109      	str	r1, [sp, #36]	; 0x24
 800d40e:	f7ff ff17 	bl	800d240 <__exponent>
 800d412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d414:	1813      	adds	r3, r2, r0
 800d416:	2a01      	cmp	r2, #1
 800d418:	4681      	mov	r9, r0
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	dc02      	bgt.n	800d424 <_printf_float+0x168>
 800d41e:	6822      	ldr	r2, [r4, #0]
 800d420:	07d2      	lsls	r2, r2, #31
 800d422:	d501      	bpl.n	800d428 <_printf_float+0x16c>
 800d424:	3301      	adds	r3, #1
 800d426:	6123      	str	r3, [r4, #16]
 800d428:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d09c      	beq.n	800d36a <_printf_float+0xae>
 800d430:	232d      	movs	r3, #45	; 0x2d
 800d432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d436:	e798      	b.n	800d36a <_printf_float+0xae>
 800d438:	9a06      	ldr	r2, [sp, #24]
 800d43a:	2a47      	cmp	r2, #71	; 0x47
 800d43c:	d1be      	bne.n	800d3bc <_printf_float+0x100>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1bc      	bne.n	800d3bc <_printf_float+0x100>
 800d442:	2301      	movs	r3, #1
 800d444:	e7b9      	b.n	800d3ba <_printf_float+0xfe>
 800d446:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d44a:	d118      	bne.n	800d47e <_printf_float+0x1c2>
 800d44c:	2900      	cmp	r1, #0
 800d44e:	6863      	ldr	r3, [r4, #4]
 800d450:	dd0b      	ble.n	800d46a <_printf_float+0x1ae>
 800d452:	6121      	str	r1, [r4, #16]
 800d454:	b913      	cbnz	r3, 800d45c <_printf_float+0x1a0>
 800d456:	6822      	ldr	r2, [r4, #0]
 800d458:	07d0      	lsls	r0, r2, #31
 800d45a:	d502      	bpl.n	800d462 <_printf_float+0x1a6>
 800d45c:	3301      	adds	r3, #1
 800d45e:	440b      	add	r3, r1
 800d460:	6123      	str	r3, [r4, #16]
 800d462:	65a1      	str	r1, [r4, #88]	; 0x58
 800d464:	f04f 0900 	mov.w	r9, #0
 800d468:	e7de      	b.n	800d428 <_printf_float+0x16c>
 800d46a:	b913      	cbnz	r3, 800d472 <_printf_float+0x1b6>
 800d46c:	6822      	ldr	r2, [r4, #0]
 800d46e:	07d2      	lsls	r2, r2, #31
 800d470:	d501      	bpl.n	800d476 <_printf_float+0x1ba>
 800d472:	3302      	adds	r3, #2
 800d474:	e7f4      	b.n	800d460 <_printf_float+0x1a4>
 800d476:	2301      	movs	r3, #1
 800d478:	e7f2      	b.n	800d460 <_printf_float+0x1a4>
 800d47a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d480:	4299      	cmp	r1, r3
 800d482:	db05      	blt.n	800d490 <_printf_float+0x1d4>
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	6121      	str	r1, [r4, #16]
 800d488:	07d8      	lsls	r0, r3, #31
 800d48a:	d5ea      	bpl.n	800d462 <_printf_float+0x1a6>
 800d48c:	1c4b      	adds	r3, r1, #1
 800d48e:	e7e7      	b.n	800d460 <_printf_float+0x1a4>
 800d490:	2900      	cmp	r1, #0
 800d492:	bfd4      	ite	le
 800d494:	f1c1 0202 	rsble	r2, r1, #2
 800d498:	2201      	movgt	r2, #1
 800d49a:	4413      	add	r3, r2
 800d49c:	e7e0      	b.n	800d460 <_printf_float+0x1a4>
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	055a      	lsls	r2, r3, #21
 800d4a2:	d407      	bmi.n	800d4b4 <_printf_float+0x1f8>
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	4642      	mov	r2, r8
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	47b8      	blx	r7
 800d4ae:	3001      	adds	r0, #1
 800d4b0:	d12c      	bne.n	800d50c <_printf_float+0x250>
 800d4b2:	e764      	b.n	800d37e <_printf_float+0xc2>
 800d4b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d4b8:	f240 80e0 	bls.w	800d67c <_printf_float+0x3c0>
 800d4bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	f7f3 fb20 	bl	8000b08 <__aeabi_dcmpeq>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d034      	beq.n	800d536 <_printf_float+0x27a>
 800d4cc:	4a37      	ldr	r2, [pc, #220]	; (800d5ac <_printf_float+0x2f0>)
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	4631      	mov	r1, r6
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	47b8      	blx	r7
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	f43f af51 	beq.w	800d37e <_printf_float+0xc2>
 800d4dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	db02      	blt.n	800d4ea <_printf_float+0x22e>
 800d4e4:	6823      	ldr	r3, [r4, #0]
 800d4e6:	07d8      	lsls	r0, r3, #31
 800d4e8:	d510      	bpl.n	800d50c <_printf_float+0x250>
 800d4ea:	ee18 3a10 	vmov	r3, s16
 800d4ee:	4652      	mov	r2, sl
 800d4f0:	4631      	mov	r1, r6
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	47b8      	blx	r7
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	f43f af41 	beq.w	800d37e <_printf_float+0xc2>
 800d4fc:	f04f 0800 	mov.w	r8, #0
 800d500:	f104 091a 	add.w	r9, r4, #26
 800d504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d506:	3b01      	subs	r3, #1
 800d508:	4543      	cmp	r3, r8
 800d50a:	dc09      	bgt.n	800d520 <_printf_float+0x264>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	079b      	lsls	r3, r3, #30
 800d510:	f100 8105 	bmi.w	800d71e <_printf_float+0x462>
 800d514:	68e0      	ldr	r0, [r4, #12]
 800d516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d518:	4298      	cmp	r0, r3
 800d51a:	bfb8      	it	lt
 800d51c:	4618      	movlt	r0, r3
 800d51e:	e730      	b.n	800d382 <_printf_float+0xc6>
 800d520:	2301      	movs	r3, #1
 800d522:	464a      	mov	r2, r9
 800d524:	4631      	mov	r1, r6
 800d526:	4628      	mov	r0, r5
 800d528:	47b8      	blx	r7
 800d52a:	3001      	adds	r0, #1
 800d52c:	f43f af27 	beq.w	800d37e <_printf_float+0xc2>
 800d530:	f108 0801 	add.w	r8, r8, #1
 800d534:	e7e6      	b.n	800d504 <_printf_float+0x248>
 800d536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dc39      	bgt.n	800d5b0 <_printf_float+0x2f4>
 800d53c:	4a1b      	ldr	r2, [pc, #108]	; (800d5ac <_printf_float+0x2f0>)
 800d53e:	2301      	movs	r3, #1
 800d540:	4631      	mov	r1, r6
 800d542:	4628      	mov	r0, r5
 800d544:	47b8      	blx	r7
 800d546:	3001      	adds	r0, #1
 800d548:	f43f af19 	beq.w	800d37e <_printf_float+0xc2>
 800d54c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d550:	4313      	orrs	r3, r2
 800d552:	d102      	bne.n	800d55a <_printf_float+0x29e>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	07d9      	lsls	r1, r3, #31
 800d558:	d5d8      	bpl.n	800d50c <_printf_float+0x250>
 800d55a:	ee18 3a10 	vmov	r3, s16
 800d55e:	4652      	mov	r2, sl
 800d560:	4631      	mov	r1, r6
 800d562:	4628      	mov	r0, r5
 800d564:	47b8      	blx	r7
 800d566:	3001      	adds	r0, #1
 800d568:	f43f af09 	beq.w	800d37e <_printf_float+0xc2>
 800d56c:	f04f 0900 	mov.w	r9, #0
 800d570:	f104 0a1a 	add.w	sl, r4, #26
 800d574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d576:	425b      	negs	r3, r3
 800d578:	454b      	cmp	r3, r9
 800d57a:	dc01      	bgt.n	800d580 <_printf_float+0x2c4>
 800d57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57e:	e792      	b.n	800d4a6 <_printf_float+0x1ea>
 800d580:	2301      	movs	r3, #1
 800d582:	4652      	mov	r2, sl
 800d584:	4631      	mov	r1, r6
 800d586:	4628      	mov	r0, r5
 800d588:	47b8      	blx	r7
 800d58a:	3001      	adds	r0, #1
 800d58c:	f43f aef7 	beq.w	800d37e <_printf_float+0xc2>
 800d590:	f109 0901 	add.w	r9, r9, #1
 800d594:	e7ee      	b.n	800d574 <_printf_float+0x2b8>
 800d596:	bf00      	nop
 800d598:	7fefffff 	.word	0x7fefffff
 800d59c:	08011ddc 	.word	0x08011ddc
 800d5a0:	08011de0 	.word	0x08011de0
 800d5a4:	08011de8 	.word	0x08011de8
 800d5a8:	08011de4 	.word	0x08011de4
 800d5ac:	08011dec 	.word	0x08011dec
 800d5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	bfa8      	it	ge
 800d5b8:	461a      	movge	r2, r3
 800d5ba:	2a00      	cmp	r2, #0
 800d5bc:	4691      	mov	r9, r2
 800d5be:	dc37      	bgt.n	800d630 <_printf_float+0x374>
 800d5c0:	f04f 0b00 	mov.w	fp, #0
 800d5c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5c8:	f104 021a 	add.w	r2, r4, #26
 800d5cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5ce:	9305      	str	r3, [sp, #20]
 800d5d0:	eba3 0309 	sub.w	r3, r3, r9
 800d5d4:	455b      	cmp	r3, fp
 800d5d6:	dc33      	bgt.n	800d640 <_printf_float+0x384>
 800d5d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	db3b      	blt.n	800d658 <_printf_float+0x39c>
 800d5e0:	6823      	ldr	r3, [r4, #0]
 800d5e2:	07da      	lsls	r2, r3, #31
 800d5e4:	d438      	bmi.n	800d658 <_printf_float+0x39c>
 800d5e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5e8:	9b05      	ldr	r3, [sp, #20]
 800d5ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5ec:	1ad3      	subs	r3, r2, r3
 800d5ee:	eba2 0901 	sub.w	r9, r2, r1
 800d5f2:	4599      	cmp	r9, r3
 800d5f4:	bfa8      	it	ge
 800d5f6:	4699      	movge	r9, r3
 800d5f8:	f1b9 0f00 	cmp.w	r9, #0
 800d5fc:	dc35      	bgt.n	800d66a <_printf_float+0x3ae>
 800d5fe:	f04f 0800 	mov.w	r8, #0
 800d602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d606:	f104 0a1a 	add.w	sl, r4, #26
 800d60a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d60e:	1a9b      	subs	r3, r3, r2
 800d610:	eba3 0309 	sub.w	r3, r3, r9
 800d614:	4543      	cmp	r3, r8
 800d616:	f77f af79 	ble.w	800d50c <_printf_float+0x250>
 800d61a:	2301      	movs	r3, #1
 800d61c:	4652      	mov	r2, sl
 800d61e:	4631      	mov	r1, r6
 800d620:	4628      	mov	r0, r5
 800d622:	47b8      	blx	r7
 800d624:	3001      	adds	r0, #1
 800d626:	f43f aeaa 	beq.w	800d37e <_printf_float+0xc2>
 800d62a:	f108 0801 	add.w	r8, r8, #1
 800d62e:	e7ec      	b.n	800d60a <_printf_float+0x34e>
 800d630:	4613      	mov	r3, r2
 800d632:	4631      	mov	r1, r6
 800d634:	4642      	mov	r2, r8
 800d636:	4628      	mov	r0, r5
 800d638:	47b8      	blx	r7
 800d63a:	3001      	adds	r0, #1
 800d63c:	d1c0      	bne.n	800d5c0 <_printf_float+0x304>
 800d63e:	e69e      	b.n	800d37e <_printf_float+0xc2>
 800d640:	2301      	movs	r3, #1
 800d642:	4631      	mov	r1, r6
 800d644:	4628      	mov	r0, r5
 800d646:	9205      	str	r2, [sp, #20]
 800d648:	47b8      	blx	r7
 800d64a:	3001      	adds	r0, #1
 800d64c:	f43f ae97 	beq.w	800d37e <_printf_float+0xc2>
 800d650:	9a05      	ldr	r2, [sp, #20]
 800d652:	f10b 0b01 	add.w	fp, fp, #1
 800d656:	e7b9      	b.n	800d5cc <_printf_float+0x310>
 800d658:	ee18 3a10 	vmov	r3, s16
 800d65c:	4652      	mov	r2, sl
 800d65e:	4631      	mov	r1, r6
 800d660:	4628      	mov	r0, r5
 800d662:	47b8      	blx	r7
 800d664:	3001      	adds	r0, #1
 800d666:	d1be      	bne.n	800d5e6 <_printf_float+0x32a>
 800d668:	e689      	b.n	800d37e <_printf_float+0xc2>
 800d66a:	9a05      	ldr	r2, [sp, #20]
 800d66c:	464b      	mov	r3, r9
 800d66e:	4442      	add	r2, r8
 800d670:	4631      	mov	r1, r6
 800d672:	4628      	mov	r0, r5
 800d674:	47b8      	blx	r7
 800d676:	3001      	adds	r0, #1
 800d678:	d1c1      	bne.n	800d5fe <_printf_float+0x342>
 800d67a:	e680      	b.n	800d37e <_printf_float+0xc2>
 800d67c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d67e:	2a01      	cmp	r2, #1
 800d680:	dc01      	bgt.n	800d686 <_printf_float+0x3ca>
 800d682:	07db      	lsls	r3, r3, #31
 800d684:	d538      	bpl.n	800d6f8 <_printf_float+0x43c>
 800d686:	2301      	movs	r3, #1
 800d688:	4642      	mov	r2, r8
 800d68a:	4631      	mov	r1, r6
 800d68c:	4628      	mov	r0, r5
 800d68e:	47b8      	blx	r7
 800d690:	3001      	adds	r0, #1
 800d692:	f43f ae74 	beq.w	800d37e <_printf_float+0xc2>
 800d696:	ee18 3a10 	vmov	r3, s16
 800d69a:	4652      	mov	r2, sl
 800d69c:	4631      	mov	r1, r6
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b8      	blx	r7
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	f43f ae6b 	beq.w	800d37e <_printf_float+0xc2>
 800d6a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	f7f3 fa2a 	bl	8000b08 <__aeabi_dcmpeq>
 800d6b4:	b9d8      	cbnz	r0, 800d6ee <_printf_float+0x432>
 800d6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6b8:	f108 0201 	add.w	r2, r8, #1
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	4631      	mov	r1, r6
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	47b8      	blx	r7
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	d10e      	bne.n	800d6e6 <_printf_float+0x42a>
 800d6c8:	e659      	b.n	800d37e <_printf_float+0xc2>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	4652      	mov	r2, sl
 800d6ce:	4631      	mov	r1, r6
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	47b8      	blx	r7
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	f43f ae52 	beq.w	800d37e <_printf_float+0xc2>
 800d6da:	f108 0801 	add.w	r8, r8, #1
 800d6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	4543      	cmp	r3, r8
 800d6e4:	dcf1      	bgt.n	800d6ca <_printf_float+0x40e>
 800d6e6:	464b      	mov	r3, r9
 800d6e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6ec:	e6dc      	b.n	800d4a8 <_printf_float+0x1ec>
 800d6ee:	f04f 0800 	mov.w	r8, #0
 800d6f2:	f104 0a1a 	add.w	sl, r4, #26
 800d6f6:	e7f2      	b.n	800d6de <_printf_float+0x422>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	4642      	mov	r2, r8
 800d6fc:	e7df      	b.n	800d6be <_printf_float+0x402>
 800d6fe:	2301      	movs	r3, #1
 800d700:	464a      	mov	r2, r9
 800d702:	4631      	mov	r1, r6
 800d704:	4628      	mov	r0, r5
 800d706:	47b8      	blx	r7
 800d708:	3001      	adds	r0, #1
 800d70a:	f43f ae38 	beq.w	800d37e <_printf_float+0xc2>
 800d70e:	f108 0801 	add.w	r8, r8, #1
 800d712:	68e3      	ldr	r3, [r4, #12]
 800d714:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d716:	1a5b      	subs	r3, r3, r1
 800d718:	4543      	cmp	r3, r8
 800d71a:	dcf0      	bgt.n	800d6fe <_printf_float+0x442>
 800d71c:	e6fa      	b.n	800d514 <_printf_float+0x258>
 800d71e:	f04f 0800 	mov.w	r8, #0
 800d722:	f104 0919 	add.w	r9, r4, #25
 800d726:	e7f4      	b.n	800d712 <_printf_float+0x456>

0800d728 <_printf_common>:
 800d728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d72c:	4616      	mov	r6, r2
 800d72e:	4699      	mov	r9, r3
 800d730:	688a      	ldr	r2, [r1, #8]
 800d732:	690b      	ldr	r3, [r1, #16]
 800d734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d738:	4293      	cmp	r3, r2
 800d73a:	bfb8      	it	lt
 800d73c:	4613      	movlt	r3, r2
 800d73e:	6033      	str	r3, [r6, #0]
 800d740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d744:	4607      	mov	r7, r0
 800d746:	460c      	mov	r4, r1
 800d748:	b10a      	cbz	r2, 800d74e <_printf_common+0x26>
 800d74a:	3301      	adds	r3, #1
 800d74c:	6033      	str	r3, [r6, #0]
 800d74e:	6823      	ldr	r3, [r4, #0]
 800d750:	0699      	lsls	r1, r3, #26
 800d752:	bf42      	ittt	mi
 800d754:	6833      	ldrmi	r3, [r6, #0]
 800d756:	3302      	addmi	r3, #2
 800d758:	6033      	strmi	r3, [r6, #0]
 800d75a:	6825      	ldr	r5, [r4, #0]
 800d75c:	f015 0506 	ands.w	r5, r5, #6
 800d760:	d106      	bne.n	800d770 <_printf_common+0x48>
 800d762:	f104 0a19 	add.w	sl, r4, #25
 800d766:	68e3      	ldr	r3, [r4, #12]
 800d768:	6832      	ldr	r2, [r6, #0]
 800d76a:	1a9b      	subs	r3, r3, r2
 800d76c:	42ab      	cmp	r3, r5
 800d76e:	dc26      	bgt.n	800d7be <_printf_common+0x96>
 800d770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d774:	1e13      	subs	r3, r2, #0
 800d776:	6822      	ldr	r2, [r4, #0]
 800d778:	bf18      	it	ne
 800d77a:	2301      	movne	r3, #1
 800d77c:	0692      	lsls	r2, r2, #26
 800d77e:	d42b      	bmi.n	800d7d8 <_printf_common+0xb0>
 800d780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d784:	4649      	mov	r1, r9
 800d786:	4638      	mov	r0, r7
 800d788:	47c0      	blx	r8
 800d78a:	3001      	adds	r0, #1
 800d78c:	d01e      	beq.n	800d7cc <_printf_common+0xa4>
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	68e5      	ldr	r5, [r4, #12]
 800d792:	6832      	ldr	r2, [r6, #0]
 800d794:	f003 0306 	and.w	r3, r3, #6
 800d798:	2b04      	cmp	r3, #4
 800d79a:	bf08      	it	eq
 800d79c:	1aad      	subeq	r5, r5, r2
 800d79e:	68a3      	ldr	r3, [r4, #8]
 800d7a0:	6922      	ldr	r2, [r4, #16]
 800d7a2:	bf0c      	ite	eq
 800d7a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7a8:	2500      	movne	r5, #0
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	bfc4      	itt	gt
 800d7ae:	1a9b      	subgt	r3, r3, r2
 800d7b0:	18ed      	addgt	r5, r5, r3
 800d7b2:	2600      	movs	r6, #0
 800d7b4:	341a      	adds	r4, #26
 800d7b6:	42b5      	cmp	r5, r6
 800d7b8:	d11a      	bne.n	800d7f0 <_printf_common+0xc8>
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	e008      	b.n	800d7d0 <_printf_common+0xa8>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	4652      	mov	r2, sl
 800d7c2:	4649      	mov	r1, r9
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	47c0      	blx	r8
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d103      	bne.n	800d7d4 <_printf_common+0xac>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d4:	3501      	adds	r5, #1
 800d7d6:	e7c6      	b.n	800d766 <_printf_common+0x3e>
 800d7d8:	18e1      	adds	r1, r4, r3
 800d7da:	1c5a      	adds	r2, r3, #1
 800d7dc:	2030      	movs	r0, #48	; 0x30
 800d7de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7e2:	4422      	add	r2, r4
 800d7e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7ec:	3302      	adds	r3, #2
 800d7ee:	e7c7      	b.n	800d780 <_printf_common+0x58>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	4622      	mov	r2, r4
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	4638      	mov	r0, r7
 800d7f8:	47c0      	blx	r8
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	d0e6      	beq.n	800d7cc <_printf_common+0xa4>
 800d7fe:	3601      	adds	r6, #1
 800d800:	e7d9      	b.n	800d7b6 <_printf_common+0x8e>
	...

0800d804 <_printf_i>:
 800d804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	460c      	mov	r4, r1
 800d80a:	4691      	mov	r9, r2
 800d80c:	7e27      	ldrb	r7, [r4, #24]
 800d80e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d810:	2f78      	cmp	r7, #120	; 0x78
 800d812:	4680      	mov	r8, r0
 800d814:	469a      	mov	sl, r3
 800d816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d81a:	d807      	bhi.n	800d82c <_printf_i+0x28>
 800d81c:	2f62      	cmp	r7, #98	; 0x62
 800d81e:	d80a      	bhi.n	800d836 <_printf_i+0x32>
 800d820:	2f00      	cmp	r7, #0
 800d822:	f000 80d8 	beq.w	800d9d6 <_printf_i+0x1d2>
 800d826:	2f58      	cmp	r7, #88	; 0x58
 800d828:	f000 80a3 	beq.w	800d972 <_printf_i+0x16e>
 800d82c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d834:	e03a      	b.n	800d8ac <_printf_i+0xa8>
 800d836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d83a:	2b15      	cmp	r3, #21
 800d83c:	d8f6      	bhi.n	800d82c <_printf_i+0x28>
 800d83e:	a001      	add	r0, pc, #4	; (adr r0, 800d844 <_printf_i+0x40>)
 800d840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d844:	0800d89d 	.word	0x0800d89d
 800d848:	0800d8b1 	.word	0x0800d8b1
 800d84c:	0800d82d 	.word	0x0800d82d
 800d850:	0800d82d 	.word	0x0800d82d
 800d854:	0800d82d 	.word	0x0800d82d
 800d858:	0800d82d 	.word	0x0800d82d
 800d85c:	0800d8b1 	.word	0x0800d8b1
 800d860:	0800d82d 	.word	0x0800d82d
 800d864:	0800d82d 	.word	0x0800d82d
 800d868:	0800d82d 	.word	0x0800d82d
 800d86c:	0800d82d 	.word	0x0800d82d
 800d870:	0800d9bd 	.word	0x0800d9bd
 800d874:	0800d8e1 	.word	0x0800d8e1
 800d878:	0800d99f 	.word	0x0800d99f
 800d87c:	0800d82d 	.word	0x0800d82d
 800d880:	0800d82d 	.word	0x0800d82d
 800d884:	0800d9df 	.word	0x0800d9df
 800d888:	0800d82d 	.word	0x0800d82d
 800d88c:	0800d8e1 	.word	0x0800d8e1
 800d890:	0800d82d 	.word	0x0800d82d
 800d894:	0800d82d 	.word	0x0800d82d
 800d898:	0800d9a7 	.word	0x0800d9a7
 800d89c:	680b      	ldr	r3, [r1, #0]
 800d89e:	1d1a      	adds	r2, r3, #4
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	600a      	str	r2, [r1, #0]
 800d8a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d8a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e0a3      	b.n	800d9f8 <_printf_i+0x1f4>
 800d8b0:	6825      	ldr	r5, [r4, #0]
 800d8b2:	6808      	ldr	r0, [r1, #0]
 800d8b4:	062e      	lsls	r6, r5, #24
 800d8b6:	f100 0304 	add.w	r3, r0, #4
 800d8ba:	d50a      	bpl.n	800d8d2 <_printf_i+0xce>
 800d8bc:	6805      	ldr	r5, [r0, #0]
 800d8be:	600b      	str	r3, [r1, #0]
 800d8c0:	2d00      	cmp	r5, #0
 800d8c2:	da03      	bge.n	800d8cc <_printf_i+0xc8>
 800d8c4:	232d      	movs	r3, #45	; 0x2d
 800d8c6:	426d      	negs	r5, r5
 800d8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8cc:	485e      	ldr	r0, [pc, #376]	; (800da48 <_printf_i+0x244>)
 800d8ce:	230a      	movs	r3, #10
 800d8d0:	e019      	b.n	800d906 <_printf_i+0x102>
 800d8d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d8d6:	6805      	ldr	r5, [r0, #0]
 800d8d8:	600b      	str	r3, [r1, #0]
 800d8da:	bf18      	it	ne
 800d8dc:	b22d      	sxthne	r5, r5
 800d8de:	e7ef      	b.n	800d8c0 <_printf_i+0xbc>
 800d8e0:	680b      	ldr	r3, [r1, #0]
 800d8e2:	6825      	ldr	r5, [r4, #0]
 800d8e4:	1d18      	adds	r0, r3, #4
 800d8e6:	6008      	str	r0, [r1, #0]
 800d8e8:	0628      	lsls	r0, r5, #24
 800d8ea:	d501      	bpl.n	800d8f0 <_printf_i+0xec>
 800d8ec:	681d      	ldr	r5, [r3, #0]
 800d8ee:	e002      	b.n	800d8f6 <_printf_i+0xf2>
 800d8f0:	0669      	lsls	r1, r5, #25
 800d8f2:	d5fb      	bpl.n	800d8ec <_printf_i+0xe8>
 800d8f4:	881d      	ldrh	r5, [r3, #0]
 800d8f6:	4854      	ldr	r0, [pc, #336]	; (800da48 <_printf_i+0x244>)
 800d8f8:	2f6f      	cmp	r7, #111	; 0x6f
 800d8fa:	bf0c      	ite	eq
 800d8fc:	2308      	moveq	r3, #8
 800d8fe:	230a      	movne	r3, #10
 800d900:	2100      	movs	r1, #0
 800d902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d906:	6866      	ldr	r6, [r4, #4]
 800d908:	60a6      	str	r6, [r4, #8]
 800d90a:	2e00      	cmp	r6, #0
 800d90c:	bfa2      	ittt	ge
 800d90e:	6821      	ldrge	r1, [r4, #0]
 800d910:	f021 0104 	bicge.w	r1, r1, #4
 800d914:	6021      	strge	r1, [r4, #0]
 800d916:	b90d      	cbnz	r5, 800d91c <_printf_i+0x118>
 800d918:	2e00      	cmp	r6, #0
 800d91a:	d04d      	beq.n	800d9b8 <_printf_i+0x1b4>
 800d91c:	4616      	mov	r6, r2
 800d91e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d922:	fb03 5711 	mls	r7, r3, r1, r5
 800d926:	5dc7      	ldrb	r7, [r0, r7]
 800d928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d92c:	462f      	mov	r7, r5
 800d92e:	42bb      	cmp	r3, r7
 800d930:	460d      	mov	r5, r1
 800d932:	d9f4      	bls.n	800d91e <_printf_i+0x11a>
 800d934:	2b08      	cmp	r3, #8
 800d936:	d10b      	bne.n	800d950 <_printf_i+0x14c>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	07df      	lsls	r7, r3, #31
 800d93c:	d508      	bpl.n	800d950 <_printf_i+0x14c>
 800d93e:	6923      	ldr	r3, [r4, #16]
 800d940:	6861      	ldr	r1, [r4, #4]
 800d942:	4299      	cmp	r1, r3
 800d944:	bfde      	ittt	le
 800d946:	2330      	movle	r3, #48	; 0x30
 800d948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d94c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d950:	1b92      	subs	r2, r2, r6
 800d952:	6122      	str	r2, [r4, #16]
 800d954:	f8cd a000 	str.w	sl, [sp]
 800d958:	464b      	mov	r3, r9
 800d95a:	aa03      	add	r2, sp, #12
 800d95c:	4621      	mov	r1, r4
 800d95e:	4640      	mov	r0, r8
 800d960:	f7ff fee2 	bl	800d728 <_printf_common>
 800d964:	3001      	adds	r0, #1
 800d966:	d14c      	bne.n	800da02 <_printf_i+0x1fe>
 800d968:	f04f 30ff 	mov.w	r0, #4294967295
 800d96c:	b004      	add	sp, #16
 800d96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d972:	4835      	ldr	r0, [pc, #212]	; (800da48 <_printf_i+0x244>)
 800d974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	680e      	ldr	r6, [r1, #0]
 800d97c:	061f      	lsls	r7, r3, #24
 800d97e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d982:	600e      	str	r6, [r1, #0]
 800d984:	d514      	bpl.n	800d9b0 <_printf_i+0x1ac>
 800d986:	07d9      	lsls	r1, r3, #31
 800d988:	bf44      	itt	mi
 800d98a:	f043 0320 	orrmi.w	r3, r3, #32
 800d98e:	6023      	strmi	r3, [r4, #0]
 800d990:	b91d      	cbnz	r5, 800d99a <_printf_i+0x196>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	f023 0320 	bic.w	r3, r3, #32
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	2310      	movs	r3, #16
 800d99c:	e7b0      	b.n	800d900 <_printf_i+0xfc>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	f043 0320 	orr.w	r3, r3, #32
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	2378      	movs	r3, #120	; 0x78
 800d9a8:	4828      	ldr	r0, [pc, #160]	; (800da4c <_printf_i+0x248>)
 800d9aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9ae:	e7e3      	b.n	800d978 <_printf_i+0x174>
 800d9b0:	065e      	lsls	r6, r3, #25
 800d9b2:	bf48      	it	mi
 800d9b4:	b2ad      	uxthmi	r5, r5
 800d9b6:	e7e6      	b.n	800d986 <_printf_i+0x182>
 800d9b8:	4616      	mov	r6, r2
 800d9ba:	e7bb      	b.n	800d934 <_printf_i+0x130>
 800d9bc:	680b      	ldr	r3, [r1, #0]
 800d9be:	6826      	ldr	r6, [r4, #0]
 800d9c0:	6960      	ldr	r0, [r4, #20]
 800d9c2:	1d1d      	adds	r5, r3, #4
 800d9c4:	600d      	str	r5, [r1, #0]
 800d9c6:	0635      	lsls	r5, r6, #24
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	d501      	bpl.n	800d9d0 <_printf_i+0x1cc>
 800d9cc:	6018      	str	r0, [r3, #0]
 800d9ce:	e002      	b.n	800d9d6 <_printf_i+0x1d2>
 800d9d0:	0671      	lsls	r1, r6, #25
 800d9d2:	d5fb      	bpl.n	800d9cc <_printf_i+0x1c8>
 800d9d4:	8018      	strh	r0, [r3, #0]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	6123      	str	r3, [r4, #16]
 800d9da:	4616      	mov	r6, r2
 800d9dc:	e7ba      	b.n	800d954 <_printf_i+0x150>
 800d9de:	680b      	ldr	r3, [r1, #0]
 800d9e0:	1d1a      	adds	r2, r3, #4
 800d9e2:	600a      	str	r2, [r1, #0]
 800d9e4:	681e      	ldr	r6, [r3, #0]
 800d9e6:	6862      	ldr	r2, [r4, #4]
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	f7f2 fc18 	bl	8000220 <memchr>
 800d9f0:	b108      	cbz	r0, 800d9f6 <_printf_i+0x1f2>
 800d9f2:	1b80      	subs	r0, r0, r6
 800d9f4:	6060      	str	r0, [r4, #4]
 800d9f6:	6863      	ldr	r3, [r4, #4]
 800d9f8:	6123      	str	r3, [r4, #16]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da00:	e7a8      	b.n	800d954 <_printf_i+0x150>
 800da02:	6923      	ldr	r3, [r4, #16]
 800da04:	4632      	mov	r2, r6
 800da06:	4649      	mov	r1, r9
 800da08:	4640      	mov	r0, r8
 800da0a:	47d0      	blx	sl
 800da0c:	3001      	adds	r0, #1
 800da0e:	d0ab      	beq.n	800d968 <_printf_i+0x164>
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	079b      	lsls	r3, r3, #30
 800da14:	d413      	bmi.n	800da3e <_printf_i+0x23a>
 800da16:	68e0      	ldr	r0, [r4, #12]
 800da18:	9b03      	ldr	r3, [sp, #12]
 800da1a:	4298      	cmp	r0, r3
 800da1c:	bfb8      	it	lt
 800da1e:	4618      	movlt	r0, r3
 800da20:	e7a4      	b.n	800d96c <_printf_i+0x168>
 800da22:	2301      	movs	r3, #1
 800da24:	4632      	mov	r2, r6
 800da26:	4649      	mov	r1, r9
 800da28:	4640      	mov	r0, r8
 800da2a:	47d0      	blx	sl
 800da2c:	3001      	adds	r0, #1
 800da2e:	d09b      	beq.n	800d968 <_printf_i+0x164>
 800da30:	3501      	adds	r5, #1
 800da32:	68e3      	ldr	r3, [r4, #12]
 800da34:	9903      	ldr	r1, [sp, #12]
 800da36:	1a5b      	subs	r3, r3, r1
 800da38:	42ab      	cmp	r3, r5
 800da3a:	dcf2      	bgt.n	800da22 <_printf_i+0x21e>
 800da3c:	e7eb      	b.n	800da16 <_printf_i+0x212>
 800da3e:	2500      	movs	r5, #0
 800da40:	f104 0619 	add.w	r6, r4, #25
 800da44:	e7f5      	b.n	800da32 <_printf_i+0x22e>
 800da46:	bf00      	nop
 800da48:	08011dee 	.word	0x08011dee
 800da4c:	08011dff 	.word	0x08011dff

0800da50 <_scanf_float>:
 800da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	b087      	sub	sp, #28
 800da56:	4617      	mov	r7, r2
 800da58:	9303      	str	r3, [sp, #12]
 800da5a:	688b      	ldr	r3, [r1, #8]
 800da5c:	1e5a      	subs	r2, r3, #1
 800da5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da62:	bf83      	ittte	hi
 800da64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da68:	195b      	addhi	r3, r3, r5
 800da6a:	9302      	strhi	r3, [sp, #8]
 800da6c:	2300      	movls	r3, #0
 800da6e:	bf86      	itte	hi
 800da70:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da74:	608b      	strhi	r3, [r1, #8]
 800da76:	9302      	strls	r3, [sp, #8]
 800da78:	680b      	ldr	r3, [r1, #0]
 800da7a:	468b      	mov	fp, r1
 800da7c:	2500      	movs	r5, #0
 800da7e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800da82:	f84b 3b1c 	str.w	r3, [fp], #28
 800da86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800da8a:	4680      	mov	r8, r0
 800da8c:	460c      	mov	r4, r1
 800da8e:	465e      	mov	r6, fp
 800da90:	46aa      	mov	sl, r5
 800da92:	46a9      	mov	r9, r5
 800da94:	9501      	str	r5, [sp, #4]
 800da96:	68a2      	ldr	r2, [r4, #8]
 800da98:	b152      	cbz	r2, 800dab0 <_scanf_float+0x60>
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b4e      	cmp	r3, #78	; 0x4e
 800daa0:	d864      	bhi.n	800db6c <_scanf_float+0x11c>
 800daa2:	2b40      	cmp	r3, #64	; 0x40
 800daa4:	d83c      	bhi.n	800db20 <_scanf_float+0xd0>
 800daa6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800daaa:	b2c8      	uxtb	r0, r1
 800daac:	280e      	cmp	r0, #14
 800daae:	d93a      	bls.n	800db26 <_scanf_float+0xd6>
 800dab0:	f1b9 0f00 	cmp.w	r9, #0
 800dab4:	d003      	beq.n	800dabe <_scanf_float+0x6e>
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dac2:	f1ba 0f01 	cmp.w	sl, #1
 800dac6:	f200 8113 	bhi.w	800dcf0 <_scanf_float+0x2a0>
 800daca:	455e      	cmp	r6, fp
 800dacc:	f200 8105 	bhi.w	800dcda <_scanf_float+0x28a>
 800dad0:	2501      	movs	r5, #1
 800dad2:	4628      	mov	r0, r5
 800dad4:	b007      	add	sp, #28
 800dad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dada:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dade:	2a0d      	cmp	r2, #13
 800dae0:	d8e6      	bhi.n	800dab0 <_scanf_float+0x60>
 800dae2:	a101      	add	r1, pc, #4	; (adr r1, 800dae8 <_scanf_float+0x98>)
 800dae4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dae8:	0800dc27 	.word	0x0800dc27
 800daec:	0800dab1 	.word	0x0800dab1
 800daf0:	0800dab1 	.word	0x0800dab1
 800daf4:	0800dab1 	.word	0x0800dab1
 800daf8:	0800dc87 	.word	0x0800dc87
 800dafc:	0800dc5f 	.word	0x0800dc5f
 800db00:	0800dab1 	.word	0x0800dab1
 800db04:	0800dab1 	.word	0x0800dab1
 800db08:	0800dc35 	.word	0x0800dc35
 800db0c:	0800dab1 	.word	0x0800dab1
 800db10:	0800dab1 	.word	0x0800dab1
 800db14:	0800dab1 	.word	0x0800dab1
 800db18:	0800dab1 	.word	0x0800dab1
 800db1c:	0800dbed 	.word	0x0800dbed
 800db20:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800db24:	e7db      	b.n	800dade <_scanf_float+0x8e>
 800db26:	290e      	cmp	r1, #14
 800db28:	d8c2      	bhi.n	800dab0 <_scanf_float+0x60>
 800db2a:	a001      	add	r0, pc, #4	; (adr r0, 800db30 <_scanf_float+0xe0>)
 800db2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800db30:	0800dbdf 	.word	0x0800dbdf
 800db34:	0800dab1 	.word	0x0800dab1
 800db38:	0800dbdf 	.word	0x0800dbdf
 800db3c:	0800dc73 	.word	0x0800dc73
 800db40:	0800dab1 	.word	0x0800dab1
 800db44:	0800db8d 	.word	0x0800db8d
 800db48:	0800dbc9 	.word	0x0800dbc9
 800db4c:	0800dbc9 	.word	0x0800dbc9
 800db50:	0800dbc9 	.word	0x0800dbc9
 800db54:	0800dbc9 	.word	0x0800dbc9
 800db58:	0800dbc9 	.word	0x0800dbc9
 800db5c:	0800dbc9 	.word	0x0800dbc9
 800db60:	0800dbc9 	.word	0x0800dbc9
 800db64:	0800dbc9 	.word	0x0800dbc9
 800db68:	0800dbc9 	.word	0x0800dbc9
 800db6c:	2b6e      	cmp	r3, #110	; 0x6e
 800db6e:	d809      	bhi.n	800db84 <_scanf_float+0x134>
 800db70:	2b60      	cmp	r3, #96	; 0x60
 800db72:	d8b2      	bhi.n	800dada <_scanf_float+0x8a>
 800db74:	2b54      	cmp	r3, #84	; 0x54
 800db76:	d077      	beq.n	800dc68 <_scanf_float+0x218>
 800db78:	2b59      	cmp	r3, #89	; 0x59
 800db7a:	d199      	bne.n	800dab0 <_scanf_float+0x60>
 800db7c:	2d07      	cmp	r5, #7
 800db7e:	d197      	bne.n	800dab0 <_scanf_float+0x60>
 800db80:	2508      	movs	r5, #8
 800db82:	e029      	b.n	800dbd8 <_scanf_float+0x188>
 800db84:	2b74      	cmp	r3, #116	; 0x74
 800db86:	d06f      	beq.n	800dc68 <_scanf_float+0x218>
 800db88:	2b79      	cmp	r3, #121	; 0x79
 800db8a:	e7f6      	b.n	800db7a <_scanf_float+0x12a>
 800db8c:	6821      	ldr	r1, [r4, #0]
 800db8e:	05c8      	lsls	r0, r1, #23
 800db90:	d51a      	bpl.n	800dbc8 <_scanf_float+0x178>
 800db92:	9b02      	ldr	r3, [sp, #8]
 800db94:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800db98:	6021      	str	r1, [r4, #0]
 800db9a:	f109 0901 	add.w	r9, r9, #1
 800db9e:	b11b      	cbz	r3, 800dba8 <_scanf_float+0x158>
 800dba0:	3b01      	subs	r3, #1
 800dba2:	3201      	adds	r2, #1
 800dba4:	9302      	str	r3, [sp, #8]
 800dba6:	60a2      	str	r2, [r4, #8]
 800dba8:	68a3      	ldr	r3, [r4, #8]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	60a3      	str	r3, [r4, #8]
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	6123      	str	r3, [r4, #16]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	607b      	str	r3, [r7, #4]
 800dbbc:	f340 8084 	ble.w	800dcc8 <_scanf_float+0x278>
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	603b      	str	r3, [r7, #0]
 800dbc6:	e766      	b.n	800da96 <_scanf_float+0x46>
 800dbc8:	eb1a 0f05 	cmn.w	sl, r5
 800dbcc:	f47f af70 	bne.w	800dab0 <_scanf_float+0x60>
 800dbd0:	6822      	ldr	r2, [r4, #0]
 800dbd2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dbd6:	6022      	str	r2, [r4, #0]
 800dbd8:	f806 3b01 	strb.w	r3, [r6], #1
 800dbdc:	e7e4      	b.n	800dba8 <_scanf_float+0x158>
 800dbde:	6822      	ldr	r2, [r4, #0]
 800dbe0:	0610      	lsls	r0, r2, #24
 800dbe2:	f57f af65 	bpl.w	800dab0 <_scanf_float+0x60>
 800dbe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbea:	e7f4      	b.n	800dbd6 <_scanf_float+0x186>
 800dbec:	f1ba 0f00 	cmp.w	sl, #0
 800dbf0:	d10e      	bne.n	800dc10 <_scanf_float+0x1c0>
 800dbf2:	f1b9 0f00 	cmp.w	r9, #0
 800dbf6:	d10e      	bne.n	800dc16 <_scanf_float+0x1c6>
 800dbf8:	6822      	ldr	r2, [r4, #0]
 800dbfa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dbfe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dc02:	d108      	bne.n	800dc16 <_scanf_float+0x1c6>
 800dc04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc08:	6022      	str	r2, [r4, #0]
 800dc0a:	f04f 0a01 	mov.w	sl, #1
 800dc0e:	e7e3      	b.n	800dbd8 <_scanf_float+0x188>
 800dc10:	f1ba 0f02 	cmp.w	sl, #2
 800dc14:	d055      	beq.n	800dcc2 <_scanf_float+0x272>
 800dc16:	2d01      	cmp	r5, #1
 800dc18:	d002      	beq.n	800dc20 <_scanf_float+0x1d0>
 800dc1a:	2d04      	cmp	r5, #4
 800dc1c:	f47f af48 	bne.w	800dab0 <_scanf_float+0x60>
 800dc20:	3501      	adds	r5, #1
 800dc22:	b2ed      	uxtb	r5, r5
 800dc24:	e7d8      	b.n	800dbd8 <_scanf_float+0x188>
 800dc26:	f1ba 0f01 	cmp.w	sl, #1
 800dc2a:	f47f af41 	bne.w	800dab0 <_scanf_float+0x60>
 800dc2e:	f04f 0a02 	mov.w	sl, #2
 800dc32:	e7d1      	b.n	800dbd8 <_scanf_float+0x188>
 800dc34:	b97d      	cbnz	r5, 800dc56 <_scanf_float+0x206>
 800dc36:	f1b9 0f00 	cmp.w	r9, #0
 800dc3a:	f47f af3c 	bne.w	800dab6 <_scanf_float+0x66>
 800dc3e:	6822      	ldr	r2, [r4, #0]
 800dc40:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dc44:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dc48:	f47f af39 	bne.w	800dabe <_scanf_float+0x6e>
 800dc4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc50:	6022      	str	r2, [r4, #0]
 800dc52:	2501      	movs	r5, #1
 800dc54:	e7c0      	b.n	800dbd8 <_scanf_float+0x188>
 800dc56:	2d03      	cmp	r5, #3
 800dc58:	d0e2      	beq.n	800dc20 <_scanf_float+0x1d0>
 800dc5a:	2d05      	cmp	r5, #5
 800dc5c:	e7de      	b.n	800dc1c <_scanf_float+0x1cc>
 800dc5e:	2d02      	cmp	r5, #2
 800dc60:	f47f af26 	bne.w	800dab0 <_scanf_float+0x60>
 800dc64:	2503      	movs	r5, #3
 800dc66:	e7b7      	b.n	800dbd8 <_scanf_float+0x188>
 800dc68:	2d06      	cmp	r5, #6
 800dc6a:	f47f af21 	bne.w	800dab0 <_scanf_float+0x60>
 800dc6e:	2507      	movs	r5, #7
 800dc70:	e7b2      	b.n	800dbd8 <_scanf_float+0x188>
 800dc72:	6822      	ldr	r2, [r4, #0]
 800dc74:	0591      	lsls	r1, r2, #22
 800dc76:	f57f af1b 	bpl.w	800dab0 <_scanf_float+0x60>
 800dc7a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dc7e:	6022      	str	r2, [r4, #0]
 800dc80:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc84:	e7a8      	b.n	800dbd8 <_scanf_float+0x188>
 800dc86:	6822      	ldr	r2, [r4, #0]
 800dc88:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dc8c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dc90:	d006      	beq.n	800dca0 <_scanf_float+0x250>
 800dc92:	0550      	lsls	r0, r2, #21
 800dc94:	f57f af0c 	bpl.w	800dab0 <_scanf_float+0x60>
 800dc98:	f1b9 0f00 	cmp.w	r9, #0
 800dc9c:	f43f af0f 	beq.w	800dabe <_scanf_float+0x6e>
 800dca0:	0591      	lsls	r1, r2, #22
 800dca2:	bf58      	it	pl
 800dca4:	9901      	ldrpl	r1, [sp, #4]
 800dca6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dcaa:	bf58      	it	pl
 800dcac:	eba9 0101 	subpl.w	r1, r9, r1
 800dcb0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dcb4:	bf58      	it	pl
 800dcb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dcba:	6022      	str	r2, [r4, #0]
 800dcbc:	f04f 0900 	mov.w	r9, #0
 800dcc0:	e78a      	b.n	800dbd8 <_scanf_float+0x188>
 800dcc2:	f04f 0a03 	mov.w	sl, #3
 800dcc6:	e787      	b.n	800dbd8 <_scanf_float+0x188>
 800dcc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dccc:	4639      	mov	r1, r7
 800dcce:	4640      	mov	r0, r8
 800dcd0:	4798      	blx	r3
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	f43f aedf 	beq.w	800da96 <_scanf_float+0x46>
 800dcd8:	e6ea      	b.n	800dab0 <_scanf_float+0x60>
 800dcda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dce2:	463a      	mov	r2, r7
 800dce4:	4640      	mov	r0, r8
 800dce6:	4798      	blx	r3
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	6123      	str	r3, [r4, #16]
 800dcee:	e6ec      	b.n	800daca <_scanf_float+0x7a>
 800dcf0:	1e6b      	subs	r3, r5, #1
 800dcf2:	2b06      	cmp	r3, #6
 800dcf4:	d825      	bhi.n	800dd42 <_scanf_float+0x2f2>
 800dcf6:	2d02      	cmp	r5, #2
 800dcf8:	d836      	bhi.n	800dd68 <_scanf_float+0x318>
 800dcfa:	455e      	cmp	r6, fp
 800dcfc:	f67f aee8 	bls.w	800dad0 <_scanf_float+0x80>
 800dd00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd04:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd08:	463a      	mov	r2, r7
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	4798      	blx	r3
 800dd0e:	6923      	ldr	r3, [r4, #16]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	6123      	str	r3, [r4, #16]
 800dd14:	e7f1      	b.n	800dcfa <_scanf_float+0x2aa>
 800dd16:	9802      	ldr	r0, [sp, #8]
 800dd18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd1c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dd20:	9002      	str	r0, [sp, #8]
 800dd22:	463a      	mov	r2, r7
 800dd24:	4640      	mov	r0, r8
 800dd26:	4798      	blx	r3
 800dd28:	6923      	ldr	r3, [r4, #16]
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	6123      	str	r3, [r4, #16]
 800dd2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd32:	fa5f fa8a 	uxtb.w	sl, sl
 800dd36:	f1ba 0f02 	cmp.w	sl, #2
 800dd3a:	d1ec      	bne.n	800dd16 <_scanf_float+0x2c6>
 800dd3c:	3d03      	subs	r5, #3
 800dd3e:	b2ed      	uxtb	r5, r5
 800dd40:	1b76      	subs	r6, r6, r5
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	05da      	lsls	r2, r3, #23
 800dd46:	d52f      	bpl.n	800dda8 <_scanf_float+0x358>
 800dd48:	055b      	lsls	r3, r3, #21
 800dd4a:	d510      	bpl.n	800dd6e <_scanf_float+0x31e>
 800dd4c:	455e      	cmp	r6, fp
 800dd4e:	f67f aebf 	bls.w	800dad0 <_scanf_float+0x80>
 800dd52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd5a:	463a      	mov	r2, r7
 800dd5c:	4640      	mov	r0, r8
 800dd5e:	4798      	blx	r3
 800dd60:	6923      	ldr	r3, [r4, #16]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	6123      	str	r3, [r4, #16]
 800dd66:	e7f1      	b.n	800dd4c <_scanf_float+0x2fc>
 800dd68:	46aa      	mov	sl, r5
 800dd6a:	9602      	str	r6, [sp, #8]
 800dd6c:	e7df      	b.n	800dd2e <_scanf_float+0x2de>
 800dd6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	2965      	cmp	r1, #101	; 0x65
 800dd76:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd7a:	f106 35ff 	add.w	r5, r6, #4294967295
 800dd7e:	6123      	str	r3, [r4, #16]
 800dd80:	d00c      	beq.n	800dd9c <_scanf_float+0x34c>
 800dd82:	2945      	cmp	r1, #69	; 0x45
 800dd84:	d00a      	beq.n	800dd9c <_scanf_float+0x34c>
 800dd86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd8a:	463a      	mov	r2, r7
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	4798      	blx	r3
 800dd90:	6923      	ldr	r3, [r4, #16]
 800dd92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	1eb5      	subs	r5, r6, #2
 800dd9a:	6123      	str	r3, [r4, #16]
 800dd9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dda0:	463a      	mov	r2, r7
 800dda2:	4640      	mov	r0, r8
 800dda4:	4798      	blx	r3
 800dda6:	462e      	mov	r6, r5
 800dda8:	6825      	ldr	r5, [r4, #0]
 800ddaa:	f015 0510 	ands.w	r5, r5, #16
 800ddae:	d158      	bne.n	800de62 <_scanf_float+0x412>
 800ddb0:	7035      	strb	r5, [r6, #0]
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ddb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddbc:	d11c      	bne.n	800ddf8 <_scanf_float+0x3a8>
 800ddbe:	9b01      	ldr	r3, [sp, #4]
 800ddc0:	454b      	cmp	r3, r9
 800ddc2:	eba3 0209 	sub.w	r2, r3, r9
 800ddc6:	d124      	bne.n	800de12 <_scanf_float+0x3c2>
 800ddc8:	2200      	movs	r2, #0
 800ddca:	4659      	mov	r1, fp
 800ddcc:	4640      	mov	r0, r8
 800ddce:	f000 fe9d 	bl	800eb0c <_strtod_r>
 800ddd2:	9b03      	ldr	r3, [sp, #12]
 800ddd4:	6821      	ldr	r1, [r4, #0]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f011 0f02 	tst.w	r1, #2
 800dddc:	ec57 6b10 	vmov	r6, r7, d0
 800dde0:	f103 0204 	add.w	r2, r3, #4
 800dde4:	d020      	beq.n	800de28 <_scanf_float+0x3d8>
 800dde6:	9903      	ldr	r1, [sp, #12]
 800dde8:	600a      	str	r2, [r1, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	e9c3 6700 	strd	r6, r7, [r3]
 800ddf0:	68e3      	ldr	r3, [r4, #12]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	60e3      	str	r3, [r4, #12]
 800ddf6:	e66c      	b.n	800dad2 <_scanf_float+0x82>
 800ddf8:	9b04      	ldr	r3, [sp, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d0e4      	beq.n	800ddc8 <_scanf_float+0x378>
 800ddfe:	9905      	ldr	r1, [sp, #20]
 800de00:	230a      	movs	r3, #10
 800de02:	462a      	mov	r2, r5
 800de04:	3101      	adds	r1, #1
 800de06:	4640      	mov	r0, r8
 800de08:	f000 ff0a 	bl	800ec20 <_strtol_r>
 800de0c:	9b04      	ldr	r3, [sp, #16]
 800de0e:	9e05      	ldr	r6, [sp, #20]
 800de10:	1ac2      	subs	r2, r0, r3
 800de12:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800de16:	429e      	cmp	r6, r3
 800de18:	bf28      	it	cs
 800de1a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800de1e:	4912      	ldr	r1, [pc, #72]	; (800de68 <_scanf_float+0x418>)
 800de20:	4630      	mov	r0, r6
 800de22:	f000 f82b 	bl	800de7c <siprintf>
 800de26:	e7cf      	b.n	800ddc8 <_scanf_float+0x378>
 800de28:	f011 0f04 	tst.w	r1, #4
 800de2c:	9903      	ldr	r1, [sp, #12]
 800de2e:	600a      	str	r2, [r1, #0]
 800de30:	d1db      	bne.n	800ddea <_scanf_float+0x39a>
 800de32:	f8d3 8000 	ldr.w	r8, [r3]
 800de36:	ee10 2a10 	vmov	r2, s0
 800de3a:	ee10 0a10 	vmov	r0, s0
 800de3e:	463b      	mov	r3, r7
 800de40:	4639      	mov	r1, r7
 800de42:	f7f2 fe93 	bl	8000b6c <__aeabi_dcmpun>
 800de46:	b128      	cbz	r0, 800de54 <_scanf_float+0x404>
 800de48:	4808      	ldr	r0, [pc, #32]	; (800de6c <_scanf_float+0x41c>)
 800de4a:	f000 f811 	bl	800de70 <nanf>
 800de4e:	ed88 0a00 	vstr	s0, [r8]
 800de52:	e7cd      	b.n	800ddf0 <_scanf_float+0x3a0>
 800de54:	4630      	mov	r0, r6
 800de56:	4639      	mov	r1, r7
 800de58:	f7f2 fee6 	bl	8000c28 <__aeabi_d2f>
 800de5c:	f8c8 0000 	str.w	r0, [r8]
 800de60:	e7c6      	b.n	800ddf0 <_scanf_float+0x3a0>
 800de62:	2500      	movs	r5, #0
 800de64:	e635      	b.n	800dad2 <_scanf_float+0x82>
 800de66:	bf00      	nop
 800de68:	08011e10 	.word	0x08011e10
 800de6c:	08012228 	.word	0x08012228

0800de70 <nanf>:
 800de70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de78 <nanf+0x8>
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	7fc00000 	.word	0x7fc00000

0800de7c <siprintf>:
 800de7c:	b40e      	push	{r1, r2, r3}
 800de7e:	b500      	push	{lr}
 800de80:	b09c      	sub	sp, #112	; 0x70
 800de82:	ab1d      	add	r3, sp, #116	; 0x74
 800de84:	9002      	str	r0, [sp, #8]
 800de86:	9006      	str	r0, [sp, #24]
 800de88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de8c:	4809      	ldr	r0, [pc, #36]	; (800deb4 <siprintf+0x38>)
 800de8e:	9107      	str	r1, [sp, #28]
 800de90:	9104      	str	r1, [sp, #16]
 800de92:	4909      	ldr	r1, [pc, #36]	; (800deb8 <siprintf+0x3c>)
 800de94:	f853 2b04 	ldr.w	r2, [r3], #4
 800de98:	9105      	str	r1, [sp, #20]
 800de9a:	6800      	ldr	r0, [r0, #0]
 800de9c:	9301      	str	r3, [sp, #4]
 800de9e:	a902      	add	r1, sp, #8
 800dea0:	f002 fea6 	bl	8010bf0 <_svfiprintf_r>
 800dea4:	9b02      	ldr	r3, [sp, #8]
 800dea6:	2200      	movs	r2, #0
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	b01c      	add	sp, #112	; 0x70
 800deac:	f85d eb04 	ldr.w	lr, [sp], #4
 800deb0:	b003      	add	sp, #12
 800deb2:	4770      	bx	lr
 800deb4:	20000034 	.word	0x20000034
 800deb8:	ffff0208 	.word	0xffff0208

0800debc <sulp>:
 800debc:	b570      	push	{r4, r5, r6, lr}
 800debe:	4604      	mov	r4, r0
 800dec0:	460d      	mov	r5, r1
 800dec2:	ec45 4b10 	vmov	d0, r4, r5
 800dec6:	4616      	mov	r6, r2
 800dec8:	f002 fc2e 	bl	8010728 <__ulp>
 800decc:	ec51 0b10 	vmov	r0, r1, d0
 800ded0:	b17e      	cbz	r6, 800def2 <sulp+0x36>
 800ded2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ded6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800deda:	2b00      	cmp	r3, #0
 800dedc:	dd09      	ble.n	800def2 <sulp+0x36>
 800dede:	051b      	lsls	r3, r3, #20
 800dee0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dee4:	2400      	movs	r4, #0
 800dee6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800deea:	4622      	mov	r2, r4
 800deec:	462b      	mov	r3, r5
 800deee:	f7f2 fba3 	bl	8000638 <__aeabi_dmul>
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	0000      	movs	r0, r0
	...

0800def8 <_strtod_l>:
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	b0a3      	sub	sp, #140	; 0x8c
 800defe:	461f      	mov	r7, r3
 800df00:	2300      	movs	r3, #0
 800df02:	931e      	str	r3, [sp, #120]	; 0x78
 800df04:	4ba4      	ldr	r3, [pc, #656]	; (800e198 <_strtod_l+0x2a0>)
 800df06:	9219      	str	r2, [sp, #100]	; 0x64
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	9307      	str	r3, [sp, #28]
 800df0c:	4604      	mov	r4, r0
 800df0e:	4618      	mov	r0, r3
 800df10:	4688      	mov	r8, r1
 800df12:	f7f2 f977 	bl	8000204 <strlen>
 800df16:	f04f 0a00 	mov.w	sl, #0
 800df1a:	4605      	mov	r5, r0
 800df1c:	f04f 0b00 	mov.w	fp, #0
 800df20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800df24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df26:	781a      	ldrb	r2, [r3, #0]
 800df28:	2a2b      	cmp	r2, #43	; 0x2b
 800df2a:	d04c      	beq.n	800dfc6 <_strtod_l+0xce>
 800df2c:	d839      	bhi.n	800dfa2 <_strtod_l+0xaa>
 800df2e:	2a0d      	cmp	r2, #13
 800df30:	d832      	bhi.n	800df98 <_strtod_l+0xa0>
 800df32:	2a08      	cmp	r2, #8
 800df34:	d832      	bhi.n	800df9c <_strtod_l+0xa4>
 800df36:	2a00      	cmp	r2, #0
 800df38:	d03c      	beq.n	800dfb4 <_strtod_l+0xbc>
 800df3a:	2300      	movs	r3, #0
 800df3c:	930e      	str	r3, [sp, #56]	; 0x38
 800df3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800df40:	7833      	ldrb	r3, [r6, #0]
 800df42:	2b30      	cmp	r3, #48	; 0x30
 800df44:	f040 80b4 	bne.w	800e0b0 <_strtod_l+0x1b8>
 800df48:	7873      	ldrb	r3, [r6, #1]
 800df4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df4e:	2b58      	cmp	r3, #88	; 0x58
 800df50:	d16c      	bne.n	800e02c <_strtod_l+0x134>
 800df52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	ab1e      	add	r3, sp, #120	; 0x78
 800df58:	9702      	str	r7, [sp, #8]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	4a8f      	ldr	r2, [pc, #572]	; (800e19c <_strtod_l+0x2a4>)
 800df5e:	ab1f      	add	r3, sp, #124	; 0x7c
 800df60:	a91d      	add	r1, sp, #116	; 0x74
 800df62:	4620      	mov	r0, r4
 800df64:	f001 fd40 	bl	800f9e8 <__gethex>
 800df68:	f010 0707 	ands.w	r7, r0, #7
 800df6c:	4605      	mov	r5, r0
 800df6e:	d005      	beq.n	800df7c <_strtod_l+0x84>
 800df70:	2f06      	cmp	r7, #6
 800df72:	d12a      	bne.n	800dfca <_strtod_l+0xd2>
 800df74:	3601      	adds	r6, #1
 800df76:	2300      	movs	r3, #0
 800df78:	961d      	str	r6, [sp, #116]	; 0x74
 800df7a:	930e      	str	r3, [sp, #56]	; 0x38
 800df7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f040 8596 	bne.w	800eab0 <_strtod_l+0xbb8>
 800df84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df86:	b1db      	cbz	r3, 800dfc0 <_strtod_l+0xc8>
 800df88:	4652      	mov	r2, sl
 800df8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800df8e:	ec43 2b10 	vmov	d0, r2, r3
 800df92:	b023      	add	sp, #140	; 0x8c
 800df94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df98:	2a20      	cmp	r2, #32
 800df9a:	d1ce      	bne.n	800df3a <_strtod_l+0x42>
 800df9c:	3301      	adds	r3, #1
 800df9e:	931d      	str	r3, [sp, #116]	; 0x74
 800dfa0:	e7c0      	b.n	800df24 <_strtod_l+0x2c>
 800dfa2:	2a2d      	cmp	r2, #45	; 0x2d
 800dfa4:	d1c9      	bne.n	800df3a <_strtod_l+0x42>
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	920e      	str	r2, [sp, #56]	; 0x38
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	921d      	str	r2, [sp, #116]	; 0x74
 800dfae:	785b      	ldrb	r3, [r3, #1]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1c4      	bne.n	800df3e <_strtod_l+0x46>
 800dfb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfb6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f040 8576 	bne.w	800eaac <_strtod_l+0xbb4>
 800dfc0:	4652      	mov	r2, sl
 800dfc2:	465b      	mov	r3, fp
 800dfc4:	e7e3      	b.n	800df8e <_strtod_l+0x96>
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	e7ee      	b.n	800dfa8 <_strtod_l+0xb0>
 800dfca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dfcc:	b13a      	cbz	r2, 800dfde <_strtod_l+0xe6>
 800dfce:	2135      	movs	r1, #53	; 0x35
 800dfd0:	a820      	add	r0, sp, #128	; 0x80
 800dfd2:	f002 fcb4 	bl	801093e <__copybits>
 800dfd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f002 f879 	bl	80100d0 <_Bfree>
 800dfde:	3f01      	subs	r7, #1
 800dfe0:	2f05      	cmp	r7, #5
 800dfe2:	d807      	bhi.n	800dff4 <_strtod_l+0xfc>
 800dfe4:	e8df f007 	tbb	[pc, r7]
 800dfe8:	1d180b0e 	.word	0x1d180b0e
 800dfec:	030e      	.short	0x030e
 800dfee:	f04f 0b00 	mov.w	fp, #0
 800dff2:	46da      	mov	sl, fp
 800dff4:	0728      	lsls	r0, r5, #28
 800dff6:	d5c1      	bpl.n	800df7c <_strtod_l+0x84>
 800dff8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dffc:	e7be      	b.n	800df7c <_strtod_l+0x84>
 800dffe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e002:	e7f7      	b.n	800dff4 <_strtod_l+0xfc>
 800e004:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e008:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e00a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e00e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e012:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e016:	e7ed      	b.n	800dff4 <_strtod_l+0xfc>
 800e018:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e1a0 <_strtod_l+0x2a8>
 800e01c:	f04f 0a00 	mov.w	sl, #0
 800e020:	e7e8      	b.n	800dff4 <_strtod_l+0xfc>
 800e022:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e026:	f04f 3aff 	mov.w	sl, #4294967295
 800e02a:	e7e3      	b.n	800dff4 <_strtod_l+0xfc>
 800e02c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	921d      	str	r2, [sp, #116]	; 0x74
 800e032:	785b      	ldrb	r3, [r3, #1]
 800e034:	2b30      	cmp	r3, #48	; 0x30
 800e036:	d0f9      	beq.n	800e02c <_strtod_l+0x134>
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d09f      	beq.n	800df7c <_strtod_l+0x84>
 800e03c:	2301      	movs	r3, #1
 800e03e:	f04f 0900 	mov.w	r9, #0
 800e042:	9304      	str	r3, [sp, #16]
 800e044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e046:	930a      	str	r3, [sp, #40]	; 0x28
 800e048:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e04c:	464f      	mov	r7, r9
 800e04e:	220a      	movs	r2, #10
 800e050:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e052:	7806      	ldrb	r6, [r0, #0]
 800e054:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e058:	b2d9      	uxtb	r1, r3
 800e05a:	2909      	cmp	r1, #9
 800e05c:	d92a      	bls.n	800e0b4 <_strtod_l+0x1bc>
 800e05e:	9907      	ldr	r1, [sp, #28]
 800e060:	462a      	mov	r2, r5
 800e062:	f002 fedd 	bl	8010e20 <strncmp>
 800e066:	b398      	cbz	r0, 800e0d0 <_strtod_l+0x1d8>
 800e068:	2000      	movs	r0, #0
 800e06a:	4633      	mov	r3, r6
 800e06c:	463d      	mov	r5, r7
 800e06e:	9007      	str	r0, [sp, #28]
 800e070:	4602      	mov	r2, r0
 800e072:	2b65      	cmp	r3, #101	; 0x65
 800e074:	d001      	beq.n	800e07a <_strtod_l+0x182>
 800e076:	2b45      	cmp	r3, #69	; 0x45
 800e078:	d118      	bne.n	800e0ac <_strtod_l+0x1b4>
 800e07a:	b91d      	cbnz	r5, 800e084 <_strtod_l+0x18c>
 800e07c:	9b04      	ldr	r3, [sp, #16]
 800e07e:	4303      	orrs	r3, r0
 800e080:	d098      	beq.n	800dfb4 <_strtod_l+0xbc>
 800e082:	2500      	movs	r5, #0
 800e084:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e088:	f108 0301 	add.w	r3, r8, #1
 800e08c:	931d      	str	r3, [sp, #116]	; 0x74
 800e08e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e092:	2b2b      	cmp	r3, #43	; 0x2b
 800e094:	d075      	beq.n	800e182 <_strtod_l+0x28a>
 800e096:	2b2d      	cmp	r3, #45	; 0x2d
 800e098:	d07b      	beq.n	800e192 <_strtod_l+0x29a>
 800e09a:	f04f 0c00 	mov.w	ip, #0
 800e09e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e0a2:	2909      	cmp	r1, #9
 800e0a4:	f240 8082 	bls.w	800e1ac <_strtod_l+0x2b4>
 800e0a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e0ac:	2600      	movs	r6, #0
 800e0ae:	e09d      	b.n	800e1ec <_strtod_l+0x2f4>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	e7c4      	b.n	800e03e <_strtod_l+0x146>
 800e0b4:	2f08      	cmp	r7, #8
 800e0b6:	bfd8      	it	le
 800e0b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e0ba:	f100 0001 	add.w	r0, r0, #1
 800e0be:	bfda      	itte	le
 800e0c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e0c4:	9309      	strle	r3, [sp, #36]	; 0x24
 800e0c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e0ca:	3701      	adds	r7, #1
 800e0cc:	901d      	str	r0, [sp, #116]	; 0x74
 800e0ce:	e7bf      	b.n	800e050 <_strtod_l+0x158>
 800e0d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0d2:	195a      	adds	r2, r3, r5
 800e0d4:	921d      	str	r2, [sp, #116]	; 0x74
 800e0d6:	5d5b      	ldrb	r3, [r3, r5]
 800e0d8:	2f00      	cmp	r7, #0
 800e0da:	d037      	beq.n	800e14c <_strtod_l+0x254>
 800e0dc:	9007      	str	r0, [sp, #28]
 800e0de:	463d      	mov	r5, r7
 800e0e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e0e4:	2a09      	cmp	r2, #9
 800e0e6:	d912      	bls.n	800e10e <_strtod_l+0x216>
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	e7c2      	b.n	800e072 <_strtod_l+0x17a>
 800e0ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0ee:	1c5a      	adds	r2, r3, #1
 800e0f0:	921d      	str	r2, [sp, #116]	; 0x74
 800e0f2:	785b      	ldrb	r3, [r3, #1]
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	2b30      	cmp	r3, #48	; 0x30
 800e0f8:	d0f8      	beq.n	800e0ec <_strtod_l+0x1f4>
 800e0fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e0fe:	2a08      	cmp	r2, #8
 800e100:	f200 84db 	bhi.w	800eaba <_strtod_l+0xbc2>
 800e104:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e106:	9007      	str	r0, [sp, #28]
 800e108:	2000      	movs	r0, #0
 800e10a:	920a      	str	r2, [sp, #40]	; 0x28
 800e10c:	4605      	mov	r5, r0
 800e10e:	3b30      	subs	r3, #48	; 0x30
 800e110:	f100 0201 	add.w	r2, r0, #1
 800e114:	d014      	beq.n	800e140 <_strtod_l+0x248>
 800e116:	9907      	ldr	r1, [sp, #28]
 800e118:	4411      	add	r1, r2
 800e11a:	9107      	str	r1, [sp, #28]
 800e11c:	462a      	mov	r2, r5
 800e11e:	eb00 0e05 	add.w	lr, r0, r5
 800e122:	210a      	movs	r1, #10
 800e124:	4572      	cmp	r2, lr
 800e126:	d113      	bne.n	800e150 <_strtod_l+0x258>
 800e128:	182a      	adds	r2, r5, r0
 800e12a:	2a08      	cmp	r2, #8
 800e12c:	f105 0501 	add.w	r5, r5, #1
 800e130:	4405      	add	r5, r0
 800e132:	dc1c      	bgt.n	800e16e <_strtod_l+0x276>
 800e134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e136:	220a      	movs	r2, #10
 800e138:	fb02 3301 	mla	r3, r2, r1, r3
 800e13c:	9309      	str	r3, [sp, #36]	; 0x24
 800e13e:	2200      	movs	r2, #0
 800e140:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e142:	1c59      	adds	r1, r3, #1
 800e144:	911d      	str	r1, [sp, #116]	; 0x74
 800e146:	785b      	ldrb	r3, [r3, #1]
 800e148:	4610      	mov	r0, r2
 800e14a:	e7c9      	b.n	800e0e0 <_strtod_l+0x1e8>
 800e14c:	4638      	mov	r0, r7
 800e14e:	e7d2      	b.n	800e0f6 <_strtod_l+0x1fe>
 800e150:	2a08      	cmp	r2, #8
 800e152:	dc04      	bgt.n	800e15e <_strtod_l+0x266>
 800e154:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e156:	434e      	muls	r6, r1
 800e158:	9609      	str	r6, [sp, #36]	; 0x24
 800e15a:	3201      	adds	r2, #1
 800e15c:	e7e2      	b.n	800e124 <_strtod_l+0x22c>
 800e15e:	f102 0c01 	add.w	ip, r2, #1
 800e162:	f1bc 0f10 	cmp.w	ip, #16
 800e166:	bfd8      	it	le
 800e168:	fb01 f909 	mulle.w	r9, r1, r9
 800e16c:	e7f5      	b.n	800e15a <_strtod_l+0x262>
 800e16e:	2d10      	cmp	r5, #16
 800e170:	bfdc      	itt	le
 800e172:	220a      	movle	r2, #10
 800e174:	fb02 3909 	mlale	r9, r2, r9, r3
 800e178:	e7e1      	b.n	800e13e <_strtod_l+0x246>
 800e17a:	2300      	movs	r3, #0
 800e17c:	9307      	str	r3, [sp, #28]
 800e17e:	2201      	movs	r2, #1
 800e180:	e77c      	b.n	800e07c <_strtod_l+0x184>
 800e182:	f04f 0c00 	mov.w	ip, #0
 800e186:	f108 0302 	add.w	r3, r8, #2
 800e18a:	931d      	str	r3, [sp, #116]	; 0x74
 800e18c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e190:	e785      	b.n	800e09e <_strtod_l+0x1a6>
 800e192:	f04f 0c01 	mov.w	ip, #1
 800e196:	e7f6      	b.n	800e186 <_strtod_l+0x28e>
 800e198:	08012068 	.word	0x08012068
 800e19c:	08011e18 	.word	0x08011e18
 800e1a0:	7ff00000 	.word	0x7ff00000
 800e1a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1a6:	1c59      	adds	r1, r3, #1
 800e1a8:	911d      	str	r1, [sp, #116]	; 0x74
 800e1aa:	785b      	ldrb	r3, [r3, #1]
 800e1ac:	2b30      	cmp	r3, #48	; 0x30
 800e1ae:	d0f9      	beq.n	800e1a4 <_strtod_l+0x2ac>
 800e1b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e1b4:	2908      	cmp	r1, #8
 800e1b6:	f63f af79 	bhi.w	800e0ac <_strtod_l+0x1b4>
 800e1ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e1be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1c0:	9308      	str	r3, [sp, #32]
 800e1c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1c4:	1c59      	adds	r1, r3, #1
 800e1c6:	911d      	str	r1, [sp, #116]	; 0x74
 800e1c8:	785b      	ldrb	r3, [r3, #1]
 800e1ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e1ce:	2e09      	cmp	r6, #9
 800e1d0:	d937      	bls.n	800e242 <_strtod_l+0x34a>
 800e1d2:	9e08      	ldr	r6, [sp, #32]
 800e1d4:	1b89      	subs	r1, r1, r6
 800e1d6:	2908      	cmp	r1, #8
 800e1d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e1dc:	dc02      	bgt.n	800e1e4 <_strtod_l+0x2ec>
 800e1de:	4576      	cmp	r6, lr
 800e1e0:	bfa8      	it	ge
 800e1e2:	4676      	movge	r6, lr
 800e1e4:	f1bc 0f00 	cmp.w	ip, #0
 800e1e8:	d000      	beq.n	800e1ec <_strtod_l+0x2f4>
 800e1ea:	4276      	negs	r6, r6
 800e1ec:	2d00      	cmp	r5, #0
 800e1ee:	d14f      	bne.n	800e290 <_strtod_l+0x398>
 800e1f0:	9904      	ldr	r1, [sp, #16]
 800e1f2:	4301      	orrs	r1, r0
 800e1f4:	f47f aec2 	bne.w	800df7c <_strtod_l+0x84>
 800e1f8:	2a00      	cmp	r2, #0
 800e1fa:	f47f aedb 	bne.w	800dfb4 <_strtod_l+0xbc>
 800e1fe:	2b69      	cmp	r3, #105	; 0x69
 800e200:	d027      	beq.n	800e252 <_strtod_l+0x35a>
 800e202:	dc24      	bgt.n	800e24e <_strtod_l+0x356>
 800e204:	2b49      	cmp	r3, #73	; 0x49
 800e206:	d024      	beq.n	800e252 <_strtod_l+0x35a>
 800e208:	2b4e      	cmp	r3, #78	; 0x4e
 800e20a:	f47f aed3 	bne.w	800dfb4 <_strtod_l+0xbc>
 800e20e:	499e      	ldr	r1, [pc, #632]	; (800e488 <_strtod_l+0x590>)
 800e210:	a81d      	add	r0, sp, #116	; 0x74
 800e212:	f001 fe41 	bl	800fe98 <__match>
 800e216:	2800      	cmp	r0, #0
 800e218:	f43f aecc 	beq.w	800dfb4 <_strtod_l+0xbc>
 800e21c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b28      	cmp	r3, #40	; 0x28
 800e222:	d12d      	bne.n	800e280 <_strtod_l+0x388>
 800e224:	4999      	ldr	r1, [pc, #612]	; (800e48c <_strtod_l+0x594>)
 800e226:	aa20      	add	r2, sp, #128	; 0x80
 800e228:	a81d      	add	r0, sp, #116	; 0x74
 800e22a:	f001 fe49 	bl	800fec0 <__hexnan>
 800e22e:	2805      	cmp	r0, #5
 800e230:	d126      	bne.n	800e280 <_strtod_l+0x388>
 800e232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e234:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e238:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e23c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e240:	e69c      	b.n	800df7c <_strtod_l+0x84>
 800e242:	210a      	movs	r1, #10
 800e244:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e248:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e24c:	e7b9      	b.n	800e1c2 <_strtod_l+0x2ca>
 800e24e:	2b6e      	cmp	r3, #110	; 0x6e
 800e250:	e7db      	b.n	800e20a <_strtod_l+0x312>
 800e252:	498f      	ldr	r1, [pc, #572]	; (800e490 <_strtod_l+0x598>)
 800e254:	a81d      	add	r0, sp, #116	; 0x74
 800e256:	f001 fe1f 	bl	800fe98 <__match>
 800e25a:	2800      	cmp	r0, #0
 800e25c:	f43f aeaa 	beq.w	800dfb4 <_strtod_l+0xbc>
 800e260:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e262:	498c      	ldr	r1, [pc, #560]	; (800e494 <_strtod_l+0x59c>)
 800e264:	3b01      	subs	r3, #1
 800e266:	a81d      	add	r0, sp, #116	; 0x74
 800e268:	931d      	str	r3, [sp, #116]	; 0x74
 800e26a:	f001 fe15 	bl	800fe98 <__match>
 800e26e:	b910      	cbnz	r0, 800e276 <_strtod_l+0x37e>
 800e270:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e272:	3301      	adds	r3, #1
 800e274:	931d      	str	r3, [sp, #116]	; 0x74
 800e276:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e4a4 <_strtod_l+0x5ac>
 800e27a:	f04f 0a00 	mov.w	sl, #0
 800e27e:	e67d      	b.n	800df7c <_strtod_l+0x84>
 800e280:	4885      	ldr	r0, [pc, #532]	; (800e498 <_strtod_l+0x5a0>)
 800e282:	f002 fdb5 	bl	8010df0 <nan>
 800e286:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e28a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e28e:	e675      	b.n	800df7c <_strtod_l+0x84>
 800e290:	9b07      	ldr	r3, [sp, #28]
 800e292:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e294:	1af3      	subs	r3, r6, r3
 800e296:	2f00      	cmp	r7, #0
 800e298:	bf08      	it	eq
 800e29a:	462f      	moveq	r7, r5
 800e29c:	2d10      	cmp	r5, #16
 800e29e:	9308      	str	r3, [sp, #32]
 800e2a0:	46a8      	mov	r8, r5
 800e2a2:	bfa8      	it	ge
 800e2a4:	f04f 0810 	movge.w	r8, #16
 800e2a8:	f7f2 f94c 	bl	8000544 <__aeabi_ui2d>
 800e2ac:	2d09      	cmp	r5, #9
 800e2ae:	4682      	mov	sl, r0
 800e2b0:	468b      	mov	fp, r1
 800e2b2:	dd13      	ble.n	800e2dc <_strtod_l+0x3e4>
 800e2b4:	4b79      	ldr	r3, [pc, #484]	; (800e49c <_strtod_l+0x5a4>)
 800e2b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e2ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e2be:	f7f2 f9bb 	bl	8000638 <__aeabi_dmul>
 800e2c2:	4682      	mov	sl, r0
 800e2c4:	4648      	mov	r0, r9
 800e2c6:	468b      	mov	fp, r1
 800e2c8:	f7f2 f93c 	bl	8000544 <__aeabi_ui2d>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4650      	mov	r0, sl
 800e2d2:	4659      	mov	r1, fp
 800e2d4:	f7f1 fffa 	bl	80002cc <__adddf3>
 800e2d8:	4682      	mov	sl, r0
 800e2da:	468b      	mov	fp, r1
 800e2dc:	2d0f      	cmp	r5, #15
 800e2de:	dc38      	bgt.n	800e352 <_strtod_l+0x45a>
 800e2e0:	9b08      	ldr	r3, [sp, #32]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f43f ae4a 	beq.w	800df7c <_strtod_l+0x84>
 800e2e8:	dd24      	ble.n	800e334 <_strtod_l+0x43c>
 800e2ea:	2b16      	cmp	r3, #22
 800e2ec:	dc0b      	bgt.n	800e306 <_strtod_l+0x40e>
 800e2ee:	4d6b      	ldr	r5, [pc, #428]	; (800e49c <_strtod_l+0x5a4>)
 800e2f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e2f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e2f8:	4652      	mov	r2, sl
 800e2fa:	465b      	mov	r3, fp
 800e2fc:	f7f2 f99c 	bl	8000638 <__aeabi_dmul>
 800e300:	4682      	mov	sl, r0
 800e302:	468b      	mov	fp, r1
 800e304:	e63a      	b.n	800df7c <_strtod_l+0x84>
 800e306:	9a08      	ldr	r2, [sp, #32]
 800e308:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e30c:	4293      	cmp	r3, r2
 800e30e:	db20      	blt.n	800e352 <_strtod_l+0x45a>
 800e310:	4c62      	ldr	r4, [pc, #392]	; (800e49c <_strtod_l+0x5a4>)
 800e312:	f1c5 050f 	rsb	r5, r5, #15
 800e316:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e31a:	4652      	mov	r2, sl
 800e31c:	465b      	mov	r3, fp
 800e31e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e322:	f7f2 f989 	bl	8000638 <__aeabi_dmul>
 800e326:	9b08      	ldr	r3, [sp, #32]
 800e328:	1b5d      	subs	r5, r3, r5
 800e32a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e32e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e332:	e7e3      	b.n	800e2fc <_strtod_l+0x404>
 800e334:	9b08      	ldr	r3, [sp, #32]
 800e336:	3316      	adds	r3, #22
 800e338:	db0b      	blt.n	800e352 <_strtod_l+0x45a>
 800e33a:	9b07      	ldr	r3, [sp, #28]
 800e33c:	4a57      	ldr	r2, [pc, #348]	; (800e49c <_strtod_l+0x5a4>)
 800e33e:	1b9e      	subs	r6, r3, r6
 800e340:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e344:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e348:	4650      	mov	r0, sl
 800e34a:	4659      	mov	r1, fp
 800e34c:	f7f2 fa9e 	bl	800088c <__aeabi_ddiv>
 800e350:	e7d6      	b.n	800e300 <_strtod_l+0x408>
 800e352:	9b08      	ldr	r3, [sp, #32]
 800e354:	eba5 0808 	sub.w	r8, r5, r8
 800e358:	4498      	add	r8, r3
 800e35a:	f1b8 0f00 	cmp.w	r8, #0
 800e35e:	dd71      	ble.n	800e444 <_strtod_l+0x54c>
 800e360:	f018 030f 	ands.w	r3, r8, #15
 800e364:	d00a      	beq.n	800e37c <_strtod_l+0x484>
 800e366:	494d      	ldr	r1, [pc, #308]	; (800e49c <_strtod_l+0x5a4>)
 800e368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e36c:	4652      	mov	r2, sl
 800e36e:	465b      	mov	r3, fp
 800e370:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e374:	f7f2 f960 	bl	8000638 <__aeabi_dmul>
 800e378:	4682      	mov	sl, r0
 800e37a:	468b      	mov	fp, r1
 800e37c:	f038 080f 	bics.w	r8, r8, #15
 800e380:	d04d      	beq.n	800e41e <_strtod_l+0x526>
 800e382:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e386:	dd22      	ble.n	800e3ce <_strtod_l+0x4d6>
 800e388:	2500      	movs	r5, #0
 800e38a:	462e      	mov	r6, r5
 800e38c:	9509      	str	r5, [sp, #36]	; 0x24
 800e38e:	9507      	str	r5, [sp, #28]
 800e390:	2322      	movs	r3, #34	; 0x22
 800e392:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e4a4 <_strtod_l+0x5ac>
 800e396:	6023      	str	r3, [r4, #0]
 800e398:	f04f 0a00 	mov.w	sl, #0
 800e39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f43f adec 	beq.w	800df7c <_strtod_l+0x84>
 800e3a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f001 fe92 	bl	80100d0 <_Bfree>
 800e3ac:	9907      	ldr	r1, [sp, #28]
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f001 fe8e 	bl	80100d0 <_Bfree>
 800e3b4:	4631      	mov	r1, r6
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f001 fe8a 	bl	80100d0 <_Bfree>
 800e3bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f001 fe86 	bl	80100d0 <_Bfree>
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f001 fe82 	bl	80100d0 <_Bfree>
 800e3cc:	e5d6      	b.n	800df7c <_strtod_l+0x84>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e3d4:	4650      	mov	r0, sl
 800e3d6:	4659      	mov	r1, fp
 800e3d8:	4699      	mov	r9, r3
 800e3da:	f1b8 0f01 	cmp.w	r8, #1
 800e3de:	dc21      	bgt.n	800e424 <_strtod_l+0x52c>
 800e3e0:	b10b      	cbz	r3, 800e3e6 <_strtod_l+0x4ee>
 800e3e2:	4682      	mov	sl, r0
 800e3e4:	468b      	mov	fp, r1
 800e3e6:	4b2e      	ldr	r3, [pc, #184]	; (800e4a0 <_strtod_l+0x5a8>)
 800e3e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e3ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e3f0:	4652      	mov	r2, sl
 800e3f2:	465b      	mov	r3, fp
 800e3f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e3f8:	f7f2 f91e 	bl	8000638 <__aeabi_dmul>
 800e3fc:	4b29      	ldr	r3, [pc, #164]	; (800e4a4 <_strtod_l+0x5ac>)
 800e3fe:	460a      	mov	r2, r1
 800e400:	400b      	ands	r3, r1
 800e402:	4929      	ldr	r1, [pc, #164]	; (800e4a8 <_strtod_l+0x5b0>)
 800e404:	428b      	cmp	r3, r1
 800e406:	4682      	mov	sl, r0
 800e408:	d8be      	bhi.n	800e388 <_strtod_l+0x490>
 800e40a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e40e:	428b      	cmp	r3, r1
 800e410:	bf86      	itte	hi
 800e412:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e4ac <_strtod_l+0x5b4>
 800e416:	f04f 3aff 	movhi.w	sl, #4294967295
 800e41a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e41e:	2300      	movs	r3, #0
 800e420:	9304      	str	r3, [sp, #16]
 800e422:	e081      	b.n	800e528 <_strtod_l+0x630>
 800e424:	f018 0f01 	tst.w	r8, #1
 800e428:	d007      	beq.n	800e43a <_strtod_l+0x542>
 800e42a:	4b1d      	ldr	r3, [pc, #116]	; (800e4a0 <_strtod_l+0x5a8>)
 800e42c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	f7f2 f900 	bl	8000638 <__aeabi_dmul>
 800e438:	2301      	movs	r3, #1
 800e43a:	f109 0901 	add.w	r9, r9, #1
 800e43e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e442:	e7ca      	b.n	800e3da <_strtod_l+0x4e2>
 800e444:	d0eb      	beq.n	800e41e <_strtod_l+0x526>
 800e446:	f1c8 0800 	rsb	r8, r8, #0
 800e44a:	f018 020f 	ands.w	r2, r8, #15
 800e44e:	d00a      	beq.n	800e466 <_strtod_l+0x56e>
 800e450:	4b12      	ldr	r3, [pc, #72]	; (800e49c <_strtod_l+0x5a4>)
 800e452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e456:	4650      	mov	r0, sl
 800e458:	4659      	mov	r1, fp
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	f7f2 fa15 	bl	800088c <__aeabi_ddiv>
 800e462:	4682      	mov	sl, r0
 800e464:	468b      	mov	fp, r1
 800e466:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e46a:	d0d8      	beq.n	800e41e <_strtod_l+0x526>
 800e46c:	f1b8 0f1f 	cmp.w	r8, #31
 800e470:	dd1e      	ble.n	800e4b0 <_strtod_l+0x5b8>
 800e472:	2500      	movs	r5, #0
 800e474:	462e      	mov	r6, r5
 800e476:	9509      	str	r5, [sp, #36]	; 0x24
 800e478:	9507      	str	r5, [sp, #28]
 800e47a:	2322      	movs	r3, #34	; 0x22
 800e47c:	f04f 0a00 	mov.w	sl, #0
 800e480:	f04f 0b00 	mov.w	fp, #0
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	e789      	b.n	800e39c <_strtod_l+0x4a4>
 800e488:	08011de9 	.word	0x08011de9
 800e48c:	08011e2c 	.word	0x08011e2c
 800e490:	08011de1 	.word	0x08011de1
 800e494:	08011f6c 	.word	0x08011f6c
 800e498:	08012228 	.word	0x08012228
 800e49c:	08012108 	.word	0x08012108
 800e4a0:	080120e0 	.word	0x080120e0
 800e4a4:	7ff00000 	.word	0x7ff00000
 800e4a8:	7ca00000 	.word	0x7ca00000
 800e4ac:	7fefffff 	.word	0x7fefffff
 800e4b0:	f018 0310 	ands.w	r3, r8, #16
 800e4b4:	bf18      	it	ne
 800e4b6:	236a      	movne	r3, #106	; 0x6a
 800e4b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e870 <_strtod_l+0x978>
 800e4bc:	9304      	str	r3, [sp, #16]
 800e4be:	4650      	mov	r0, sl
 800e4c0:	4659      	mov	r1, fp
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f018 0f01 	tst.w	r8, #1
 800e4c8:	d004      	beq.n	800e4d4 <_strtod_l+0x5dc>
 800e4ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e4ce:	f7f2 f8b3 	bl	8000638 <__aeabi_dmul>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e4d8:	f109 0908 	add.w	r9, r9, #8
 800e4dc:	d1f2      	bne.n	800e4c4 <_strtod_l+0x5cc>
 800e4de:	b10b      	cbz	r3, 800e4e4 <_strtod_l+0x5ec>
 800e4e0:	4682      	mov	sl, r0
 800e4e2:	468b      	mov	fp, r1
 800e4e4:	9b04      	ldr	r3, [sp, #16]
 800e4e6:	b1bb      	cbz	r3, 800e518 <_strtod_l+0x620>
 800e4e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e4ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	4659      	mov	r1, fp
 800e4f4:	dd10      	ble.n	800e518 <_strtod_l+0x620>
 800e4f6:	2b1f      	cmp	r3, #31
 800e4f8:	f340 8128 	ble.w	800e74c <_strtod_l+0x854>
 800e4fc:	2b34      	cmp	r3, #52	; 0x34
 800e4fe:	bfde      	ittt	le
 800e500:	3b20      	suble	r3, #32
 800e502:	f04f 32ff 	movle.w	r2, #4294967295
 800e506:	fa02 f303 	lslle.w	r3, r2, r3
 800e50a:	f04f 0a00 	mov.w	sl, #0
 800e50e:	bfcc      	ite	gt
 800e510:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e514:	ea03 0b01 	andle.w	fp, r3, r1
 800e518:	2200      	movs	r2, #0
 800e51a:	2300      	movs	r3, #0
 800e51c:	4650      	mov	r0, sl
 800e51e:	4659      	mov	r1, fp
 800e520:	f7f2 faf2 	bl	8000b08 <__aeabi_dcmpeq>
 800e524:	2800      	cmp	r0, #0
 800e526:	d1a4      	bne.n	800e472 <_strtod_l+0x57a>
 800e528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e52a:	9300      	str	r3, [sp, #0]
 800e52c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e52e:	462b      	mov	r3, r5
 800e530:	463a      	mov	r2, r7
 800e532:	4620      	mov	r0, r4
 800e534:	f001 fe38 	bl	80101a8 <__s2b>
 800e538:	9009      	str	r0, [sp, #36]	; 0x24
 800e53a:	2800      	cmp	r0, #0
 800e53c:	f43f af24 	beq.w	800e388 <_strtod_l+0x490>
 800e540:	9b07      	ldr	r3, [sp, #28]
 800e542:	1b9e      	subs	r6, r3, r6
 800e544:	9b08      	ldr	r3, [sp, #32]
 800e546:	2b00      	cmp	r3, #0
 800e548:	bfb4      	ite	lt
 800e54a:	4633      	movlt	r3, r6
 800e54c:	2300      	movge	r3, #0
 800e54e:	9310      	str	r3, [sp, #64]	; 0x40
 800e550:	9b08      	ldr	r3, [sp, #32]
 800e552:	2500      	movs	r5, #0
 800e554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e558:	9318      	str	r3, [sp, #96]	; 0x60
 800e55a:	462e      	mov	r6, r5
 800e55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e55e:	4620      	mov	r0, r4
 800e560:	6859      	ldr	r1, [r3, #4]
 800e562:	f001 fd75 	bl	8010050 <_Balloc>
 800e566:	9007      	str	r0, [sp, #28]
 800e568:	2800      	cmp	r0, #0
 800e56a:	f43f af11 	beq.w	800e390 <_strtod_l+0x498>
 800e56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e570:	691a      	ldr	r2, [r3, #16]
 800e572:	3202      	adds	r2, #2
 800e574:	f103 010c 	add.w	r1, r3, #12
 800e578:	0092      	lsls	r2, r2, #2
 800e57a:	300c      	adds	r0, #12
 800e57c:	f001 fd5a 	bl	8010034 <memcpy>
 800e580:	ec4b ab10 	vmov	d0, sl, fp
 800e584:	aa20      	add	r2, sp, #128	; 0x80
 800e586:	a91f      	add	r1, sp, #124	; 0x7c
 800e588:	4620      	mov	r0, r4
 800e58a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e58e:	f002 f947 	bl	8010820 <__d2b>
 800e592:	901e      	str	r0, [sp, #120]	; 0x78
 800e594:	2800      	cmp	r0, #0
 800e596:	f43f aefb 	beq.w	800e390 <_strtod_l+0x498>
 800e59a:	2101      	movs	r1, #1
 800e59c:	4620      	mov	r0, r4
 800e59e:	f001 fe9d 	bl	80102dc <__i2b>
 800e5a2:	4606      	mov	r6, r0
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	f43f aef3 	beq.w	800e390 <_strtod_l+0x498>
 800e5aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5ac:	9904      	ldr	r1, [sp, #16]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	bfab      	itete	ge
 800e5b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e5b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e5b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e5b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e5bc:	bfac      	ite	ge
 800e5be:	eb03 0902 	addge.w	r9, r3, r2
 800e5c2:	1ad7      	sublt	r7, r2, r3
 800e5c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e5c6:	eba3 0801 	sub.w	r8, r3, r1
 800e5ca:	4490      	add	r8, r2
 800e5cc:	4ba3      	ldr	r3, [pc, #652]	; (800e85c <_strtod_l+0x964>)
 800e5ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5d2:	4598      	cmp	r8, r3
 800e5d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e5d8:	f280 80cc 	bge.w	800e774 <_strtod_l+0x87c>
 800e5dc:	eba3 0308 	sub.w	r3, r3, r8
 800e5e0:	2b1f      	cmp	r3, #31
 800e5e2:	eba2 0203 	sub.w	r2, r2, r3
 800e5e6:	f04f 0101 	mov.w	r1, #1
 800e5ea:	f300 80b6 	bgt.w	800e75a <_strtod_l+0x862>
 800e5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e5f2:	9311      	str	r3, [sp, #68]	; 0x44
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	930c      	str	r3, [sp, #48]	; 0x30
 800e5f8:	eb09 0802 	add.w	r8, r9, r2
 800e5fc:	9b04      	ldr	r3, [sp, #16]
 800e5fe:	45c1      	cmp	r9, r8
 800e600:	4417      	add	r7, r2
 800e602:	441f      	add	r7, r3
 800e604:	464b      	mov	r3, r9
 800e606:	bfa8      	it	ge
 800e608:	4643      	movge	r3, r8
 800e60a:	42bb      	cmp	r3, r7
 800e60c:	bfa8      	it	ge
 800e60e:	463b      	movge	r3, r7
 800e610:	2b00      	cmp	r3, #0
 800e612:	bfc2      	ittt	gt
 800e614:	eba8 0803 	subgt.w	r8, r8, r3
 800e618:	1aff      	subgt	r7, r7, r3
 800e61a:	eba9 0903 	subgt.w	r9, r9, r3
 800e61e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e620:	2b00      	cmp	r3, #0
 800e622:	dd17      	ble.n	800e654 <_strtod_l+0x75c>
 800e624:	4631      	mov	r1, r6
 800e626:	461a      	mov	r2, r3
 800e628:	4620      	mov	r0, r4
 800e62a:	f001 ff13 	bl	8010454 <__pow5mult>
 800e62e:	4606      	mov	r6, r0
 800e630:	2800      	cmp	r0, #0
 800e632:	f43f aead 	beq.w	800e390 <_strtod_l+0x498>
 800e636:	4601      	mov	r1, r0
 800e638:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e63a:	4620      	mov	r0, r4
 800e63c:	f001 fe64 	bl	8010308 <__multiply>
 800e640:	900f      	str	r0, [sp, #60]	; 0x3c
 800e642:	2800      	cmp	r0, #0
 800e644:	f43f aea4 	beq.w	800e390 <_strtod_l+0x498>
 800e648:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e64a:	4620      	mov	r0, r4
 800e64c:	f001 fd40 	bl	80100d0 <_Bfree>
 800e650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e652:	931e      	str	r3, [sp, #120]	; 0x78
 800e654:	f1b8 0f00 	cmp.w	r8, #0
 800e658:	f300 8091 	bgt.w	800e77e <_strtod_l+0x886>
 800e65c:	9b08      	ldr	r3, [sp, #32]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	dd08      	ble.n	800e674 <_strtod_l+0x77c>
 800e662:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e664:	9907      	ldr	r1, [sp, #28]
 800e666:	4620      	mov	r0, r4
 800e668:	f001 fef4 	bl	8010454 <__pow5mult>
 800e66c:	9007      	str	r0, [sp, #28]
 800e66e:	2800      	cmp	r0, #0
 800e670:	f43f ae8e 	beq.w	800e390 <_strtod_l+0x498>
 800e674:	2f00      	cmp	r7, #0
 800e676:	dd08      	ble.n	800e68a <_strtod_l+0x792>
 800e678:	9907      	ldr	r1, [sp, #28]
 800e67a:	463a      	mov	r2, r7
 800e67c:	4620      	mov	r0, r4
 800e67e:	f001 ff43 	bl	8010508 <__lshift>
 800e682:	9007      	str	r0, [sp, #28]
 800e684:	2800      	cmp	r0, #0
 800e686:	f43f ae83 	beq.w	800e390 <_strtod_l+0x498>
 800e68a:	f1b9 0f00 	cmp.w	r9, #0
 800e68e:	dd08      	ble.n	800e6a2 <_strtod_l+0x7aa>
 800e690:	4631      	mov	r1, r6
 800e692:	464a      	mov	r2, r9
 800e694:	4620      	mov	r0, r4
 800e696:	f001 ff37 	bl	8010508 <__lshift>
 800e69a:	4606      	mov	r6, r0
 800e69c:	2800      	cmp	r0, #0
 800e69e:	f43f ae77 	beq.w	800e390 <_strtod_l+0x498>
 800e6a2:	9a07      	ldr	r2, [sp, #28]
 800e6a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f001 ffb6 	bl	8010618 <__mdiff>
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f43f ae6e 	beq.w	800e390 <_strtod_l+0x498>
 800e6b4:	68c3      	ldr	r3, [r0, #12]
 800e6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60c3      	str	r3, [r0, #12]
 800e6bc:	4631      	mov	r1, r6
 800e6be:	f001 ff8f 	bl	80105e0 <__mcmp>
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	da65      	bge.n	800e792 <_strtod_l+0x89a>
 800e6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6c8:	ea53 030a 	orrs.w	r3, r3, sl
 800e6cc:	f040 8087 	bne.w	800e7de <_strtod_l+0x8e6>
 800e6d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f040 8082 	bne.w	800e7de <_strtod_l+0x8e6>
 800e6da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6de:	0d1b      	lsrs	r3, r3, #20
 800e6e0:	051b      	lsls	r3, r3, #20
 800e6e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e6e6:	d97a      	bls.n	800e7de <_strtod_l+0x8e6>
 800e6e8:	696b      	ldr	r3, [r5, #20]
 800e6ea:	b913      	cbnz	r3, 800e6f2 <_strtod_l+0x7fa>
 800e6ec:	692b      	ldr	r3, [r5, #16]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	dd75      	ble.n	800e7de <_strtod_l+0x8e6>
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f001 ff06 	bl	8010508 <__lshift>
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4605      	mov	r5, r0
 800e700:	f001 ff6e 	bl	80105e0 <__mcmp>
 800e704:	2800      	cmp	r0, #0
 800e706:	dd6a      	ble.n	800e7de <_strtod_l+0x8e6>
 800e708:	9904      	ldr	r1, [sp, #16]
 800e70a:	4a55      	ldr	r2, [pc, #340]	; (800e860 <_strtod_l+0x968>)
 800e70c:	465b      	mov	r3, fp
 800e70e:	2900      	cmp	r1, #0
 800e710:	f000 8085 	beq.w	800e81e <_strtod_l+0x926>
 800e714:	ea02 010b 	and.w	r1, r2, fp
 800e718:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e71c:	dc7f      	bgt.n	800e81e <_strtod_l+0x926>
 800e71e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e722:	f77f aeaa 	ble.w	800e47a <_strtod_l+0x582>
 800e726:	4a4f      	ldr	r2, [pc, #316]	; (800e864 <_strtod_l+0x96c>)
 800e728:	2300      	movs	r3, #0
 800e72a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e72e:	4650      	mov	r0, sl
 800e730:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e734:	4659      	mov	r1, fp
 800e736:	f7f1 ff7f 	bl	8000638 <__aeabi_dmul>
 800e73a:	460b      	mov	r3, r1
 800e73c:	4303      	orrs	r3, r0
 800e73e:	bf08      	it	eq
 800e740:	2322      	moveq	r3, #34	; 0x22
 800e742:	4682      	mov	sl, r0
 800e744:	468b      	mov	fp, r1
 800e746:	bf08      	it	eq
 800e748:	6023      	streq	r3, [r4, #0]
 800e74a:	e62b      	b.n	800e3a4 <_strtod_l+0x4ac>
 800e74c:	f04f 32ff 	mov.w	r2, #4294967295
 800e750:	fa02 f303 	lsl.w	r3, r2, r3
 800e754:	ea03 0a0a 	and.w	sl, r3, sl
 800e758:	e6de      	b.n	800e518 <_strtod_l+0x620>
 800e75a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e75e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e762:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e766:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e76a:	fa01 f308 	lsl.w	r3, r1, r8
 800e76e:	930c      	str	r3, [sp, #48]	; 0x30
 800e770:	9111      	str	r1, [sp, #68]	; 0x44
 800e772:	e741      	b.n	800e5f8 <_strtod_l+0x700>
 800e774:	2300      	movs	r3, #0
 800e776:	930c      	str	r3, [sp, #48]	; 0x30
 800e778:	2301      	movs	r3, #1
 800e77a:	9311      	str	r3, [sp, #68]	; 0x44
 800e77c:	e73c      	b.n	800e5f8 <_strtod_l+0x700>
 800e77e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e780:	4642      	mov	r2, r8
 800e782:	4620      	mov	r0, r4
 800e784:	f001 fec0 	bl	8010508 <__lshift>
 800e788:	901e      	str	r0, [sp, #120]	; 0x78
 800e78a:	2800      	cmp	r0, #0
 800e78c:	f47f af66 	bne.w	800e65c <_strtod_l+0x764>
 800e790:	e5fe      	b.n	800e390 <_strtod_l+0x498>
 800e792:	465f      	mov	r7, fp
 800e794:	d16e      	bne.n	800e874 <_strtod_l+0x97c>
 800e796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e798:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e79c:	b342      	cbz	r2, 800e7f0 <_strtod_l+0x8f8>
 800e79e:	4a32      	ldr	r2, [pc, #200]	; (800e868 <_strtod_l+0x970>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d128      	bne.n	800e7f6 <_strtod_l+0x8fe>
 800e7a4:	9b04      	ldr	r3, [sp, #16]
 800e7a6:	4650      	mov	r0, sl
 800e7a8:	b1eb      	cbz	r3, 800e7e6 <_strtod_l+0x8ee>
 800e7aa:	4a2d      	ldr	r2, [pc, #180]	; (800e860 <_strtod_l+0x968>)
 800e7ac:	403a      	ands	r2, r7
 800e7ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e7b2:	f04f 31ff 	mov.w	r1, #4294967295
 800e7b6:	d819      	bhi.n	800e7ec <_strtod_l+0x8f4>
 800e7b8:	0d12      	lsrs	r2, r2, #20
 800e7ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e7be:	fa01 f303 	lsl.w	r3, r1, r3
 800e7c2:	4298      	cmp	r0, r3
 800e7c4:	d117      	bne.n	800e7f6 <_strtod_l+0x8fe>
 800e7c6:	4b29      	ldr	r3, [pc, #164]	; (800e86c <_strtod_l+0x974>)
 800e7c8:	429f      	cmp	r7, r3
 800e7ca:	d102      	bne.n	800e7d2 <_strtod_l+0x8da>
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	f43f addf 	beq.w	800e390 <_strtod_l+0x498>
 800e7d2:	4b23      	ldr	r3, [pc, #140]	; (800e860 <_strtod_l+0x968>)
 800e7d4:	403b      	ands	r3, r7
 800e7d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e7da:	f04f 0a00 	mov.w	sl, #0
 800e7de:	9b04      	ldr	r3, [sp, #16]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d1a0      	bne.n	800e726 <_strtod_l+0x82e>
 800e7e4:	e5de      	b.n	800e3a4 <_strtod_l+0x4ac>
 800e7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ea:	e7ea      	b.n	800e7c2 <_strtod_l+0x8ca>
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	e7e8      	b.n	800e7c2 <_strtod_l+0x8ca>
 800e7f0:	ea53 030a 	orrs.w	r3, r3, sl
 800e7f4:	d088      	beq.n	800e708 <_strtod_l+0x810>
 800e7f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7f8:	b1db      	cbz	r3, 800e832 <_strtod_l+0x93a>
 800e7fa:	423b      	tst	r3, r7
 800e7fc:	d0ef      	beq.n	800e7de <_strtod_l+0x8e6>
 800e7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e800:	9a04      	ldr	r2, [sp, #16]
 800e802:	4650      	mov	r0, sl
 800e804:	4659      	mov	r1, fp
 800e806:	b1c3      	cbz	r3, 800e83a <_strtod_l+0x942>
 800e808:	f7ff fb58 	bl	800debc <sulp>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e814:	f7f1 fd5a 	bl	80002cc <__adddf3>
 800e818:	4682      	mov	sl, r0
 800e81a:	468b      	mov	fp, r1
 800e81c:	e7df      	b.n	800e7de <_strtod_l+0x8e6>
 800e81e:	4013      	ands	r3, r2
 800e820:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e824:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e828:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e82c:	f04f 3aff 	mov.w	sl, #4294967295
 800e830:	e7d5      	b.n	800e7de <_strtod_l+0x8e6>
 800e832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e834:	ea13 0f0a 	tst.w	r3, sl
 800e838:	e7e0      	b.n	800e7fc <_strtod_l+0x904>
 800e83a:	f7ff fb3f 	bl	800debc <sulp>
 800e83e:	4602      	mov	r2, r0
 800e840:	460b      	mov	r3, r1
 800e842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e846:	f7f1 fd3f 	bl	80002c8 <__aeabi_dsub>
 800e84a:	2200      	movs	r2, #0
 800e84c:	2300      	movs	r3, #0
 800e84e:	4682      	mov	sl, r0
 800e850:	468b      	mov	fp, r1
 800e852:	f7f2 f959 	bl	8000b08 <__aeabi_dcmpeq>
 800e856:	2800      	cmp	r0, #0
 800e858:	d0c1      	beq.n	800e7de <_strtod_l+0x8e6>
 800e85a:	e60e      	b.n	800e47a <_strtod_l+0x582>
 800e85c:	fffffc02 	.word	0xfffffc02
 800e860:	7ff00000 	.word	0x7ff00000
 800e864:	39500000 	.word	0x39500000
 800e868:	000fffff 	.word	0x000fffff
 800e86c:	7fefffff 	.word	0x7fefffff
 800e870:	08011e40 	.word	0x08011e40
 800e874:	4631      	mov	r1, r6
 800e876:	4628      	mov	r0, r5
 800e878:	f002 f82e 	bl	80108d8 <__ratio>
 800e87c:	ec59 8b10 	vmov	r8, r9, d0
 800e880:	ee10 0a10 	vmov	r0, s0
 800e884:	2200      	movs	r2, #0
 800e886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e88a:	4649      	mov	r1, r9
 800e88c:	f7f2 f950 	bl	8000b30 <__aeabi_dcmple>
 800e890:	2800      	cmp	r0, #0
 800e892:	d07c      	beq.n	800e98e <_strtod_l+0xa96>
 800e894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e896:	2b00      	cmp	r3, #0
 800e898:	d04c      	beq.n	800e934 <_strtod_l+0xa3c>
 800e89a:	4b95      	ldr	r3, [pc, #596]	; (800eaf0 <_strtod_l+0xbf8>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e8a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800eaf0 <_strtod_l+0xbf8>
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	4b92      	ldr	r3, [pc, #584]	; (800eaf4 <_strtod_l+0xbfc>)
 800e8ac:	403b      	ands	r3, r7
 800e8ae:	9311      	str	r3, [sp, #68]	; 0x44
 800e8b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e8b2:	4b91      	ldr	r3, [pc, #580]	; (800eaf8 <_strtod_l+0xc00>)
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	f040 80b2 	bne.w	800ea1e <_strtod_l+0xb26>
 800e8ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e8be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e8c6:	ec4b ab10 	vmov	d0, sl, fp
 800e8ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e8ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e8d2:	f001 ff29 	bl	8010728 <__ulp>
 800e8d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8da:	ec53 2b10 	vmov	r2, r3, d0
 800e8de:	f7f1 feab 	bl	8000638 <__aeabi_dmul>
 800e8e2:	4652      	mov	r2, sl
 800e8e4:	465b      	mov	r3, fp
 800e8e6:	f7f1 fcf1 	bl	80002cc <__adddf3>
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4981      	ldr	r1, [pc, #516]	; (800eaf4 <_strtod_l+0xbfc>)
 800e8ee:	4a83      	ldr	r2, [pc, #524]	; (800eafc <_strtod_l+0xc04>)
 800e8f0:	4019      	ands	r1, r3
 800e8f2:	4291      	cmp	r1, r2
 800e8f4:	4682      	mov	sl, r0
 800e8f6:	d95e      	bls.n	800e9b6 <_strtod_l+0xabe>
 800e8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d103      	bne.n	800e90a <_strtod_l+0xa12>
 800e902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e904:	3301      	adds	r3, #1
 800e906:	f43f ad43 	beq.w	800e390 <_strtod_l+0x498>
 800e90a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800eb08 <_strtod_l+0xc10>
 800e90e:	f04f 3aff 	mov.w	sl, #4294967295
 800e912:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e914:	4620      	mov	r0, r4
 800e916:	f001 fbdb 	bl	80100d0 <_Bfree>
 800e91a:	9907      	ldr	r1, [sp, #28]
 800e91c:	4620      	mov	r0, r4
 800e91e:	f001 fbd7 	bl	80100d0 <_Bfree>
 800e922:	4631      	mov	r1, r6
 800e924:	4620      	mov	r0, r4
 800e926:	f001 fbd3 	bl	80100d0 <_Bfree>
 800e92a:	4629      	mov	r1, r5
 800e92c:	4620      	mov	r0, r4
 800e92e:	f001 fbcf 	bl	80100d0 <_Bfree>
 800e932:	e613      	b.n	800e55c <_strtod_l+0x664>
 800e934:	f1ba 0f00 	cmp.w	sl, #0
 800e938:	d11b      	bne.n	800e972 <_strtod_l+0xa7a>
 800e93a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e93e:	b9f3      	cbnz	r3, 800e97e <_strtod_l+0xa86>
 800e940:	4b6b      	ldr	r3, [pc, #428]	; (800eaf0 <_strtod_l+0xbf8>)
 800e942:	2200      	movs	r2, #0
 800e944:	4640      	mov	r0, r8
 800e946:	4649      	mov	r1, r9
 800e948:	f7f2 f8e8 	bl	8000b1c <__aeabi_dcmplt>
 800e94c:	b9d0      	cbnz	r0, 800e984 <_strtod_l+0xa8c>
 800e94e:	4640      	mov	r0, r8
 800e950:	4649      	mov	r1, r9
 800e952:	4b6b      	ldr	r3, [pc, #428]	; (800eb00 <_strtod_l+0xc08>)
 800e954:	2200      	movs	r2, #0
 800e956:	f7f1 fe6f 	bl	8000638 <__aeabi_dmul>
 800e95a:	4680      	mov	r8, r0
 800e95c:	4689      	mov	r9, r1
 800e95e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e962:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e966:	931b      	str	r3, [sp, #108]	; 0x6c
 800e968:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e96c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e970:	e79b      	b.n	800e8aa <_strtod_l+0x9b2>
 800e972:	f1ba 0f01 	cmp.w	sl, #1
 800e976:	d102      	bne.n	800e97e <_strtod_l+0xa86>
 800e978:	2f00      	cmp	r7, #0
 800e97a:	f43f ad7e 	beq.w	800e47a <_strtod_l+0x582>
 800e97e:	4b61      	ldr	r3, [pc, #388]	; (800eb04 <_strtod_l+0xc0c>)
 800e980:	2200      	movs	r2, #0
 800e982:	e78c      	b.n	800e89e <_strtod_l+0x9a6>
 800e984:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eb00 <_strtod_l+0xc08>
 800e988:	f04f 0800 	mov.w	r8, #0
 800e98c:	e7e7      	b.n	800e95e <_strtod_l+0xa66>
 800e98e:	4b5c      	ldr	r3, [pc, #368]	; (800eb00 <_strtod_l+0xc08>)
 800e990:	4640      	mov	r0, r8
 800e992:	4649      	mov	r1, r9
 800e994:	2200      	movs	r2, #0
 800e996:	f7f1 fe4f 	bl	8000638 <__aeabi_dmul>
 800e99a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e99c:	4680      	mov	r8, r0
 800e99e:	4689      	mov	r9, r1
 800e9a0:	b933      	cbnz	r3, 800e9b0 <_strtod_l+0xab8>
 800e9a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9a6:	9012      	str	r0, [sp, #72]	; 0x48
 800e9a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800e9aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e9ae:	e7dd      	b.n	800e96c <_strtod_l+0xa74>
 800e9b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e9b4:	e7f9      	b.n	800e9aa <_strtod_l+0xab2>
 800e9b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e9ba:	9b04      	ldr	r3, [sp, #16]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1a8      	bne.n	800e912 <_strtod_l+0xa1a>
 800e9c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e9c6:	0d1b      	lsrs	r3, r3, #20
 800e9c8:	051b      	lsls	r3, r3, #20
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d1a1      	bne.n	800e912 <_strtod_l+0xa1a>
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	f7f2 f991 	bl	8000cf8 <__aeabi_d2lz>
 800e9d6:	f7f1 fe01 	bl	80005dc <__aeabi_l2d>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	460b      	mov	r3, r1
 800e9de:	4640      	mov	r0, r8
 800e9e0:	4649      	mov	r1, r9
 800e9e2:	f7f1 fc71 	bl	80002c8 <__aeabi_dsub>
 800e9e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9ec:	ea43 030a 	orr.w	r3, r3, sl
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	4680      	mov	r8, r0
 800e9f4:	4689      	mov	r9, r1
 800e9f6:	d053      	beq.n	800eaa0 <_strtod_l+0xba8>
 800e9f8:	a335      	add	r3, pc, #212	; (adr r3, 800ead0 <_strtod_l+0xbd8>)
 800e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fe:	f7f2 f88d 	bl	8000b1c <__aeabi_dcmplt>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f47f acce 	bne.w	800e3a4 <_strtod_l+0x4ac>
 800ea08:	a333      	add	r3, pc, #204	; (adr r3, 800ead8 <_strtod_l+0xbe0>)
 800ea0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0e:	4640      	mov	r0, r8
 800ea10:	4649      	mov	r1, r9
 800ea12:	f7f2 f8a1 	bl	8000b58 <__aeabi_dcmpgt>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	f43f af7b 	beq.w	800e912 <_strtod_l+0xa1a>
 800ea1c:	e4c2      	b.n	800e3a4 <_strtod_l+0x4ac>
 800ea1e:	9b04      	ldr	r3, [sp, #16]
 800ea20:	b333      	cbz	r3, 800ea70 <_strtod_l+0xb78>
 800ea22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ea28:	d822      	bhi.n	800ea70 <_strtod_l+0xb78>
 800ea2a:	a32d      	add	r3, pc, #180	; (adr r3, 800eae0 <_strtod_l+0xbe8>)
 800ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea30:	4640      	mov	r0, r8
 800ea32:	4649      	mov	r1, r9
 800ea34:	f7f2 f87c 	bl	8000b30 <__aeabi_dcmple>
 800ea38:	b1a0      	cbz	r0, 800ea64 <_strtod_l+0xb6c>
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	f7f2 f8d3 	bl	8000be8 <__aeabi_d2uiz>
 800ea42:	2801      	cmp	r0, #1
 800ea44:	bf38      	it	cc
 800ea46:	2001      	movcc	r0, #1
 800ea48:	f7f1 fd7c 	bl	8000544 <__aeabi_ui2d>
 800ea4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea4e:	4680      	mov	r8, r0
 800ea50:	4689      	mov	r9, r1
 800ea52:	bb13      	cbnz	r3, 800ea9a <_strtod_l+0xba2>
 800ea54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea58:	9014      	str	r0, [sp, #80]	; 0x50
 800ea5a:	9315      	str	r3, [sp, #84]	; 0x54
 800ea5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ea60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ea64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ea6c:	1a9b      	subs	r3, r3, r2
 800ea6e:	930d      	str	r3, [sp, #52]	; 0x34
 800ea70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ea78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ea7c:	f001 fe54 	bl	8010728 <__ulp>
 800ea80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea84:	ec53 2b10 	vmov	r2, r3, d0
 800ea88:	f7f1 fdd6 	bl	8000638 <__aeabi_dmul>
 800ea8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ea90:	f7f1 fc1c 	bl	80002cc <__adddf3>
 800ea94:	4682      	mov	sl, r0
 800ea96:	468b      	mov	fp, r1
 800ea98:	e78f      	b.n	800e9ba <_strtod_l+0xac2>
 800ea9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ea9e:	e7dd      	b.n	800ea5c <_strtod_l+0xb64>
 800eaa0:	a311      	add	r3, pc, #68	; (adr r3, 800eae8 <_strtod_l+0xbf0>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f2 f839 	bl	8000b1c <__aeabi_dcmplt>
 800eaaa:	e7b4      	b.n	800ea16 <_strtod_l+0xb1e>
 800eaac:	2300      	movs	r3, #0
 800eaae:	930e      	str	r3, [sp, #56]	; 0x38
 800eab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eab2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eab4:	6013      	str	r3, [r2, #0]
 800eab6:	f7ff ba65 	b.w	800df84 <_strtod_l+0x8c>
 800eaba:	2b65      	cmp	r3, #101	; 0x65
 800eabc:	f43f ab5d 	beq.w	800e17a <_strtod_l+0x282>
 800eac0:	2b45      	cmp	r3, #69	; 0x45
 800eac2:	f43f ab5a 	beq.w	800e17a <_strtod_l+0x282>
 800eac6:	2201      	movs	r2, #1
 800eac8:	f7ff bb92 	b.w	800e1f0 <_strtod_l+0x2f8>
 800eacc:	f3af 8000 	nop.w
 800ead0:	94a03595 	.word	0x94a03595
 800ead4:	3fdfffff 	.word	0x3fdfffff
 800ead8:	35afe535 	.word	0x35afe535
 800eadc:	3fe00000 	.word	0x3fe00000
 800eae0:	ffc00000 	.word	0xffc00000
 800eae4:	41dfffff 	.word	0x41dfffff
 800eae8:	94a03595 	.word	0x94a03595
 800eaec:	3fcfffff 	.word	0x3fcfffff
 800eaf0:	3ff00000 	.word	0x3ff00000
 800eaf4:	7ff00000 	.word	0x7ff00000
 800eaf8:	7fe00000 	.word	0x7fe00000
 800eafc:	7c9fffff 	.word	0x7c9fffff
 800eb00:	3fe00000 	.word	0x3fe00000
 800eb04:	bff00000 	.word	0xbff00000
 800eb08:	7fefffff 	.word	0x7fefffff

0800eb0c <_strtod_r>:
 800eb0c:	4b01      	ldr	r3, [pc, #4]	; (800eb14 <_strtod_r+0x8>)
 800eb0e:	f7ff b9f3 	b.w	800def8 <_strtod_l>
 800eb12:	bf00      	nop
 800eb14:	2000009c 	.word	0x2000009c

0800eb18 <_strtol_l.isra.0>:
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb1e:	d001      	beq.n	800eb24 <_strtol_l.isra.0+0xc>
 800eb20:	2b24      	cmp	r3, #36	; 0x24
 800eb22:	d906      	bls.n	800eb32 <_strtol_l.isra.0+0x1a>
 800eb24:	f7fe faf8 	bl	800d118 <__errno>
 800eb28:	2316      	movs	r3, #22
 800eb2a:	6003      	str	r3, [r0, #0]
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb32:	4f3a      	ldr	r7, [pc, #232]	; (800ec1c <_strtol_l.isra.0+0x104>)
 800eb34:	468e      	mov	lr, r1
 800eb36:	4676      	mov	r6, lr
 800eb38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eb3c:	5de5      	ldrb	r5, [r4, r7]
 800eb3e:	f015 0508 	ands.w	r5, r5, #8
 800eb42:	d1f8      	bne.n	800eb36 <_strtol_l.isra.0+0x1e>
 800eb44:	2c2d      	cmp	r4, #45	; 0x2d
 800eb46:	d134      	bne.n	800ebb2 <_strtol_l.isra.0+0x9a>
 800eb48:	f89e 4000 	ldrb.w	r4, [lr]
 800eb4c:	f04f 0801 	mov.w	r8, #1
 800eb50:	f106 0e02 	add.w	lr, r6, #2
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d05c      	beq.n	800ec12 <_strtol_l.isra.0+0xfa>
 800eb58:	2b10      	cmp	r3, #16
 800eb5a:	d10c      	bne.n	800eb76 <_strtol_l.isra.0+0x5e>
 800eb5c:	2c30      	cmp	r4, #48	; 0x30
 800eb5e:	d10a      	bne.n	800eb76 <_strtol_l.isra.0+0x5e>
 800eb60:	f89e 4000 	ldrb.w	r4, [lr]
 800eb64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb68:	2c58      	cmp	r4, #88	; 0x58
 800eb6a:	d14d      	bne.n	800ec08 <_strtol_l.isra.0+0xf0>
 800eb6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eb70:	2310      	movs	r3, #16
 800eb72:	f10e 0e02 	add.w	lr, lr, #2
 800eb76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800eb7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eb7e:	2600      	movs	r6, #0
 800eb80:	fbbc f9f3 	udiv	r9, ip, r3
 800eb84:	4635      	mov	r5, r6
 800eb86:	fb03 ca19 	mls	sl, r3, r9, ip
 800eb8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800eb8e:	2f09      	cmp	r7, #9
 800eb90:	d818      	bhi.n	800ebc4 <_strtol_l.isra.0+0xac>
 800eb92:	463c      	mov	r4, r7
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	dd24      	ble.n	800ebe2 <_strtol_l.isra.0+0xca>
 800eb98:	2e00      	cmp	r6, #0
 800eb9a:	db1f      	blt.n	800ebdc <_strtol_l.isra.0+0xc4>
 800eb9c:	45a9      	cmp	r9, r5
 800eb9e:	d31d      	bcc.n	800ebdc <_strtol_l.isra.0+0xc4>
 800eba0:	d101      	bne.n	800eba6 <_strtol_l.isra.0+0x8e>
 800eba2:	45a2      	cmp	sl, r4
 800eba4:	db1a      	blt.n	800ebdc <_strtol_l.isra.0+0xc4>
 800eba6:	fb05 4503 	mla	r5, r5, r3, r4
 800ebaa:	2601      	movs	r6, #1
 800ebac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ebb0:	e7eb      	b.n	800eb8a <_strtol_l.isra.0+0x72>
 800ebb2:	2c2b      	cmp	r4, #43	; 0x2b
 800ebb4:	bf08      	it	eq
 800ebb6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ebba:	46a8      	mov	r8, r5
 800ebbc:	bf08      	it	eq
 800ebbe:	f106 0e02 	addeq.w	lr, r6, #2
 800ebc2:	e7c7      	b.n	800eb54 <_strtol_l.isra.0+0x3c>
 800ebc4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ebc8:	2f19      	cmp	r7, #25
 800ebca:	d801      	bhi.n	800ebd0 <_strtol_l.isra.0+0xb8>
 800ebcc:	3c37      	subs	r4, #55	; 0x37
 800ebce:	e7e1      	b.n	800eb94 <_strtol_l.isra.0+0x7c>
 800ebd0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ebd4:	2f19      	cmp	r7, #25
 800ebd6:	d804      	bhi.n	800ebe2 <_strtol_l.isra.0+0xca>
 800ebd8:	3c57      	subs	r4, #87	; 0x57
 800ebda:	e7db      	b.n	800eb94 <_strtol_l.isra.0+0x7c>
 800ebdc:	f04f 36ff 	mov.w	r6, #4294967295
 800ebe0:	e7e4      	b.n	800ebac <_strtol_l.isra.0+0x94>
 800ebe2:	2e00      	cmp	r6, #0
 800ebe4:	da05      	bge.n	800ebf2 <_strtol_l.isra.0+0xda>
 800ebe6:	2322      	movs	r3, #34	; 0x22
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	4665      	mov	r5, ip
 800ebec:	b942      	cbnz	r2, 800ec00 <_strtol_l.isra.0+0xe8>
 800ebee:	4628      	mov	r0, r5
 800ebf0:	e79d      	b.n	800eb2e <_strtol_l.isra.0+0x16>
 800ebf2:	f1b8 0f00 	cmp.w	r8, #0
 800ebf6:	d000      	beq.n	800ebfa <_strtol_l.isra.0+0xe2>
 800ebf8:	426d      	negs	r5, r5
 800ebfa:	2a00      	cmp	r2, #0
 800ebfc:	d0f7      	beq.n	800ebee <_strtol_l.isra.0+0xd6>
 800ebfe:	b10e      	cbz	r6, 800ec04 <_strtol_l.isra.0+0xec>
 800ec00:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ec04:	6011      	str	r1, [r2, #0]
 800ec06:	e7f2      	b.n	800ebee <_strtol_l.isra.0+0xd6>
 800ec08:	2430      	movs	r4, #48	; 0x30
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1b3      	bne.n	800eb76 <_strtol_l.isra.0+0x5e>
 800ec0e:	2308      	movs	r3, #8
 800ec10:	e7b1      	b.n	800eb76 <_strtol_l.isra.0+0x5e>
 800ec12:	2c30      	cmp	r4, #48	; 0x30
 800ec14:	d0a4      	beq.n	800eb60 <_strtol_l.isra.0+0x48>
 800ec16:	230a      	movs	r3, #10
 800ec18:	e7ad      	b.n	800eb76 <_strtol_l.isra.0+0x5e>
 800ec1a:	bf00      	nop
 800ec1c:	08011e69 	.word	0x08011e69

0800ec20 <_strtol_r>:
 800ec20:	f7ff bf7a 	b.w	800eb18 <_strtol_l.isra.0>

0800ec24 <quorem>:
 800ec24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	6903      	ldr	r3, [r0, #16]
 800ec2a:	690c      	ldr	r4, [r1, #16]
 800ec2c:	42a3      	cmp	r3, r4
 800ec2e:	4607      	mov	r7, r0
 800ec30:	f2c0 8081 	blt.w	800ed36 <quorem+0x112>
 800ec34:	3c01      	subs	r4, #1
 800ec36:	f101 0814 	add.w	r8, r1, #20
 800ec3a:	f100 0514 	add.w	r5, r0, #20
 800ec3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec42:	9301      	str	r3, [sp, #4]
 800ec44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ec54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec58:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec5c:	d331      	bcc.n	800ecc2 <quorem+0x9e>
 800ec5e:	f04f 0e00 	mov.w	lr, #0
 800ec62:	4640      	mov	r0, r8
 800ec64:	46ac      	mov	ip, r5
 800ec66:	46f2      	mov	sl, lr
 800ec68:	f850 2b04 	ldr.w	r2, [r0], #4
 800ec6c:	b293      	uxth	r3, r2
 800ec6e:	fb06 e303 	mla	r3, r6, r3, lr
 800ec72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	ebaa 0303 	sub.w	r3, sl, r3
 800ec7c:	0c12      	lsrs	r2, r2, #16
 800ec7e:	f8dc a000 	ldr.w	sl, [ip]
 800ec82:	fb06 e202 	mla	r2, r6, r2, lr
 800ec86:	fa13 f38a 	uxtah	r3, r3, sl
 800ec8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ec8e:	fa1f fa82 	uxth.w	sl, r2
 800ec92:	f8dc 2000 	ldr.w	r2, [ip]
 800ec96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ec9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eca4:	4581      	cmp	r9, r0
 800eca6:	f84c 3b04 	str.w	r3, [ip], #4
 800ecaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ecae:	d2db      	bcs.n	800ec68 <quorem+0x44>
 800ecb0:	f855 300b 	ldr.w	r3, [r5, fp]
 800ecb4:	b92b      	cbnz	r3, 800ecc2 <quorem+0x9e>
 800ecb6:	9b01      	ldr	r3, [sp, #4]
 800ecb8:	3b04      	subs	r3, #4
 800ecba:	429d      	cmp	r5, r3
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	d32e      	bcc.n	800ed1e <quorem+0xfa>
 800ecc0:	613c      	str	r4, [r7, #16]
 800ecc2:	4638      	mov	r0, r7
 800ecc4:	f001 fc8c 	bl	80105e0 <__mcmp>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	db24      	blt.n	800ed16 <quorem+0xf2>
 800eccc:	3601      	adds	r6, #1
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f04f 0c00 	mov.w	ip, #0
 800ecd4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ecd8:	f8d0 e000 	ldr.w	lr, [r0]
 800ecdc:	b293      	uxth	r3, r2
 800ecde:	ebac 0303 	sub.w	r3, ip, r3
 800ece2:	0c12      	lsrs	r2, r2, #16
 800ece4:	fa13 f38e 	uxtah	r3, r3, lr
 800ece8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ecec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecf6:	45c1      	cmp	r9, r8
 800ecf8:	f840 3b04 	str.w	r3, [r0], #4
 800ecfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ed00:	d2e8      	bcs.n	800ecd4 <quorem+0xb0>
 800ed02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed0a:	b922      	cbnz	r2, 800ed16 <quorem+0xf2>
 800ed0c:	3b04      	subs	r3, #4
 800ed0e:	429d      	cmp	r5, r3
 800ed10:	461a      	mov	r2, r3
 800ed12:	d30a      	bcc.n	800ed2a <quorem+0x106>
 800ed14:	613c      	str	r4, [r7, #16]
 800ed16:	4630      	mov	r0, r6
 800ed18:	b003      	add	sp, #12
 800ed1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1e:	6812      	ldr	r2, [r2, #0]
 800ed20:	3b04      	subs	r3, #4
 800ed22:	2a00      	cmp	r2, #0
 800ed24:	d1cc      	bne.n	800ecc0 <quorem+0x9c>
 800ed26:	3c01      	subs	r4, #1
 800ed28:	e7c7      	b.n	800ecba <quorem+0x96>
 800ed2a:	6812      	ldr	r2, [r2, #0]
 800ed2c:	3b04      	subs	r3, #4
 800ed2e:	2a00      	cmp	r2, #0
 800ed30:	d1f0      	bne.n	800ed14 <quorem+0xf0>
 800ed32:	3c01      	subs	r4, #1
 800ed34:	e7eb      	b.n	800ed0e <quorem+0xea>
 800ed36:	2000      	movs	r0, #0
 800ed38:	e7ee      	b.n	800ed18 <quorem+0xf4>
 800ed3a:	0000      	movs	r0, r0
 800ed3c:	0000      	movs	r0, r0
	...

0800ed40 <_dtoa_r>:
 800ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	ed2d 8b02 	vpush	{d8}
 800ed48:	ec57 6b10 	vmov	r6, r7, d0
 800ed4c:	b095      	sub	sp, #84	; 0x54
 800ed4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ed50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ed54:	9105      	str	r1, [sp, #20]
 800ed56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed60:	b975      	cbnz	r5, 800ed80 <_dtoa_r+0x40>
 800ed62:	2010      	movs	r0, #16
 800ed64:	f001 f94c 	bl	8010000 <malloc>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	6260      	str	r0, [r4, #36]	; 0x24
 800ed6c:	b920      	cbnz	r0, 800ed78 <_dtoa_r+0x38>
 800ed6e:	4bb2      	ldr	r3, [pc, #712]	; (800f038 <_dtoa_r+0x2f8>)
 800ed70:	21ea      	movs	r1, #234	; 0xea
 800ed72:	48b2      	ldr	r0, [pc, #712]	; (800f03c <_dtoa_r+0x2fc>)
 800ed74:	f002 f874 	bl	8010e60 <__assert_func>
 800ed78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ed7c:	6005      	str	r5, [r0, #0]
 800ed7e:	60c5      	str	r5, [r0, #12]
 800ed80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed82:	6819      	ldr	r1, [r3, #0]
 800ed84:	b151      	cbz	r1, 800ed9c <_dtoa_r+0x5c>
 800ed86:	685a      	ldr	r2, [r3, #4]
 800ed88:	604a      	str	r2, [r1, #4]
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	4093      	lsls	r3, r2
 800ed8e:	608b      	str	r3, [r1, #8]
 800ed90:	4620      	mov	r0, r4
 800ed92:	f001 f99d 	bl	80100d0 <_Bfree>
 800ed96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed98:	2200      	movs	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	1e3b      	subs	r3, r7, #0
 800ed9e:	bfb9      	ittee	lt
 800eda0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eda4:	9303      	strlt	r3, [sp, #12]
 800eda6:	2300      	movge	r3, #0
 800eda8:	f8c8 3000 	strge.w	r3, [r8]
 800edac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800edb0:	4ba3      	ldr	r3, [pc, #652]	; (800f040 <_dtoa_r+0x300>)
 800edb2:	bfbc      	itt	lt
 800edb4:	2201      	movlt	r2, #1
 800edb6:	f8c8 2000 	strlt.w	r2, [r8]
 800edba:	ea33 0309 	bics.w	r3, r3, r9
 800edbe:	d11b      	bne.n	800edf8 <_dtoa_r+0xb8>
 800edc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edc2:	f242 730f 	movw	r3, #9999	; 0x270f
 800edc6:	6013      	str	r3, [r2, #0]
 800edc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edcc:	4333      	orrs	r3, r6
 800edce:	f000 857a 	beq.w	800f8c6 <_dtoa_r+0xb86>
 800edd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edd4:	b963      	cbnz	r3, 800edf0 <_dtoa_r+0xb0>
 800edd6:	4b9b      	ldr	r3, [pc, #620]	; (800f044 <_dtoa_r+0x304>)
 800edd8:	e024      	b.n	800ee24 <_dtoa_r+0xe4>
 800edda:	4b9b      	ldr	r3, [pc, #620]	; (800f048 <_dtoa_r+0x308>)
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	3308      	adds	r3, #8
 800ede0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ede2:	6013      	str	r3, [r2, #0]
 800ede4:	9800      	ldr	r0, [sp, #0]
 800ede6:	b015      	add	sp, #84	; 0x54
 800ede8:	ecbd 8b02 	vpop	{d8}
 800edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf0:	4b94      	ldr	r3, [pc, #592]	; (800f044 <_dtoa_r+0x304>)
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	3303      	adds	r3, #3
 800edf6:	e7f3      	b.n	800ede0 <_dtoa_r+0xa0>
 800edf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800edfc:	2200      	movs	r2, #0
 800edfe:	ec51 0b17 	vmov	r0, r1, d7
 800ee02:	2300      	movs	r3, #0
 800ee04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee08:	f7f1 fe7e 	bl	8000b08 <__aeabi_dcmpeq>
 800ee0c:	4680      	mov	r8, r0
 800ee0e:	b158      	cbz	r0, 800ee28 <_dtoa_r+0xe8>
 800ee10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee12:	2301      	movs	r3, #1
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	f000 8551 	beq.w	800f8c0 <_dtoa_r+0xb80>
 800ee1e:	488b      	ldr	r0, [pc, #556]	; (800f04c <_dtoa_r+0x30c>)
 800ee20:	6018      	str	r0, [r3, #0]
 800ee22:	1e43      	subs	r3, r0, #1
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	e7dd      	b.n	800ede4 <_dtoa_r+0xa4>
 800ee28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ee2c:	aa12      	add	r2, sp, #72	; 0x48
 800ee2e:	a913      	add	r1, sp, #76	; 0x4c
 800ee30:	4620      	mov	r0, r4
 800ee32:	f001 fcf5 	bl	8010820 <__d2b>
 800ee36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee3a:	4683      	mov	fp, r0
 800ee3c:	2d00      	cmp	r5, #0
 800ee3e:	d07c      	beq.n	800ef3a <_dtoa_r+0x1fa>
 800ee40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ee46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ee4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ee52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ee56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ee5a:	4b7d      	ldr	r3, [pc, #500]	; (800f050 <_dtoa_r+0x310>)
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4630      	mov	r0, r6
 800ee60:	4639      	mov	r1, r7
 800ee62:	f7f1 fa31 	bl	80002c8 <__aeabi_dsub>
 800ee66:	a36e      	add	r3, pc, #440	; (adr r3, 800f020 <_dtoa_r+0x2e0>)
 800ee68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6c:	f7f1 fbe4 	bl	8000638 <__aeabi_dmul>
 800ee70:	a36d      	add	r3, pc, #436	; (adr r3, 800f028 <_dtoa_r+0x2e8>)
 800ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee76:	f7f1 fa29 	bl	80002cc <__adddf3>
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	460f      	mov	r7, r1
 800ee80:	f7f1 fb70 	bl	8000564 <__aeabi_i2d>
 800ee84:	a36a      	add	r3, pc, #424	; (adr r3, 800f030 <_dtoa_r+0x2f0>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	f7f1 fbd5 	bl	8000638 <__aeabi_dmul>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	4630      	mov	r0, r6
 800ee94:	4639      	mov	r1, r7
 800ee96:	f7f1 fa19 	bl	80002cc <__adddf3>
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	460f      	mov	r7, r1
 800ee9e:	f7f1 fe7b 	bl	8000b98 <__aeabi_d2iz>
 800eea2:	2200      	movs	r2, #0
 800eea4:	4682      	mov	sl, r0
 800eea6:	2300      	movs	r3, #0
 800eea8:	4630      	mov	r0, r6
 800eeaa:	4639      	mov	r1, r7
 800eeac:	f7f1 fe36 	bl	8000b1c <__aeabi_dcmplt>
 800eeb0:	b148      	cbz	r0, 800eec6 <_dtoa_r+0x186>
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	f7f1 fb56 	bl	8000564 <__aeabi_i2d>
 800eeb8:	4632      	mov	r2, r6
 800eeba:	463b      	mov	r3, r7
 800eebc:	f7f1 fe24 	bl	8000b08 <__aeabi_dcmpeq>
 800eec0:	b908      	cbnz	r0, 800eec6 <_dtoa_r+0x186>
 800eec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eec6:	f1ba 0f16 	cmp.w	sl, #22
 800eeca:	d854      	bhi.n	800ef76 <_dtoa_r+0x236>
 800eecc:	4b61      	ldr	r3, [pc, #388]	; (800f054 <_dtoa_r+0x314>)
 800eece:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eeda:	f7f1 fe1f 	bl	8000b1c <__aeabi_dcmplt>
 800eede:	2800      	cmp	r0, #0
 800eee0:	d04b      	beq.n	800ef7a <_dtoa_r+0x23a>
 800eee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eee6:	2300      	movs	r3, #0
 800eee8:	930e      	str	r3, [sp, #56]	; 0x38
 800eeea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eeec:	1b5d      	subs	r5, r3, r5
 800eeee:	1e6b      	subs	r3, r5, #1
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	bf43      	ittte	mi
 800eef4:	2300      	movmi	r3, #0
 800eef6:	f1c5 0801 	rsbmi	r8, r5, #1
 800eefa:	9304      	strmi	r3, [sp, #16]
 800eefc:	f04f 0800 	movpl.w	r8, #0
 800ef00:	f1ba 0f00 	cmp.w	sl, #0
 800ef04:	db3b      	blt.n	800ef7e <_dtoa_r+0x23e>
 800ef06:	9b04      	ldr	r3, [sp, #16]
 800ef08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ef0c:	4453      	add	r3, sl
 800ef0e:	9304      	str	r3, [sp, #16]
 800ef10:	2300      	movs	r3, #0
 800ef12:	9306      	str	r3, [sp, #24]
 800ef14:	9b05      	ldr	r3, [sp, #20]
 800ef16:	2b09      	cmp	r3, #9
 800ef18:	d869      	bhi.n	800efee <_dtoa_r+0x2ae>
 800ef1a:	2b05      	cmp	r3, #5
 800ef1c:	bfc4      	itt	gt
 800ef1e:	3b04      	subgt	r3, #4
 800ef20:	9305      	strgt	r3, [sp, #20]
 800ef22:	9b05      	ldr	r3, [sp, #20]
 800ef24:	f1a3 0302 	sub.w	r3, r3, #2
 800ef28:	bfcc      	ite	gt
 800ef2a:	2500      	movgt	r5, #0
 800ef2c:	2501      	movle	r5, #1
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	d869      	bhi.n	800f006 <_dtoa_r+0x2c6>
 800ef32:	e8df f003 	tbb	[pc, r3]
 800ef36:	4e2c      	.short	0x4e2c
 800ef38:	5a4c      	.short	0x5a4c
 800ef3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ef3e:	441d      	add	r5, r3
 800ef40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ef44:	2b20      	cmp	r3, #32
 800ef46:	bfc1      	itttt	gt
 800ef48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ef4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ef50:	fa09 f303 	lslgt.w	r3, r9, r3
 800ef54:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ef58:	bfda      	itte	le
 800ef5a:	f1c3 0320 	rsble	r3, r3, #32
 800ef5e:	fa06 f003 	lslle.w	r0, r6, r3
 800ef62:	4318      	orrgt	r0, r3
 800ef64:	f7f1 faee 	bl	8000544 <__aeabi_ui2d>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ef70:	3d01      	subs	r5, #1
 800ef72:	9310      	str	r3, [sp, #64]	; 0x40
 800ef74:	e771      	b.n	800ee5a <_dtoa_r+0x11a>
 800ef76:	2301      	movs	r3, #1
 800ef78:	e7b6      	b.n	800eee8 <_dtoa_r+0x1a8>
 800ef7a:	900e      	str	r0, [sp, #56]	; 0x38
 800ef7c:	e7b5      	b.n	800eeea <_dtoa_r+0x1aa>
 800ef7e:	f1ca 0300 	rsb	r3, sl, #0
 800ef82:	9306      	str	r3, [sp, #24]
 800ef84:	2300      	movs	r3, #0
 800ef86:	eba8 080a 	sub.w	r8, r8, sl
 800ef8a:	930d      	str	r3, [sp, #52]	; 0x34
 800ef8c:	e7c2      	b.n	800ef14 <_dtoa_r+0x1d4>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	9308      	str	r3, [sp, #32]
 800ef92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	dc39      	bgt.n	800f00c <_dtoa_r+0x2cc>
 800ef98:	f04f 0901 	mov.w	r9, #1
 800ef9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800efa0:	464b      	mov	r3, r9
 800efa2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800efa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800efa8:	2200      	movs	r2, #0
 800efaa:	6042      	str	r2, [r0, #4]
 800efac:	2204      	movs	r2, #4
 800efae:	f102 0614 	add.w	r6, r2, #20
 800efb2:	429e      	cmp	r6, r3
 800efb4:	6841      	ldr	r1, [r0, #4]
 800efb6:	d92f      	bls.n	800f018 <_dtoa_r+0x2d8>
 800efb8:	4620      	mov	r0, r4
 800efba:	f001 f849 	bl	8010050 <_Balloc>
 800efbe:	9000      	str	r0, [sp, #0]
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d14b      	bne.n	800f05c <_dtoa_r+0x31c>
 800efc4:	4b24      	ldr	r3, [pc, #144]	; (800f058 <_dtoa_r+0x318>)
 800efc6:	4602      	mov	r2, r0
 800efc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800efcc:	e6d1      	b.n	800ed72 <_dtoa_r+0x32>
 800efce:	2301      	movs	r3, #1
 800efd0:	e7de      	b.n	800ef90 <_dtoa_r+0x250>
 800efd2:	2300      	movs	r3, #0
 800efd4:	9308      	str	r3, [sp, #32]
 800efd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd8:	eb0a 0903 	add.w	r9, sl, r3
 800efdc:	f109 0301 	add.w	r3, r9, #1
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	bfb8      	it	lt
 800efe6:	2301      	movlt	r3, #1
 800efe8:	e7dd      	b.n	800efa6 <_dtoa_r+0x266>
 800efea:	2301      	movs	r3, #1
 800efec:	e7f2      	b.n	800efd4 <_dtoa_r+0x294>
 800efee:	2501      	movs	r5, #1
 800eff0:	2300      	movs	r3, #0
 800eff2:	9305      	str	r3, [sp, #20]
 800eff4:	9508      	str	r5, [sp, #32]
 800eff6:	f04f 39ff 	mov.w	r9, #4294967295
 800effa:	2200      	movs	r2, #0
 800effc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f000:	2312      	movs	r3, #18
 800f002:	9209      	str	r2, [sp, #36]	; 0x24
 800f004:	e7cf      	b.n	800efa6 <_dtoa_r+0x266>
 800f006:	2301      	movs	r3, #1
 800f008:	9308      	str	r3, [sp, #32]
 800f00a:	e7f4      	b.n	800eff6 <_dtoa_r+0x2b6>
 800f00c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f010:	f8cd 9004 	str.w	r9, [sp, #4]
 800f014:	464b      	mov	r3, r9
 800f016:	e7c6      	b.n	800efa6 <_dtoa_r+0x266>
 800f018:	3101      	adds	r1, #1
 800f01a:	6041      	str	r1, [r0, #4]
 800f01c:	0052      	lsls	r2, r2, #1
 800f01e:	e7c6      	b.n	800efae <_dtoa_r+0x26e>
 800f020:	636f4361 	.word	0x636f4361
 800f024:	3fd287a7 	.word	0x3fd287a7
 800f028:	8b60c8b3 	.word	0x8b60c8b3
 800f02c:	3fc68a28 	.word	0x3fc68a28
 800f030:	509f79fb 	.word	0x509f79fb
 800f034:	3fd34413 	.word	0x3fd34413
 800f038:	08011f76 	.word	0x08011f76
 800f03c:	08011f8d 	.word	0x08011f8d
 800f040:	7ff00000 	.word	0x7ff00000
 800f044:	08011f72 	.word	0x08011f72
 800f048:	08011f69 	.word	0x08011f69
 800f04c:	08011ded 	.word	0x08011ded
 800f050:	3ff80000 	.word	0x3ff80000
 800f054:	08012108 	.word	0x08012108
 800f058:	08011fec 	.word	0x08011fec
 800f05c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f05e:	9a00      	ldr	r2, [sp, #0]
 800f060:	601a      	str	r2, [r3, #0]
 800f062:	9b01      	ldr	r3, [sp, #4]
 800f064:	2b0e      	cmp	r3, #14
 800f066:	f200 80ad 	bhi.w	800f1c4 <_dtoa_r+0x484>
 800f06a:	2d00      	cmp	r5, #0
 800f06c:	f000 80aa 	beq.w	800f1c4 <_dtoa_r+0x484>
 800f070:	f1ba 0f00 	cmp.w	sl, #0
 800f074:	dd36      	ble.n	800f0e4 <_dtoa_r+0x3a4>
 800f076:	4ac3      	ldr	r2, [pc, #780]	; (800f384 <_dtoa_r+0x644>)
 800f078:	f00a 030f 	and.w	r3, sl, #15
 800f07c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f080:	ed93 7b00 	vldr	d7, [r3]
 800f084:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f088:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f08c:	eeb0 8a47 	vmov.f32	s16, s14
 800f090:	eef0 8a67 	vmov.f32	s17, s15
 800f094:	d016      	beq.n	800f0c4 <_dtoa_r+0x384>
 800f096:	4bbc      	ldr	r3, [pc, #752]	; (800f388 <_dtoa_r+0x648>)
 800f098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f09c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0a0:	f7f1 fbf4 	bl	800088c <__aeabi_ddiv>
 800f0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0a8:	f007 070f 	and.w	r7, r7, #15
 800f0ac:	2503      	movs	r5, #3
 800f0ae:	4eb6      	ldr	r6, [pc, #728]	; (800f388 <_dtoa_r+0x648>)
 800f0b0:	b957      	cbnz	r7, 800f0c8 <_dtoa_r+0x388>
 800f0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0b6:	ec53 2b18 	vmov	r2, r3, d8
 800f0ba:	f7f1 fbe7 	bl	800088c <__aeabi_ddiv>
 800f0be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0c2:	e029      	b.n	800f118 <_dtoa_r+0x3d8>
 800f0c4:	2502      	movs	r5, #2
 800f0c6:	e7f2      	b.n	800f0ae <_dtoa_r+0x36e>
 800f0c8:	07f9      	lsls	r1, r7, #31
 800f0ca:	d508      	bpl.n	800f0de <_dtoa_r+0x39e>
 800f0cc:	ec51 0b18 	vmov	r0, r1, d8
 800f0d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f0d4:	f7f1 fab0 	bl	8000638 <__aeabi_dmul>
 800f0d8:	ec41 0b18 	vmov	d8, r0, r1
 800f0dc:	3501      	adds	r5, #1
 800f0de:	107f      	asrs	r7, r7, #1
 800f0e0:	3608      	adds	r6, #8
 800f0e2:	e7e5      	b.n	800f0b0 <_dtoa_r+0x370>
 800f0e4:	f000 80a6 	beq.w	800f234 <_dtoa_r+0x4f4>
 800f0e8:	f1ca 0600 	rsb	r6, sl, #0
 800f0ec:	4ba5      	ldr	r3, [pc, #660]	; (800f384 <_dtoa_r+0x644>)
 800f0ee:	4fa6      	ldr	r7, [pc, #664]	; (800f388 <_dtoa_r+0x648>)
 800f0f0:	f006 020f 	and.w	r2, r6, #15
 800f0f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f100:	f7f1 fa9a 	bl	8000638 <__aeabi_dmul>
 800f104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f108:	1136      	asrs	r6, r6, #4
 800f10a:	2300      	movs	r3, #0
 800f10c:	2502      	movs	r5, #2
 800f10e:	2e00      	cmp	r6, #0
 800f110:	f040 8085 	bne.w	800f21e <_dtoa_r+0x4de>
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1d2      	bne.n	800f0be <_dtoa_r+0x37e>
 800f118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f000 808c 	beq.w	800f238 <_dtoa_r+0x4f8>
 800f120:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f124:	4b99      	ldr	r3, [pc, #612]	; (800f38c <_dtoa_r+0x64c>)
 800f126:	2200      	movs	r2, #0
 800f128:	4630      	mov	r0, r6
 800f12a:	4639      	mov	r1, r7
 800f12c:	f7f1 fcf6 	bl	8000b1c <__aeabi_dcmplt>
 800f130:	2800      	cmp	r0, #0
 800f132:	f000 8081 	beq.w	800f238 <_dtoa_r+0x4f8>
 800f136:	9b01      	ldr	r3, [sp, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d07d      	beq.n	800f238 <_dtoa_r+0x4f8>
 800f13c:	f1b9 0f00 	cmp.w	r9, #0
 800f140:	dd3c      	ble.n	800f1bc <_dtoa_r+0x47c>
 800f142:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f146:	9307      	str	r3, [sp, #28]
 800f148:	2200      	movs	r2, #0
 800f14a:	4b91      	ldr	r3, [pc, #580]	; (800f390 <_dtoa_r+0x650>)
 800f14c:	4630      	mov	r0, r6
 800f14e:	4639      	mov	r1, r7
 800f150:	f7f1 fa72 	bl	8000638 <__aeabi_dmul>
 800f154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f158:	3501      	adds	r5, #1
 800f15a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f15e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f162:	4628      	mov	r0, r5
 800f164:	f7f1 f9fe 	bl	8000564 <__aeabi_i2d>
 800f168:	4632      	mov	r2, r6
 800f16a:	463b      	mov	r3, r7
 800f16c:	f7f1 fa64 	bl	8000638 <__aeabi_dmul>
 800f170:	4b88      	ldr	r3, [pc, #544]	; (800f394 <_dtoa_r+0x654>)
 800f172:	2200      	movs	r2, #0
 800f174:	f7f1 f8aa 	bl	80002cc <__adddf3>
 800f178:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f17c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f180:	9303      	str	r3, [sp, #12]
 800f182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f184:	2b00      	cmp	r3, #0
 800f186:	d15c      	bne.n	800f242 <_dtoa_r+0x502>
 800f188:	4b83      	ldr	r3, [pc, #524]	; (800f398 <_dtoa_r+0x658>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	4630      	mov	r0, r6
 800f18e:	4639      	mov	r1, r7
 800f190:	f7f1 f89a 	bl	80002c8 <__aeabi_dsub>
 800f194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f198:	4606      	mov	r6, r0
 800f19a:	460f      	mov	r7, r1
 800f19c:	f7f1 fcdc 	bl	8000b58 <__aeabi_dcmpgt>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	f040 8296 	bne.w	800f6d2 <_dtoa_r+0x992>
 800f1a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	f7f1 fcb3 	bl	8000b1c <__aeabi_dcmplt>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	f040 8288 	bne.w	800f6cc <_dtoa_r+0x98c>
 800f1bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f1c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f1c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f2c0 8158 	blt.w	800f47c <_dtoa_r+0x73c>
 800f1cc:	f1ba 0f0e 	cmp.w	sl, #14
 800f1d0:	f300 8154 	bgt.w	800f47c <_dtoa_r+0x73c>
 800f1d4:	4b6b      	ldr	r3, [pc, #428]	; (800f384 <_dtoa_r+0x644>)
 800f1d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f1da:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f280 80e3 	bge.w	800f3ac <_dtoa_r+0x66c>
 800f1e6:	9b01      	ldr	r3, [sp, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f300 80df 	bgt.w	800f3ac <_dtoa_r+0x66c>
 800f1ee:	f040 826d 	bne.w	800f6cc <_dtoa_r+0x98c>
 800f1f2:	4b69      	ldr	r3, [pc, #420]	; (800f398 <_dtoa_r+0x658>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4640      	mov	r0, r8
 800f1f8:	4649      	mov	r1, r9
 800f1fa:	f7f1 fa1d 	bl	8000638 <__aeabi_dmul>
 800f1fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f202:	f7f1 fc9f 	bl	8000b44 <__aeabi_dcmpge>
 800f206:	9e01      	ldr	r6, [sp, #4]
 800f208:	4637      	mov	r7, r6
 800f20a:	2800      	cmp	r0, #0
 800f20c:	f040 8243 	bne.w	800f696 <_dtoa_r+0x956>
 800f210:	9d00      	ldr	r5, [sp, #0]
 800f212:	2331      	movs	r3, #49	; 0x31
 800f214:	f805 3b01 	strb.w	r3, [r5], #1
 800f218:	f10a 0a01 	add.w	sl, sl, #1
 800f21c:	e23f      	b.n	800f69e <_dtoa_r+0x95e>
 800f21e:	07f2      	lsls	r2, r6, #31
 800f220:	d505      	bpl.n	800f22e <_dtoa_r+0x4ee>
 800f222:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f226:	f7f1 fa07 	bl	8000638 <__aeabi_dmul>
 800f22a:	3501      	adds	r5, #1
 800f22c:	2301      	movs	r3, #1
 800f22e:	1076      	asrs	r6, r6, #1
 800f230:	3708      	adds	r7, #8
 800f232:	e76c      	b.n	800f10e <_dtoa_r+0x3ce>
 800f234:	2502      	movs	r5, #2
 800f236:	e76f      	b.n	800f118 <_dtoa_r+0x3d8>
 800f238:	9b01      	ldr	r3, [sp, #4]
 800f23a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f23e:	930c      	str	r3, [sp, #48]	; 0x30
 800f240:	e78d      	b.n	800f15e <_dtoa_r+0x41e>
 800f242:	9900      	ldr	r1, [sp, #0]
 800f244:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f248:	4b4e      	ldr	r3, [pc, #312]	; (800f384 <_dtoa_r+0x644>)
 800f24a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f24e:	4401      	add	r1, r0
 800f250:	9102      	str	r1, [sp, #8]
 800f252:	9908      	ldr	r1, [sp, #32]
 800f254:	eeb0 8a47 	vmov.f32	s16, s14
 800f258:	eef0 8a67 	vmov.f32	s17, s15
 800f25c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f260:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f264:	2900      	cmp	r1, #0
 800f266:	d045      	beq.n	800f2f4 <_dtoa_r+0x5b4>
 800f268:	494c      	ldr	r1, [pc, #304]	; (800f39c <_dtoa_r+0x65c>)
 800f26a:	2000      	movs	r0, #0
 800f26c:	f7f1 fb0e 	bl	800088c <__aeabi_ddiv>
 800f270:	ec53 2b18 	vmov	r2, r3, d8
 800f274:	f7f1 f828 	bl	80002c8 <__aeabi_dsub>
 800f278:	9d00      	ldr	r5, [sp, #0]
 800f27a:	ec41 0b18 	vmov	d8, r0, r1
 800f27e:	4639      	mov	r1, r7
 800f280:	4630      	mov	r0, r6
 800f282:	f7f1 fc89 	bl	8000b98 <__aeabi_d2iz>
 800f286:	900c      	str	r0, [sp, #48]	; 0x30
 800f288:	f7f1 f96c 	bl	8000564 <__aeabi_i2d>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	4630      	mov	r0, r6
 800f292:	4639      	mov	r1, r7
 800f294:	f7f1 f818 	bl	80002c8 <__aeabi_dsub>
 800f298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f29a:	3330      	adds	r3, #48	; 0x30
 800f29c:	f805 3b01 	strb.w	r3, [r5], #1
 800f2a0:	ec53 2b18 	vmov	r2, r3, d8
 800f2a4:	4606      	mov	r6, r0
 800f2a6:	460f      	mov	r7, r1
 800f2a8:	f7f1 fc38 	bl	8000b1c <__aeabi_dcmplt>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d165      	bne.n	800f37c <_dtoa_r+0x63c>
 800f2b0:	4632      	mov	r2, r6
 800f2b2:	463b      	mov	r3, r7
 800f2b4:	4935      	ldr	r1, [pc, #212]	; (800f38c <_dtoa_r+0x64c>)
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	f7f1 f806 	bl	80002c8 <__aeabi_dsub>
 800f2bc:	ec53 2b18 	vmov	r2, r3, d8
 800f2c0:	f7f1 fc2c 	bl	8000b1c <__aeabi_dcmplt>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	f040 80b9 	bne.w	800f43c <_dtoa_r+0x6fc>
 800f2ca:	9b02      	ldr	r3, [sp, #8]
 800f2cc:	429d      	cmp	r5, r3
 800f2ce:	f43f af75 	beq.w	800f1bc <_dtoa_r+0x47c>
 800f2d2:	4b2f      	ldr	r3, [pc, #188]	; (800f390 <_dtoa_r+0x650>)
 800f2d4:	ec51 0b18 	vmov	r0, r1, d8
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f7f1 f9ad 	bl	8000638 <__aeabi_dmul>
 800f2de:	4b2c      	ldr	r3, [pc, #176]	; (800f390 <_dtoa_r+0x650>)
 800f2e0:	ec41 0b18 	vmov	d8, r0, r1
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	4639      	mov	r1, r7
 800f2ea:	f7f1 f9a5 	bl	8000638 <__aeabi_dmul>
 800f2ee:	4606      	mov	r6, r0
 800f2f0:	460f      	mov	r7, r1
 800f2f2:	e7c4      	b.n	800f27e <_dtoa_r+0x53e>
 800f2f4:	ec51 0b17 	vmov	r0, r1, d7
 800f2f8:	f7f1 f99e 	bl	8000638 <__aeabi_dmul>
 800f2fc:	9b02      	ldr	r3, [sp, #8]
 800f2fe:	9d00      	ldr	r5, [sp, #0]
 800f300:	930c      	str	r3, [sp, #48]	; 0x30
 800f302:	ec41 0b18 	vmov	d8, r0, r1
 800f306:	4639      	mov	r1, r7
 800f308:	4630      	mov	r0, r6
 800f30a:	f7f1 fc45 	bl	8000b98 <__aeabi_d2iz>
 800f30e:	9011      	str	r0, [sp, #68]	; 0x44
 800f310:	f7f1 f928 	bl	8000564 <__aeabi_i2d>
 800f314:	4602      	mov	r2, r0
 800f316:	460b      	mov	r3, r1
 800f318:	4630      	mov	r0, r6
 800f31a:	4639      	mov	r1, r7
 800f31c:	f7f0 ffd4 	bl	80002c8 <__aeabi_dsub>
 800f320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f322:	3330      	adds	r3, #48	; 0x30
 800f324:	f805 3b01 	strb.w	r3, [r5], #1
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	429d      	cmp	r5, r3
 800f32c:	4606      	mov	r6, r0
 800f32e:	460f      	mov	r7, r1
 800f330:	f04f 0200 	mov.w	r2, #0
 800f334:	d134      	bne.n	800f3a0 <_dtoa_r+0x660>
 800f336:	4b19      	ldr	r3, [pc, #100]	; (800f39c <_dtoa_r+0x65c>)
 800f338:	ec51 0b18 	vmov	r0, r1, d8
 800f33c:	f7f0 ffc6 	bl	80002cc <__adddf3>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	4630      	mov	r0, r6
 800f346:	4639      	mov	r1, r7
 800f348:	f7f1 fc06 	bl	8000b58 <__aeabi_dcmpgt>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d175      	bne.n	800f43c <_dtoa_r+0x6fc>
 800f350:	ec53 2b18 	vmov	r2, r3, d8
 800f354:	4911      	ldr	r1, [pc, #68]	; (800f39c <_dtoa_r+0x65c>)
 800f356:	2000      	movs	r0, #0
 800f358:	f7f0 ffb6 	bl	80002c8 <__aeabi_dsub>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	4630      	mov	r0, r6
 800f362:	4639      	mov	r1, r7
 800f364:	f7f1 fbda 	bl	8000b1c <__aeabi_dcmplt>
 800f368:	2800      	cmp	r0, #0
 800f36a:	f43f af27 	beq.w	800f1bc <_dtoa_r+0x47c>
 800f36e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f370:	1e6b      	subs	r3, r5, #1
 800f372:	930c      	str	r3, [sp, #48]	; 0x30
 800f374:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f378:	2b30      	cmp	r3, #48	; 0x30
 800f37a:	d0f8      	beq.n	800f36e <_dtoa_r+0x62e>
 800f37c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f380:	e04a      	b.n	800f418 <_dtoa_r+0x6d8>
 800f382:	bf00      	nop
 800f384:	08012108 	.word	0x08012108
 800f388:	080120e0 	.word	0x080120e0
 800f38c:	3ff00000 	.word	0x3ff00000
 800f390:	40240000 	.word	0x40240000
 800f394:	401c0000 	.word	0x401c0000
 800f398:	40140000 	.word	0x40140000
 800f39c:	3fe00000 	.word	0x3fe00000
 800f3a0:	4baf      	ldr	r3, [pc, #700]	; (800f660 <_dtoa_r+0x920>)
 800f3a2:	f7f1 f949 	bl	8000638 <__aeabi_dmul>
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	460f      	mov	r7, r1
 800f3aa:	e7ac      	b.n	800f306 <_dtoa_r+0x5c6>
 800f3ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f3b0:	9d00      	ldr	r5, [sp, #0]
 800f3b2:	4642      	mov	r2, r8
 800f3b4:	464b      	mov	r3, r9
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	4639      	mov	r1, r7
 800f3ba:	f7f1 fa67 	bl	800088c <__aeabi_ddiv>
 800f3be:	f7f1 fbeb 	bl	8000b98 <__aeabi_d2iz>
 800f3c2:	9002      	str	r0, [sp, #8]
 800f3c4:	f7f1 f8ce 	bl	8000564 <__aeabi_i2d>
 800f3c8:	4642      	mov	r2, r8
 800f3ca:	464b      	mov	r3, r9
 800f3cc:	f7f1 f934 	bl	8000638 <__aeabi_dmul>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	4639      	mov	r1, r7
 800f3d8:	f7f0 ff76 	bl	80002c8 <__aeabi_dsub>
 800f3dc:	9e02      	ldr	r6, [sp, #8]
 800f3de:	9f01      	ldr	r7, [sp, #4]
 800f3e0:	3630      	adds	r6, #48	; 0x30
 800f3e2:	f805 6b01 	strb.w	r6, [r5], #1
 800f3e6:	9e00      	ldr	r6, [sp, #0]
 800f3e8:	1bae      	subs	r6, r5, r6
 800f3ea:	42b7      	cmp	r7, r6
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	d137      	bne.n	800f462 <_dtoa_r+0x722>
 800f3f2:	f7f0 ff6b 	bl	80002cc <__adddf3>
 800f3f6:	4642      	mov	r2, r8
 800f3f8:	464b      	mov	r3, r9
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	460f      	mov	r7, r1
 800f3fe:	f7f1 fbab 	bl	8000b58 <__aeabi_dcmpgt>
 800f402:	b9c8      	cbnz	r0, 800f438 <_dtoa_r+0x6f8>
 800f404:	4642      	mov	r2, r8
 800f406:	464b      	mov	r3, r9
 800f408:	4630      	mov	r0, r6
 800f40a:	4639      	mov	r1, r7
 800f40c:	f7f1 fb7c 	bl	8000b08 <__aeabi_dcmpeq>
 800f410:	b110      	cbz	r0, 800f418 <_dtoa_r+0x6d8>
 800f412:	9b02      	ldr	r3, [sp, #8]
 800f414:	07d9      	lsls	r1, r3, #31
 800f416:	d40f      	bmi.n	800f438 <_dtoa_r+0x6f8>
 800f418:	4620      	mov	r0, r4
 800f41a:	4659      	mov	r1, fp
 800f41c:	f000 fe58 	bl	80100d0 <_Bfree>
 800f420:	2300      	movs	r3, #0
 800f422:	702b      	strb	r3, [r5, #0]
 800f424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f426:	f10a 0001 	add.w	r0, sl, #1
 800f42a:	6018      	str	r0, [r3, #0]
 800f42c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f43f acd8 	beq.w	800ede4 <_dtoa_r+0xa4>
 800f434:	601d      	str	r5, [r3, #0]
 800f436:	e4d5      	b.n	800ede4 <_dtoa_r+0xa4>
 800f438:	f8cd a01c 	str.w	sl, [sp, #28]
 800f43c:	462b      	mov	r3, r5
 800f43e:	461d      	mov	r5, r3
 800f440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f444:	2a39      	cmp	r2, #57	; 0x39
 800f446:	d108      	bne.n	800f45a <_dtoa_r+0x71a>
 800f448:	9a00      	ldr	r2, [sp, #0]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d1f7      	bne.n	800f43e <_dtoa_r+0x6fe>
 800f44e:	9a07      	ldr	r2, [sp, #28]
 800f450:	9900      	ldr	r1, [sp, #0]
 800f452:	3201      	adds	r2, #1
 800f454:	9207      	str	r2, [sp, #28]
 800f456:	2230      	movs	r2, #48	; 0x30
 800f458:	700a      	strb	r2, [r1, #0]
 800f45a:	781a      	ldrb	r2, [r3, #0]
 800f45c:	3201      	adds	r2, #1
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	e78c      	b.n	800f37c <_dtoa_r+0x63c>
 800f462:	4b7f      	ldr	r3, [pc, #508]	; (800f660 <_dtoa_r+0x920>)
 800f464:	2200      	movs	r2, #0
 800f466:	f7f1 f8e7 	bl	8000638 <__aeabi_dmul>
 800f46a:	2200      	movs	r2, #0
 800f46c:	2300      	movs	r3, #0
 800f46e:	4606      	mov	r6, r0
 800f470:	460f      	mov	r7, r1
 800f472:	f7f1 fb49 	bl	8000b08 <__aeabi_dcmpeq>
 800f476:	2800      	cmp	r0, #0
 800f478:	d09b      	beq.n	800f3b2 <_dtoa_r+0x672>
 800f47a:	e7cd      	b.n	800f418 <_dtoa_r+0x6d8>
 800f47c:	9a08      	ldr	r2, [sp, #32]
 800f47e:	2a00      	cmp	r2, #0
 800f480:	f000 80c4 	beq.w	800f60c <_dtoa_r+0x8cc>
 800f484:	9a05      	ldr	r2, [sp, #20]
 800f486:	2a01      	cmp	r2, #1
 800f488:	f300 80a8 	bgt.w	800f5dc <_dtoa_r+0x89c>
 800f48c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f48e:	2a00      	cmp	r2, #0
 800f490:	f000 80a0 	beq.w	800f5d4 <_dtoa_r+0x894>
 800f494:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f498:	9e06      	ldr	r6, [sp, #24]
 800f49a:	4645      	mov	r5, r8
 800f49c:	9a04      	ldr	r2, [sp, #16]
 800f49e:	2101      	movs	r1, #1
 800f4a0:	441a      	add	r2, r3
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	4498      	add	r8, r3
 800f4a6:	9204      	str	r2, [sp, #16]
 800f4a8:	f000 ff18 	bl	80102dc <__i2b>
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	2d00      	cmp	r5, #0
 800f4b0:	dd0b      	ble.n	800f4ca <_dtoa_r+0x78a>
 800f4b2:	9b04      	ldr	r3, [sp, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dd08      	ble.n	800f4ca <_dtoa_r+0x78a>
 800f4b8:	42ab      	cmp	r3, r5
 800f4ba:	9a04      	ldr	r2, [sp, #16]
 800f4bc:	bfa8      	it	ge
 800f4be:	462b      	movge	r3, r5
 800f4c0:	eba8 0803 	sub.w	r8, r8, r3
 800f4c4:	1aed      	subs	r5, r5, r3
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	9304      	str	r3, [sp, #16]
 800f4ca:	9b06      	ldr	r3, [sp, #24]
 800f4cc:	b1fb      	cbz	r3, 800f50e <_dtoa_r+0x7ce>
 800f4ce:	9b08      	ldr	r3, [sp, #32]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f000 809f 	beq.w	800f614 <_dtoa_r+0x8d4>
 800f4d6:	2e00      	cmp	r6, #0
 800f4d8:	dd11      	ble.n	800f4fe <_dtoa_r+0x7be>
 800f4da:	4639      	mov	r1, r7
 800f4dc:	4632      	mov	r2, r6
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f000 ffb8 	bl	8010454 <__pow5mult>
 800f4e4:	465a      	mov	r2, fp
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	4607      	mov	r7, r0
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 ff0c 	bl	8010308 <__multiply>
 800f4f0:	4659      	mov	r1, fp
 800f4f2:	9007      	str	r0, [sp, #28]
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 fdeb 	bl	80100d0 <_Bfree>
 800f4fa:	9b07      	ldr	r3, [sp, #28]
 800f4fc:	469b      	mov	fp, r3
 800f4fe:	9b06      	ldr	r3, [sp, #24]
 800f500:	1b9a      	subs	r2, r3, r6
 800f502:	d004      	beq.n	800f50e <_dtoa_r+0x7ce>
 800f504:	4659      	mov	r1, fp
 800f506:	4620      	mov	r0, r4
 800f508:	f000 ffa4 	bl	8010454 <__pow5mult>
 800f50c:	4683      	mov	fp, r0
 800f50e:	2101      	movs	r1, #1
 800f510:	4620      	mov	r0, r4
 800f512:	f000 fee3 	bl	80102dc <__i2b>
 800f516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f518:	2b00      	cmp	r3, #0
 800f51a:	4606      	mov	r6, r0
 800f51c:	dd7c      	ble.n	800f618 <_dtoa_r+0x8d8>
 800f51e:	461a      	mov	r2, r3
 800f520:	4601      	mov	r1, r0
 800f522:	4620      	mov	r0, r4
 800f524:	f000 ff96 	bl	8010454 <__pow5mult>
 800f528:	9b05      	ldr	r3, [sp, #20]
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	4606      	mov	r6, r0
 800f52e:	dd76      	ble.n	800f61e <_dtoa_r+0x8de>
 800f530:	2300      	movs	r3, #0
 800f532:	9306      	str	r3, [sp, #24]
 800f534:	6933      	ldr	r3, [r6, #16]
 800f536:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f53a:	6918      	ldr	r0, [r3, #16]
 800f53c:	f000 fe7e 	bl	801023c <__hi0bits>
 800f540:	f1c0 0020 	rsb	r0, r0, #32
 800f544:	9b04      	ldr	r3, [sp, #16]
 800f546:	4418      	add	r0, r3
 800f548:	f010 001f 	ands.w	r0, r0, #31
 800f54c:	f000 8086 	beq.w	800f65c <_dtoa_r+0x91c>
 800f550:	f1c0 0320 	rsb	r3, r0, #32
 800f554:	2b04      	cmp	r3, #4
 800f556:	dd7f      	ble.n	800f658 <_dtoa_r+0x918>
 800f558:	f1c0 001c 	rsb	r0, r0, #28
 800f55c:	9b04      	ldr	r3, [sp, #16]
 800f55e:	4403      	add	r3, r0
 800f560:	4480      	add	r8, r0
 800f562:	4405      	add	r5, r0
 800f564:	9304      	str	r3, [sp, #16]
 800f566:	f1b8 0f00 	cmp.w	r8, #0
 800f56a:	dd05      	ble.n	800f578 <_dtoa_r+0x838>
 800f56c:	4659      	mov	r1, fp
 800f56e:	4642      	mov	r2, r8
 800f570:	4620      	mov	r0, r4
 800f572:	f000 ffc9 	bl	8010508 <__lshift>
 800f576:	4683      	mov	fp, r0
 800f578:	9b04      	ldr	r3, [sp, #16]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	dd05      	ble.n	800f58a <_dtoa_r+0x84a>
 800f57e:	4631      	mov	r1, r6
 800f580:	461a      	mov	r2, r3
 800f582:	4620      	mov	r0, r4
 800f584:	f000 ffc0 	bl	8010508 <__lshift>
 800f588:	4606      	mov	r6, r0
 800f58a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d069      	beq.n	800f664 <_dtoa_r+0x924>
 800f590:	4631      	mov	r1, r6
 800f592:	4658      	mov	r0, fp
 800f594:	f001 f824 	bl	80105e0 <__mcmp>
 800f598:	2800      	cmp	r0, #0
 800f59a:	da63      	bge.n	800f664 <_dtoa_r+0x924>
 800f59c:	2300      	movs	r3, #0
 800f59e:	4659      	mov	r1, fp
 800f5a0:	220a      	movs	r2, #10
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f000 fdb6 	bl	8010114 <__multadd>
 800f5a8:	9b08      	ldr	r3, [sp, #32]
 800f5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5ae:	4683      	mov	fp, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f000 818f 	beq.w	800f8d4 <_dtoa_r+0xb94>
 800f5b6:	4639      	mov	r1, r7
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	220a      	movs	r2, #10
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f000 fda9 	bl	8010114 <__multadd>
 800f5c2:	f1b9 0f00 	cmp.w	r9, #0
 800f5c6:	4607      	mov	r7, r0
 800f5c8:	f300 808e 	bgt.w	800f6e8 <_dtoa_r+0x9a8>
 800f5cc:	9b05      	ldr	r3, [sp, #20]
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	dc50      	bgt.n	800f674 <_dtoa_r+0x934>
 800f5d2:	e089      	b.n	800f6e8 <_dtoa_r+0x9a8>
 800f5d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f5da:	e75d      	b.n	800f498 <_dtoa_r+0x758>
 800f5dc:	9b01      	ldr	r3, [sp, #4]
 800f5de:	1e5e      	subs	r6, r3, #1
 800f5e0:	9b06      	ldr	r3, [sp, #24]
 800f5e2:	42b3      	cmp	r3, r6
 800f5e4:	bfbf      	itttt	lt
 800f5e6:	9b06      	ldrlt	r3, [sp, #24]
 800f5e8:	9606      	strlt	r6, [sp, #24]
 800f5ea:	1af2      	sublt	r2, r6, r3
 800f5ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f5ee:	bfb6      	itet	lt
 800f5f0:	189b      	addlt	r3, r3, r2
 800f5f2:	1b9e      	subge	r6, r3, r6
 800f5f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	bfb8      	it	lt
 800f5fa:	2600      	movlt	r6, #0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	bfb5      	itete	lt
 800f600:	eba8 0503 	sublt.w	r5, r8, r3
 800f604:	9b01      	ldrge	r3, [sp, #4]
 800f606:	2300      	movlt	r3, #0
 800f608:	4645      	movge	r5, r8
 800f60a:	e747      	b.n	800f49c <_dtoa_r+0x75c>
 800f60c:	9e06      	ldr	r6, [sp, #24]
 800f60e:	9f08      	ldr	r7, [sp, #32]
 800f610:	4645      	mov	r5, r8
 800f612:	e74c      	b.n	800f4ae <_dtoa_r+0x76e>
 800f614:	9a06      	ldr	r2, [sp, #24]
 800f616:	e775      	b.n	800f504 <_dtoa_r+0x7c4>
 800f618:	9b05      	ldr	r3, [sp, #20]
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	dc18      	bgt.n	800f650 <_dtoa_r+0x910>
 800f61e:	9b02      	ldr	r3, [sp, #8]
 800f620:	b9b3      	cbnz	r3, 800f650 <_dtoa_r+0x910>
 800f622:	9b03      	ldr	r3, [sp, #12]
 800f624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f628:	b9a3      	cbnz	r3, 800f654 <_dtoa_r+0x914>
 800f62a:	9b03      	ldr	r3, [sp, #12]
 800f62c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f630:	0d1b      	lsrs	r3, r3, #20
 800f632:	051b      	lsls	r3, r3, #20
 800f634:	b12b      	cbz	r3, 800f642 <_dtoa_r+0x902>
 800f636:	9b04      	ldr	r3, [sp, #16]
 800f638:	3301      	adds	r3, #1
 800f63a:	9304      	str	r3, [sp, #16]
 800f63c:	f108 0801 	add.w	r8, r8, #1
 800f640:	2301      	movs	r3, #1
 800f642:	9306      	str	r3, [sp, #24]
 800f644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f646:	2b00      	cmp	r3, #0
 800f648:	f47f af74 	bne.w	800f534 <_dtoa_r+0x7f4>
 800f64c:	2001      	movs	r0, #1
 800f64e:	e779      	b.n	800f544 <_dtoa_r+0x804>
 800f650:	2300      	movs	r3, #0
 800f652:	e7f6      	b.n	800f642 <_dtoa_r+0x902>
 800f654:	9b02      	ldr	r3, [sp, #8]
 800f656:	e7f4      	b.n	800f642 <_dtoa_r+0x902>
 800f658:	d085      	beq.n	800f566 <_dtoa_r+0x826>
 800f65a:	4618      	mov	r0, r3
 800f65c:	301c      	adds	r0, #28
 800f65e:	e77d      	b.n	800f55c <_dtoa_r+0x81c>
 800f660:	40240000 	.word	0x40240000
 800f664:	9b01      	ldr	r3, [sp, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	dc38      	bgt.n	800f6dc <_dtoa_r+0x99c>
 800f66a:	9b05      	ldr	r3, [sp, #20]
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	dd35      	ble.n	800f6dc <_dtoa_r+0x99c>
 800f670:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f674:	f1b9 0f00 	cmp.w	r9, #0
 800f678:	d10d      	bne.n	800f696 <_dtoa_r+0x956>
 800f67a:	4631      	mov	r1, r6
 800f67c:	464b      	mov	r3, r9
 800f67e:	2205      	movs	r2, #5
 800f680:	4620      	mov	r0, r4
 800f682:	f000 fd47 	bl	8010114 <__multadd>
 800f686:	4601      	mov	r1, r0
 800f688:	4606      	mov	r6, r0
 800f68a:	4658      	mov	r0, fp
 800f68c:	f000 ffa8 	bl	80105e0 <__mcmp>
 800f690:	2800      	cmp	r0, #0
 800f692:	f73f adbd 	bgt.w	800f210 <_dtoa_r+0x4d0>
 800f696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f698:	9d00      	ldr	r5, [sp, #0]
 800f69a:	ea6f 0a03 	mvn.w	sl, r3
 800f69e:	f04f 0800 	mov.w	r8, #0
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f000 fd13 	bl	80100d0 <_Bfree>
 800f6aa:	2f00      	cmp	r7, #0
 800f6ac:	f43f aeb4 	beq.w	800f418 <_dtoa_r+0x6d8>
 800f6b0:	f1b8 0f00 	cmp.w	r8, #0
 800f6b4:	d005      	beq.n	800f6c2 <_dtoa_r+0x982>
 800f6b6:	45b8      	cmp	r8, r7
 800f6b8:	d003      	beq.n	800f6c2 <_dtoa_r+0x982>
 800f6ba:	4641      	mov	r1, r8
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f000 fd07 	bl	80100d0 <_Bfree>
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f000 fd03 	bl	80100d0 <_Bfree>
 800f6ca:	e6a5      	b.n	800f418 <_dtoa_r+0x6d8>
 800f6cc:	2600      	movs	r6, #0
 800f6ce:	4637      	mov	r7, r6
 800f6d0:	e7e1      	b.n	800f696 <_dtoa_r+0x956>
 800f6d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f6d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f6d8:	4637      	mov	r7, r6
 800f6da:	e599      	b.n	800f210 <_dtoa_r+0x4d0>
 800f6dc:	9b08      	ldr	r3, [sp, #32]
 800f6de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f000 80fd 	beq.w	800f8e2 <_dtoa_r+0xba2>
 800f6e8:	2d00      	cmp	r5, #0
 800f6ea:	dd05      	ble.n	800f6f8 <_dtoa_r+0x9b8>
 800f6ec:	4639      	mov	r1, r7
 800f6ee:	462a      	mov	r2, r5
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f000 ff09 	bl	8010508 <__lshift>
 800f6f6:	4607      	mov	r7, r0
 800f6f8:	9b06      	ldr	r3, [sp, #24]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d05c      	beq.n	800f7b8 <_dtoa_r+0xa78>
 800f6fe:	6879      	ldr	r1, [r7, #4]
 800f700:	4620      	mov	r0, r4
 800f702:	f000 fca5 	bl	8010050 <_Balloc>
 800f706:	4605      	mov	r5, r0
 800f708:	b928      	cbnz	r0, 800f716 <_dtoa_r+0x9d6>
 800f70a:	4b80      	ldr	r3, [pc, #512]	; (800f90c <_dtoa_r+0xbcc>)
 800f70c:	4602      	mov	r2, r0
 800f70e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f712:	f7ff bb2e 	b.w	800ed72 <_dtoa_r+0x32>
 800f716:	693a      	ldr	r2, [r7, #16]
 800f718:	3202      	adds	r2, #2
 800f71a:	0092      	lsls	r2, r2, #2
 800f71c:	f107 010c 	add.w	r1, r7, #12
 800f720:	300c      	adds	r0, #12
 800f722:	f000 fc87 	bl	8010034 <memcpy>
 800f726:	2201      	movs	r2, #1
 800f728:	4629      	mov	r1, r5
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 feec 	bl	8010508 <__lshift>
 800f730:	9b00      	ldr	r3, [sp, #0]
 800f732:	3301      	adds	r3, #1
 800f734:	9301      	str	r3, [sp, #4]
 800f736:	9b00      	ldr	r3, [sp, #0]
 800f738:	444b      	add	r3, r9
 800f73a:	9307      	str	r3, [sp, #28]
 800f73c:	9b02      	ldr	r3, [sp, #8]
 800f73e:	f003 0301 	and.w	r3, r3, #1
 800f742:	46b8      	mov	r8, r7
 800f744:	9306      	str	r3, [sp, #24]
 800f746:	4607      	mov	r7, r0
 800f748:	9b01      	ldr	r3, [sp, #4]
 800f74a:	4631      	mov	r1, r6
 800f74c:	3b01      	subs	r3, #1
 800f74e:	4658      	mov	r0, fp
 800f750:	9302      	str	r3, [sp, #8]
 800f752:	f7ff fa67 	bl	800ec24 <quorem>
 800f756:	4603      	mov	r3, r0
 800f758:	3330      	adds	r3, #48	; 0x30
 800f75a:	9004      	str	r0, [sp, #16]
 800f75c:	4641      	mov	r1, r8
 800f75e:	4658      	mov	r0, fp
 800f760:	9308      	str	r3, [sp, #32]
 800f762:	f000 ff3d 	bl	80105e0 <__mcmp>
 800f766:	463a      	mov	r2, r7
 800f768:	4681      	mov	r9, r0
 800f76a:	4631      	mov	r1, r6
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 ff53 	bl	8010618 <__mdiff>
 800f772:	68c2      	ldr	r2, [r0, #12]
 800f774:	9b08      	ldr	r3, [sp, #32]
 800f776:	4605      	mov	r5, r0
 800f778:	bb02      	cbnz	r2, 800f7bc <_dtoa_r+0xa7c>
 800f77a:	4601      	mov	r1, r0
 800f77c:	4658      	mov	r0, fp
 800f77e:	f000 ff2f 	bl	80105e0 <__mcmp>
 800f782:	9b08      	ldr	r3, [sp, #32]
 800f784:	4602      	mov	r2, r0
 800f786:	4629      	mov	r1, r5
 800f788:	4620      	mov	r0, r4
 800f78a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f78e:	f000 fc9f 	bl	80100d0 <_Bfree>
 800f792:	9b05      	ldr	r3, [sp, #20]
 800f794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f796:	9d01      	ldr	r5, [sp, #4]
 800f798:	ea43 0102 	orr.w	r1, r3, r2
 800f79c:	9b06      	ldr	r3, [sp, #24]
 800f79e:	430b      	orrs	r3, r1
 800f7a0:	9b08      	ldr	r3, [sp, #32]
 800f7a2:	d10d      	bne.n	800f7c0 <_dtoa_r+0xa80>
 800f7a4:	2b39      	cmp	r3, #57	; 0x39
 800f7a6:	d029      	beq.n	800f7fc <_dtoa_r+0xabc>
 800f7a8:	f1b9 0f00 	cmp.w	r9, #0
 800f7ac:	dd01      	ble.n	800f7b2 <_dtoa_r+0xa72>
 800f7ae:	9b04      	ldr	r3, [sp, #16]
 800f7b0:	3331      	adds	r3, #49	; 0x31
 800f7b2:	9a02      	ldr	r2, [sp, #8]
 800f7b4:	7013      	strb	r3, [r2, #0]
 800f7b6:	e774      	b.n	800f6a2 <_dtoa_r+0x962>
 800f7b8:	4638      	mov	r0, r7
 800f7ba:	e7b9      	b.n	800f730 <_dtoa_r+0x9f0>
 800f7bc:	2201      	movs	r2, #1
 800f7be:	e7e2      	b.n	800f786 <_dtoa_r+0xa46>
 800f7c0:	f1b9 0f00 	cmp.w	r9, #0
 800f7c4:	db06      	blt.n	800f7d4 <_dtoa_r+0xa94>
 800f7c6:	9905      	ldr	r1, [sp, #20]
 800f7c8:	ea41 0909 	orr.w	r9, r1, r9
 800f7cc:	9906      	ldr	r1, [sp, #24]
 800f7ce:	ea59 0101 	orrs.w	r1, r9, r1
 800f7d2:	d120      	bne.n	800f816 <_dtoa_r+0xad6>
 800f7d4:	2a00      	cmp	r2, #0
 800f7d6:	ddec      	ble.n	800f7b2 <_dtoa_r+0xa72>
 800f7d8:	4659      	mov	r1, fp
 800f7da:	2201      	movs	r2, #1
 800f7dc:	4620      	mov	r0, r4
 800f7de:	9301      	str	r3, [sp, #4]
 800f7e0:	f000 fe92 	bl	8010508 <__lshift>
 800f7e4:	4631      	mov	r1, r6
 800f7e6:	4683      	mov	fp, r0
 800f7e8:	f000 fefa 	bl	80105e0 <__mcmp>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	9b01      	ldr	r3, [sp, #4]
 800f7f0:	dc02      	bgt.n	800f7f8 <_dtoa_r+0xab8>
 800f7f2:	d1de      	bne.n	800f7b2 <_dtoa_r+0xa72>
 800f7f4:	07da      	lsls	r2, r3, #31
 800f7f6:	d5dc      	bpl.n	800f7b2 <_dtoa_r+0xa72>
 800f7f8:	2b39      	cmp	r3, #57	; 0x39
 800f7fa:	d1d8      	bne.n	800f7ae <_dtoa_r+0xa6e>
 800f7fc:	9a02      	ldr	r2, [sp, #8]
 800f7fe:	2339      	movs	r3, #57	; 0x39
 800f800:	7013      	strb	r3, [r2, #0]
 800f802:	462b      	mov	r3, r5
 800f804:	461d      	mov	r5, r3
 800f806:	3b01      	subs	r3, #1
 800f808:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f80c:	2a39      	cmp	r2, #57	; 0x39
 800f80e:	d050      	beq.n	800f8b2 <_dtoa_r+0xb72>
 800f810:	3201      	adds	r2, #1
 800f812:	701a      	strb	r2, [r3, #0]
 800f814:	e745      	b.n	800f6a2 <_dtoa_r+0x962>
 800f816:	2a00      	cmp	r2, #0
 800f818:	dd03      	ble.n	800f822 <_dtoa_r+0xae2>
 800f81a:	2b39      	cmp	r3, #57	; 0x39
 800f81c:	d0ee      	beq.n	800f7fc <_dtoa_r+0xabc>
 800f81e:	3301      	adds	r3, #1
 800f820:	e7c7      	b.n	800f7b2 <_dtoa_r+0xa72>
 800f822:	9a01      	ldr	r2, [sp, #4]
 800f824:	9907      	ldr	r1, [sp, #28]
 800f826:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f82a:	428a      	cmp	r2, r1
 800f82c:	d02a      	beq.n	800f884 <_dtoa_r+0xb44>
 800f82e:	4659      	mov	r1, fp
 800f830:	2300      	movs	r3, #0
 800f832:	220a      	movs	r2, #10
 800f834:	4620      	mov	r0, r4
 800f836:	f000 fc6d 	bl	8010114 <__multadd>
 800f83a:	45b8      	cmp	r8, r7
 800f83c:	4683      	mov	fp, r0
 800f83e:	f04f 0300 	mov.w	r3, #0
 800f842:	f04f 020a 	mov.w	r2, #10
 800f846:	4641      	mov	r1, r8
 800f848:	4620      	mov	r0, r4
 800f84a:	d107      	bne.n	800f85c <_dtoa_r+0xb1c>
 800f84c:	f000 fc62 	bl	8010114 <__multadd>
 800f850:	4680      	mov	r8, r0
 800f852:	4607      	mov	r7, r0
 800f854:	9b01      	ldr	r3, [sp, #4]
 800f856:	3301      	adds	r3, #1
 800f858:	9301      	str	r3, [sp, #4]
 800f85a:	e775      	b.n	800f748 <_dtoa_r+0xa08>
 800f85c:	f000 fc5a 	bl	8010114 <__multadd>
 800f860:	4639      	mov	r1, r7
 800f862:	4680      	mov	r8, r0
 800f864:	2300      	movs	r3, #0
 800f866:	220a      	movs	r2, #10
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 fc53 	bl	8010114 <__multadd>
 800f86e:	4607      	mov	r7, r0
 800f870:	e7f0      	b.n	800f854 <_dtoa_r+0xb14>
 800f872:	f1b9 0f00 	cmp.w	r9, #0
 800f876:	9a00      	ldr	r2, [sp, #0]
 800f878:	bfcc      	ite	gt
 800f87a:	464d      	movgt	r5, r9
 800f87c:	2501      	movle	r5, #1
 800f87e:	4415      	add	r5, r2
 800f880:	f04f 0800 	mov.w	r8, #0
 800f884:	4659      	mov	r1, fp
 800f886:	2201      	movs	r2, #1
 800f888:	4620      	mov	r0, r4
 800f88a:	9301      	str	r3, [sp, #4]
 800f88c:	f000 fe3c 	bl	8010508 <__lshift>
 800f890:	4631      	mov	r1, r6
 800f892:	4683      	mov	fp, r0
 800f894:	f000 fea4 	bl	80105e0 <__mcmp>
 800f898:	2800      	cmp	r0, #0
 800f89a:	dcb2      	bgt.n	800f802 <_dtoa_r+0xac2>
 800f89c:	d102      	bne.n	800f8a4 <_dtoa_r+0xb64>
 800f89e:	9b01      	ldr	r3, [sp, #4]
 800f8a0:	07db      	lsls	r3, r3, #31
 800f8a2:	d4ae      	bmi.n	800f802 <_dtoa_r+0xac2>
 800f8a4:	462b      	mov	r3, r5
 800f8a6:	461d      	mov	r5, r3
 800f8a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8ac:	2a30      	cmp	r2, #48	; 0x30
 800f8ae:	d0fa      	beq.n	800f8a6 <_dtoa_r+0xb66>
 800f8b0:	e6f7      	b.n	800f6a2 <_dtoa_r+0x962>
 800f8b2:	9a00      	ldr	r2, [sp, #0]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d1a5      	bne.n	800f804 <_dtoa_r+0xac4>
 800f8b8:	f10a 0a01 	add.w	sl, sl, #1
 800f8bc:	2331      	movs	r3, #49	; 0x31
 800f8be:	e779      	b.n	800f7b4 <_dtoa_r+0xa74>
 800f8c0:	4b13      	ldr	r3, [pc, #76]	; (800f910 <_dtoa_r+0xbd0>)
 800f8c2:	f7ff baaf 	b.w	800ee24 <_dtoa_r+0xe4>
 800f8c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	f47f aa86 	bne.w	800edda <_dtoa_r+0x9a>
 800f8ce:	4b11      	ldr	r3, [pc, #68]	; (800f914 <_dtoa_r+0xbd4>)
 800f8d0:	f7ff baa8 	b.w	800ee24 <_dtoa_r+0xe4>
 800f8d4:	f1b9 0f00 	cmp.w	r9, #0
 800f8d8:	dc03      	bgt.n	800f8e2 <_dtoa_r+0xba2>
 800f8da:	9b05      	ldr	r3, [sp, #20]
 800f8dc:	2b02      	cmp	r3, #2
 800f8de:	f73f aec9 	bgt.w	800f674 <_dtoa_r+0x934>
 800f8e2:	9d00      	ldr	r5, [sp, #0]
 800f8e4:	4631      	mov	r1, r6
 800f8e6:	4658      	mov	r0, fp
 800f8e8:	f7ff f99c 	bl	800ec24 <quorem>
 800f8ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f8f0:	f805 3b01 	strb.w	r3, [r5], #1
 800f8f4:	9a00      	ldr	r2, [sp, #0]
 800f8f6:	1aaa      	subs	r2, r5, r2
 800f8f8:	4591      	cmp	r9, r2
 800f8fa:	ddba      	ble.n	800f872 <_dtoa_r+0xb32>
 800f8fc:	4659      	mov	r1, fp
 800f8fe:	2300      	movs	r3, #0
 800f900:	220a      	movs	r2, #10
 800f902:	4620      	mov	r0, r4
 800f904:	f000 fc06 	bl	8010114 <__multadd>
 800f908:	4683      	mov	fp, r0
 800f90a:	e7eb      	b.n	800f8e4 <_dtoa_r+0xba4>
 800f90c:	08011fec 	.word	0x08011fec
 800f910:	08011dec 	.word	0x08011dec
 800f914:	08011f69 	.word	0x08011f69

0800f918 <rshift>:
 800f918:	6903      	ldr	r3, [r0, #16]
 800f91a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f91e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f922:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f926:	f100 0414 	add.w	r4, r0, #20
 800f92a:	dd45      	ble.n	800f9b8 <rshift+0xa0>
 800f92c:	f011 011f 	ands.w	r1, r1, #31
 800f930:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f934:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f938:	d10c      	bne.n	800f954 <rshift+0x3c>
 800f93a:	f100 0710 	add.w	r7, r0, #16
 800f93e:	4629      	mov	r1, r5
 800f940:	42b1      	cmp	r1, r6
 800f942:	d334      	bcc.n	800f9ae <rshift+0x96>
 800f944:	1a9b      	subs	r3, r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	1eea      	subs	r2, r5, #3
 800f94a:	4296      	cmp	r6, r2
 800f94c:	bf38      	it	cc
 800f94e:	2300      	movcc	r3, #0
 800f950:	4423      	add	r3, r4
 800f952:	e015      	b.n	800f980 <rshift+0x68>
 800f954:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f958:	f1c1 0820 	rsb	r8, r1, #32
 800f95c:	40cf      	lsrs	r7, r1
 800f95e:	f105 0e04 	add.w	lr, r5, #4
 800f962:	46a1      	mov	r9, r4
 800f964:	4576      	cmp	r6, lr
 800f966:	46f4      	mov	ip, lr
 800f968:	d815      	bhi.n	800f996 <rshift+0x7e>
 800f96a:	1a9b      	subs	r3, r3, r2
 800f96c:	009a      	lsls	r2, r3, #2
 800f96e:	3a04      	subs	r2, #4
 800f970:	3501      	adds	r5, #1
 800f972:	42ae      	cmp	r6, r5
 800f974:	bf38      	it	cc
 800f976:	2200      	movcc	r2, #0
 800f978:	18a3      	adds	r3, r4, r2
 800f97a:	50a7      	str	r7, [r4, r2]
 800f97c:	b107      	cbz	r7, 800f980 <rshift+0x68>
 800f97e:	3304      	adds	r3, #4
 800f980:	1b1a      	subs	r2, r3, r4
 800f982:	42a3      	cmp	r3, r4
 800f984:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f988:	bf08      	it	eq
 800f98a:	2300      	moveq	r3, #0
 800f98c:	6102      	str	r2, [r0, #16]
 800f98e:	bf08      	it	eq
 800f990:	6143      	streq	r3, [r0, #20]
 800f992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f996:	f8dc c000 	ldr.w	ip, [ip]
 800f99a:	fa0c fc08 	lsl.w	ip, ip, r8
 800f99e:	ea4c 0707 	orr.w	r7, ip, r7
 800f9a2:	f849 7b04 	str.w	r7, [r9], #4
 800f9a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9aa:	40cf      	lsrs	r7, r1
 800f9ac:	e7da      	b.n	800f964 <rshift+0x4c>
 800f9ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800f9b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9b6:	e7c3      	b.n	800f940 <rshift+0x28>
 800f9b8:	4623      	mov	r3, r4
 800f9ba:	e7e1      	b.n	800f980 <rshift+0x68>

0800f9bc <__hexdig_fun>:
 800f9bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f9c0:	2b09      	cmp	r3, #9
 800f9c2:	d802      	bhi.n	800f9ca <__hexdig_fun+0xe>
 800f9c4:	3820      	subs	r0, #32
 800f9c6:	b2c0      	uxtb	r0, r0
 800f9c8:	4770      	bx	lr
 800f9ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f9ce:	2b05      	cmp	r3, #5
 800f9d0:	d801      	bhi.n	800f9d6 <__hexdig_fun+0x1a>
 800f9d2:	3847      	subs	r0, #71	; 0x47
 800f9d4:	e7f7      	b.n	800f9c6 <__hexdig_fun+0xa>
 800f9d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f9da:	2b05      	cmp	r3, #5
 800f9dc:	d801      	bhi.n	800f9e2 <__hexdig_fun+0x26>
 800f9de:	3827      	subs	r0, #39	; 0x27
 800f9e0:	e7f1      	b.n	800f9c6 <__hexdig_fun+0xa>
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	4770      	bx	lr
	...

0800f9e8 <__gethex>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	ed2d 8b02 	vpush	{d8}
 800f9f0:	b089      	sub	sp, #36	; 0x24
 800f9f2:	ee08 0a10 	vmov	s16, r0
 800f9f6:	9304      	str	r3, [sp, #16]
 800f9f8:	4bbc      	ldr	r3, [pc, #752]	; (800fcec <__gethex+0x304>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	9301      	str	r3, [sp, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	468b      	mov	fp, r1
 800fa02:	4690      	mov	r8, r2
 800fa04:	f7f0 fbfe 	bl	8000204 <strlen>
 800fa08:	9b01      	ldr	r3, [sp, #4]
 800fa0a:	f8db 2000 	ldr.w	r2, [fp]
 800fa0e:	4403      	add	r3, r0
 800fa10:	4682      	mov	sl, r0
 800fa12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fa16:	9305      	str	r3, [sp, #20]
 800fa18:	1c93      	adds	r3, r2, #2
 800fa1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fa1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fa22:	32fe      	adds	r2, #254	; 0xfe
 800fa24:	18d1      	adds	r1, r2, r3
 800fa26:	461f      	mov	r7, r3
 800fa28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa2c:	9100      	str	r1, [sp, #0]
 800fa2e:	2830      	cmp	r0, #48	; 0x30
 800fa30:	d0f8      	beq.n	800fa24 <__gethex+0x3c>
 800fa32:	f7ff ffc3 	bl	800f9bc <__hexdig_fun>
 800fa36:	4604      	mov	r4, r0
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d13a      	bne.n	800fab2 <__gethex+0xca>
 800fa3c:	9901      	ldr	r1, [sp, #4]
 800fa3e:	4652      	mov	r2, sl
 800fa40:	4638      	mov	r0, r7
 800fa42:	f001 f9ed 	bl	8010e20 <strncmp>
 800fa46:	4605      	mov	r5, r0
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	d168      	bne.n	800fb1e <__gethex+0x136>
 800fa4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fa50:	eb07 060a 	add.w	r6, r7, sl
 800fa54:	f7ff ffb2 	bl	800f9bc <__hexdig_fun>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d062      	beq.n	800fb22 <__gethex+0x13a>
 800fa5c:	4633      	mov	r3, r6
 800fa5e:	7818      	ldrb	r0, [r3, #0]
 800fa60:	2830      	cmp	r0, #48	; 0x30
 800fa62:	461f      	mov	r7, r3
 800fa64:	f103 0301 	add.w	r3, r3, #1
 800fa68:	d0f9      	beq.n	800fa5e <__gethex+0x76>
 800fa6a:	f7ff ffa7 	bl	800f9bc <__hexdig_fun>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	fab0 f480 	clz	r4, r0
 800fa74:	0964      	lsrs	r4, r4, #5
 800fa76:	4635      	mov	r5, r6
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	463a      	mov	r2, r7
 800fa7c:	4616      	mov	r6, r2
 800fa7e:	3201      	adds	r2, #1
 800fa80:	7830      	ldrb	r0, [r6, #0]
 800fa82:	f7ff ff9b 	bl	800f9bc <__hexdig_fun>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d1f8      	bne.n	800fa7c <__gethex+0x94>
 800fa8a:	9901      	ldr	r1, [sp, #4]
 800fa8c:	4652      	mov	r2, sl
 800fa8e:	4630      	mov	r0, r6
 800fa90:	f001 f9c6 	bl	8010e20 <strncmp>
 800fa94:	b980      	cbnz	r0, 800fab8 <__gethex+0xd0>
 800fa96:	b94d      	cbnz	r5, 800faac <__gethex+0xc4>
 800fa98:	eb06 050a 	add.w	r5, r6, sl
 800fa9c:	462a      	mov	r2, r5
 800fa9e:	4616      	mov	r6, r2
 800faa0:	3201      	adds	r2, #1
 800faa2:	7830      	ldrb	r0, [r6, #0]
 800faa4:	f7ff ff8a 	bl	800f9bc <__hexdig_fun>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d1f8      	bne.n	800fa9e <__gethex+0xb6>
 800faac:	1bad      	subs	r5, r5, r6
 800faae:	00ad      	lsls	r5, r5, #2
 800fab0:	e004      	b.n	800fabc <__gethex+0xd4>
 800fab2:	2400      	movs	r4, #0
 800fab4:	4625      	mov	r5, r4
 800fab6:	e7e0      	b.n	800fa7a <__gethex+0x92>
 800fab8:	2d00      	cmp	r5, #0
 800faba:	d1f7      	bne.n	800faac <__gethex+0xc4>
 800fabc:	7833      	ldrb	r3, [r6, #0]
 800fabe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fac2:	2b50      	cmp	r3, #80	; 0x50
 800fac4:	d13b      	bne.n	800fb3e <__gethex+0x156>
 800fac6:	7873      	ldrb	r3, [r6, #1]
 800fac8:	2b2b      	cmp	r3, #43	; 0x2b
 800faca:	d02c      	beq.n	800fb26 <__gethex+0x13e>
 800facc:	2b2d      	cmp	r3, #45	; 0x2d
 800face:	d02e      	beq.n	800fb2e <__gethex+0x146>
 800fad0:	1c71      	adds	r1, r6, #1
 800fad2:	f04f 0900 	mov.w	r9, #0
 800fad6:	7808      	ldrb	r0, [r1, #0]
 800fad8:	f7ff ff70 	bl	800f9bc <__hexdig_fun>
 800fadc:	1e43      	subs	r3, r0, #1
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b18      	cmp	r3, #24
 800fae2:	d82c      	bhi.n	800fb3e <__gethex+0x156>
 800fae4:	f1a0 0210 	sub.w	r2, r0, #16
 800fae8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800faec:	f7ff ff66 	bl	800f9bc <__hexdig_fun>
 800faf0:	1e43      	subs	r3, r0, #1
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b18      	cmp	r3, #24
 800faf6:	d91d      	bls.n	800fb34 <__gethex+0x14c>
 800faf8:	f1b9 0f00 	cmp.w	r9, #0
 800fafc:	d000      	beq.n	800fb00 <__gethex+0x118>
 800fafe:	4252      	negs	r2, r2
 800fb00:	4415      	add	r5, r2
 800fb02:	f8cb 1000 	str.w	r1, [fp]
 800fb06:	b1e4      	cbz	r4, 800fb42 <__gethex+0x15a>
 800fb08:	9b00      	ldr	r3, [sp, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	bf14      	ite	ne
 800fb0e:	2700      	movne	r7, #0
 800fb10:	2706      	moveq	r7, #6
 800fb12:	4638      	mov	r0, r7
 800fb14:	b009      	add	sp, #36	; 0x24
 800fb16:	ecbd 8b02 	vpop	{d8}
 800fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1e:	463e      	mov	r6, r7
 800fb20:	4625      	mov	r5, r4
 800fb22:	2401      	movs	r4, #1
 800fb24:	e7ca      	b.n	800fabc <__gethex+0xd4>
 800fb26:	f04f 0900 	mov.w	r9, #0
 800fb2a:	1cb1      	adds	r1, r6, #2
 800fb2c:	e7d3      	b.n	800fad6 <__gethex+0xee>
 800fb2e:	f04f 0901 	mov.w	r9, #1
 800fb32:	e7fa      	b.n	800fb2a <__gethex+0x142>
 800fb34:	230a      	movs	r3, #10
 800fb36:	fb03 0202 	mla	r2, r3, r2, r0
 800fb3a:	3a10      	subs	r2, #16
 800fb3c:	e7d4      	b.n	800fae8 <__gethex+0x100>
 800fb3e:	4631      	mov	r1, r6
 800fb40:	e7df      	b.n	800fb02 <__gethex+0x11a>
 800fb42:	1bf3      	subs	r3, r6, r7
 800fb44:	3b01      	subs	r3, #1
 800fb46:	4621      	mov	r1, r4
 800fb48:	2b07      	cmp	r3, #7
 800fb4a:	dc0b      	bgt.n	800fb64 <__gethex+0x17c>
 800fb4c:	ee18 0a10 	vmov	r0, s16
 800fb50:	f000 fa7e 	bl	8010050 <_Balloc>
 800fb54:	4604      	mov	r4, r0
 800fb56:	b940      	cbnz	r0, 800fb6a <__gethex+0x182>
 800fb58:	4b65      	ldr	r3, [pc, #404]	; (800fcf0 <__gethex+0x308>)
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	21de      	movs	r1, #222	; 0xde
 800fb5e:	4865      	ldr	r0, [pc, #404]	; (800fcf4 <__gethex+0x30c>)
 800fb60:	f001 f97e 	bl	8010e60 <__assert_func>
 800fb64:	3101      	adds	r1, #1
 800fb66:	105b      	asrs	r3, r3, #1
 800fb68:	e7ee      	b.n	800fb48 <__gethex+0x160>
 800fb6a:	f100 0914 	add.w	r9, r0, #20
 800fb6e:	f04f 0b00 	mov.w	fp, #0
 800fb72:	f1ca 0301 	rsb	r3, sl, #1
 800fb76:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb7a:	f8cd b000 	str.w	fp, [sp]
 800fb7e:	9306      	str	r3, [sp, #24]
 800fb80:	42b7      	cmp	r7, r6
 800fb82:	d340      	bcc.n	800fc06 <__gethex+0x21e>
 800fb84:	9802      	ldr	r0, [sp, #8]
 800fb86:	9b00      	ldr	r3, [sp, #0]
 800fb88:	f840 3b04 	str.w	r3, [r0], #4
 800fb8c:	eba0 0009 	sub.w	r0, r0, r9
 800fb90:	1080      	asrs	r0, r0, #2
 800fb92:	0146      	lsls	r6, r0, #5
 800fb94:	6120      	str	r0, [r4, #16]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f000 fb50 	bl	801023c <__hi0bits>
 800fb9c:	1a30      	subs	r0, r6, r0
 800fb9e:	f8d8 6000 	ldr.w	r6, [r8]
 800fba2:	42b0      	cmp	r0, r6
 800fba4:	dd63      	ble.n	800fc6e <__gethex+0x286>
 800fba6:	1b87      	subs	r7, r0, r6
 800fba8:	4639      	mov	r1, r7
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f000 feea 	bl	8010984 <__any_on>
 800fbb0:	4682      	mov	sl, r0
 800fbb2:	b1a8      	cbz	r0, 800fbe0 <__gethex+0x1f8>
 800fbb4:	1e7b      	subs	r3, r7, #1
 800fbb6:	1159      	asrs	r1, r3, #5
 800fbb8:	f003 021f 	and.w	r2, r3, #31
 800fbbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fbc0:	f04f 0a01 	mov.w	sl, #1
 800fbc4:	fa0a f202 	lsl.w	r2, sl, r2
 800fbc8:	420a      	tst	r2, r1
 800fbca:	d009      	beq.n	800fbe0 <__gethex+0x1f8>
 800fbcc:	4553      	cmp	r3, sl
 800fbce:	dd05      	ble.n	800fbdc <__gethex+0x1f4>
 800fbd0:	1eb9      	subs	r1, r7, #2
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f000 fed6 	bl	8010984 <__any_on>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d145      	bne.n	800fc68 <__gethex+0x280>
 800fbdc:	f04f 0a02 	mov.w	sl, #2
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f7ff fe98 	bl	800f918 <rshift>
 800fbe8:	443d      	add	r5, r7
 800fbea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fbee:	42ab      	cmp	r3, r5
 800fbf0:	da4c      	bge.n	800fc8c <__gethex+0x2a4>
 800fbf2:	ee18 0a10 	vmov	r0, s16
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	f000 fa6a 	bl	80100d0 <_Bfree>
 800fbfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fbfe:	2300      	movs	r3, #0
 800fc00:	6013      	str	r3, [r2, #0]
 800fc02:	27a3      	movs	r7, #163	; 0xa3
 800fc04:	e785      	b.n	800fb12 <__gethex+0x12a>
 800fc06:	1e73      	subs	r3, r6, #1
 800fc08:	9a05      	ldr	r2, [sp, #20]
 800fc0a:	9303      	str	r3, [sp, #12]
 800fc0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d019      	beq.n	800fc48 <__gethex+0x260>
 800fc14:	f1bb 0f20 	cmp.w	fp, #32
 800fc18:	d107      	bne.n	800fc2a <__gethex+0x242>
 800fc1a:	9b02      	ldr	r3, [sp, #8]
 800fc1c:	9a00      	ldr	r2, [sp, #0]
 800fc1e:	f843 2b04 	str.w	r2, [r3], #4
 800fc22:	9302      	str	r3, [sp, #8]
 800fc24:	2300      	movs	r3, #0
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	469b      	mov	fp, r3
 800fc2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fc2e:	f7ff fec5 	bl	800f9bc <__hexdig_fun>
 800fc32:	9b00      	ldr	r3, [sp, #0]
 800fc34:	f000 000f 	and.w	r0, r0, #15
 800fc38:	fa00 f00b 	lsl.w	r0, r0, fp
 800fc3c:	4303      	orrs	r3, r0
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	f10b 0b04 	add.w	fp, fp, #4
 800fc44:	9b03      	ldr	r3, [sp, #12]
 800fc46:	e00d      	b.n	800fc64 <__gethex+0x27c>
 800fc48:	9b03      	ldr	r3, [sp, #12]
 800fc4a:	9a06      	ldr	r2, [sp, #24]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	42bb      	cmp	r3, r7
 800fc50:	d3e0      	bcc.n	800fc14 <__gethex+0x22c>
 800fc52:	4618      	mov	r0, r3
 800fc54:	9901      	ldr	r1, [sp, #4]
 800fc56:	9307      	str	r3, [sp, #28]
 800fc58:	4652      	mov	r2, sl
 800fc5a:	f001 f8e1 	bl	8010e20 <strncmp>
 800fc5e:	9b07      	ldr	r3, [sp, #28]
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d1d7      	bne.n	800fc14 <__gethex+0x22c>
 800fc64:	461e      	mov	r6, r3
 800fc66:	e78b      	b.n	800fb80 <__gethex+0x198>
 800fc68:	f04f 0a03 	mov.w	sl, #3
 800fc6c:	e7b8      	b.n	800fbe0 <__gethex+0x1f8>
 800fc6e:	da0a      	bge.n	800fc86 <__gethex+0x29e>
 800fc70:	1a37      	subs	r7, r6, r0
 800fc72:	4621      	mov	r1, r4
 800fc74:	ee18 0a10 	vmov	r0, s16
 800fc78:	463a      	mov	r2, r7
 800fc7a:	f000 fc45 	bl	8010508 <__lshift>
 800fc7e:	1bed      	subs	r5, r5, r7
 800fc80:	4604      	mov	r4, r0
 800fc82:	f100 0914 	add.w	r9, r0, #20
 800fc86:	f04f 0a00 	mov.w	sl, #0
 800fc8a:	e7ae      	b.n	800fbea <__gethex+0x202>
 800fc8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fc90:	42a8      	cmp	r0, r5
 800fc92:	dd72      	ble.n	800fd7a <__gethex+0x392>
 800fc94:	1b45      	subs	r5, r0, r5
 800fc96:	42ae      	cmp	r6, r5
 800fc98:	dc36      	bgt.n	800fd08 <__gethex+0x320>
 800fc9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d02a      	beq.n	800fcf8 <__gethex+0x310>
 800fca2:	2b03      	cmp	r3, #3
 800fca4:	d02c      	beq.n	800fd00 <__gethex+0x318>
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d115      	bne.n	800fcd6 <__gethex+0x2ee>
 800fcaa:	42ae      	cmp	r6, r5
 800fcac:	d113      	bne.n	800fcd6 <__gethex+0x2ee>
 800fcae:	2e01      	cmp	r6, #1
 800fcb0:	d10b      	bne.n	800fcca <__gethex+0x2e2>
 800fcb2:	9a04      	ldr	r2, [sp, #16]
 800fcb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fcb8:	6013      	str	r3, [r2, #0]
 800fcba:	2301      	movs	r3, #1
 800fcbc:	6123      	str	r3, [r4, #16]
 800fcbe:	f8c9 3000 	str.w	r3, [r9]
 800fcc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fcc4:	2762      	movs	r7, #98	; 0x62
 800fcc6:	601c      	str	r4, [r3, #0]
 800fcc8:	e723      	b.n	800fb12 <__gethex+0x12a>
 800fcca:	1e71      	subs	r1, r6, #1
 800fccc:	4620      	mov	r0, r4
 800fcce:	f000 fe59 	bl	8010984 <__any_on>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d1ed      	bne.n	800fcb2 <__gethex+0x2ca>
 800fcd6:	ee18 0a10 	vmov	r0, s16
 800fcda:	4621      	mov	r1, r4
 800fcdc:	f000 f9f8 	bl	80100d0 <_Bfree>
 800fce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fce2:	2300      	movs	r3, #0
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	2750      	movs	r7, #80	; 0x50
 800fce8:	e713      	b.n	800fb12 <__gethex+0x12a>
 800fcea:	bf00      	nop
 800fcec:	08012068 	.word	0x08012068
 800fcf0:	08011fec 	.word	0x08011fec
 800fcf4:	08011ffd 	.word	0x08011ffd
 800fcf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1eb      	bne.n	800fcd6 <__gethex+0x2ee>
 800fcfe:	e7d8      	b.n	800fcb2 <__gethex+0x2ca>
 800fd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d1d5      	bne.n	800fcb2 <__gethex+0x2ca>
 800fd06:	e7e6      	b.n	800fcd6 <__gethex+0x2ee>
 800fd08:	1e6f      	subs	r7, r5, #1
 800fd0a:	f1ba 0f00 	cmp.w	sl, #0
 800fd0e:	d131      	bne.n	800fd74 <__gethex+0x38c>
 800fd10:	b127      	cbz	r7, 800fd1c <__gethex+0x334>
 800fd12:	4639      	mov	r1, r7
 800fd14:	4620      	mov	r0, r4
 800fd16:	f000 fe35 	bl	8010984 <__any_on>
 800fd1a:	4682      	mov	sl, r0
 800fd1c:	117b      	asrs	r3, r7, #5
 800fd1e:	2101      	movs	r1, #1
 800fd20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fd24:	f007 071f 	and.w	r7, r7, #31
 800fd28:	fa01 f707 	lsl.w	r7, r1, r7
 800fd2c:	421f      	tst	r7, r3
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4620      	mov	r0, r4
 800fd32:	bf18      	it	ne
 800fd34:	f04a 0a02 	orrne.w	sl, sl, #2
 800fd38:	1b76      	subs	r6, r6, r5
 800fd3a:	f7ff fded 	bl	800f918 <rshift>
 800fd3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fd42:	2702      	movs	r7, #2
 800fd44:	f1ba 0f00 	cmp.w	sl, #0
 800fd48:	d048      	beq.n	800fddc <__gethex+0x3f4>
 800fd4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	d015      	beq.n	800fd7e <__gethex+0x396>
 800fd52:	2b03      	cmp	r3, #3
 800fd54:	d017      	beq.n	800fd86 <__gethex+0x39e>
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d109      	bne.n	800fd6e <__gethex+0x386>
 800fd5a:	f01a 0f02 	tst.w	sl, #2
 800fd5e:	d006      	beq.n	800fd6e <__gethex+0x386>
 800fd60:	f8d9 0000 	ldr.w	r0, [r9]
 800fd64:	ea4a 0a00 	orr.w	sl, sl, r0
 800fd68:	f01a 0f01 	tst.w	sl, #1
 800fd6c:	d10e      	bne.n	800fd8c <__gethex+0x3a4>
 800fd6e:	f047 0710 	orr.w	r7, r7, #16
 800fd72:	e033      	b.n	800fddc <__gethex+0x3f4>
 800fd74:	f04f 0a01 	mov.w	sl, #1
 800fd78:	e7d0      	b.n	800fd1c <__gethex+0x334>
 800fd7a:	2701      	movs	r7, #1
 800fd7c:	e7e2      	b.n	800fd44 <__gethex+0x35c>
 800fd7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd80:	f1c3 0301 	rsb	r3, r3, #1
 800fd84:	9315      	str	r3, [sp, #84]	; 0x54
 800fd86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d0f0      	beq.n	800fd6e <__gethex+0x386>
 800fd8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd90:	f104 0314 	add.w	r3, r4, #20
 800fd94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd98:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd9c:	f04f 0c00 	mov.w	ip, #0
 800fda0:	4618      	mov	r0, r3
 800fda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fda6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fdaa:	d01c      	beq.n	800fde6 <__gethex+0x3fe>
 800fdac:	3201      	adds	r2, #1
 800fdae:	6002      	str	r2, [r0, #0]
 800fdb0:	2f02      	cmp	r7, #2
 800fdb2:	f104 0314 	add.w	r3, r4, #20
 800fdb6:	d13f      	bne.n	800fe38 <__gethex+0x450>
 800fdb8:	f8d8 2000 	ldr.w	r2, [r8]
 800fdbc:	3a01      	subs	r2, #1
 800fdbe:	42b2      	cmp	r2, r6
 800fdc0:	d10a      	bne.n	800fdd8 <__gethex+0x3f0>
 800fdc2:	1171      	asrs	r1, r6, #5
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fdca:	f006 061f 	and.w	r6, r6, #31
 800fdce:	fa02 f606 	lsl.w	r6, r2, r6
 800fdd2:	421e      	tst	r6, r3
 800fdd4:	bf18      	it	ne
 800fdd6:	4617      	movne	r7, r2
 800fdd8:	f047 0720 	orr.w	r7, r7, #32
 800fddc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdde:	601c      	str	r4, [r3, #0]
 800fde0:	9b04      	ldr	r3, [sp, #16]
 800fde2:	601d      	str	r5, [r3, #0]
 800fde4:	e695      	b.n	800fb12 <__gethex+0x12a>
 800fde6:	4299      	cmp	r1, r3
 800fde8:	f843 cc04 	str.w	ip, [r3, #-4]
 800fdec:	d8d8      	bhi.n	800fda0 <__gethex+0x3b8>
 800fdee:	68a3      	ldr	r3, [r4, #8]
 800fdf0:	459b      	cmp	fp, r3
 800fdf2:	db19      	blt.n	800fe28 <__gethex+0x440>
 800fdf4:	6861      	ldr	r1, [r4, #4]
 800fdf6:	ee18 0a10 	vmov	r0, s16
 800fdfa:	3101      	adds	r1, #1
 800fdfc:	f000 f928 	bl	8010050 <_Balloc>
 800fe00:	4681      	mov	r9, r0
 800fe02:	b918      	cbnz	r0, 800fe0c <__gethex+0x424>
 800fe04:	4b1a      	ldr	r3, [pc, #104]	; (800fe70 <__gethex+0x488>)
 800fe06:	4602      	mov	r2, r0
 800fe08:	2184      	movs	r1, #132	; 0x84
 800fe0a:	e6a8      	b.n	800fb5e <__gethex+0x176>
 800fe0c:	6922      	ldr	r2, [r4, #16]
 800fe0e:	3202      	adds	r2, #2
 800fe10:	f104 010c 	add.w	r1, r4, #12
 800fe14:	0092      	lsls	r2, r2, #2
 800fe16:	300c      	adds	r0, #12
 800fe18:	f000 f90c 	bl	8010034 <memcpy>
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	ee18 0a10 	vmov	r0, s16
 800fe22:	f000 f955 	bl	80100d0 <_Bfree>
 800fe26:	464c      	mov	r4, r9
 800fe28:	6923      	ldr	r3, [r4, #16]
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe30:	6122      	str	r2, [r4, #16]
 800fe32:	2201      	movs	r2, #1
 800fe34:	615a      	str	r2, [r3, #20]
 800fe36:	e7bb      	b.n	800fdb0 <__gethex+0x3c8>
 800fe38:	6922      	ldr	r2, [r4, #16]
 800fe3a:	455a      	cmp	r2, fp
 800fe3c:	dd0b      	ble.n	800fe56 <__gethex+0x46e>
 800fe3e:	2101      	movs	r1, #1
 800fe40:	4620      	mov	r0, r4
 800fe42:	f7ff fd69 	bl	800f918 <rshift>
 800fe46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe4a:	3501      	adds	r5, #1
 800fe4c:	42ab      	cmp	r3, r5
 800fe4e:	f6ff aed0 	blt.w	800fbf2 <__gethex+0x20a>
 800fe52:	2701      	movs	r7, #1
 800fe54:	e7c0      	b.n	800fdd8 <__gethex+0x3f0>
 800fe56:	f016 061f 	ands.w	r6, r6, #31
 800fe5a:	d0fa      	beq.n	800fe52 <__gethex+0x46a>
 800fe5c:	449a      	add	sl, r3
 800fe5e:	f1c6 0620 	rsb	r6, r6, #32
 800fe62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fe66:	f000 f9e9 	bl	801023c <__hi0bits>
 800fe6a:	42b0      	cmp	r0, r6
 800fe6c:	dbe7      	blt.n	800fe3e <__gethex+0x456>
 800fe6e:	e7f0      	b.n	800fe52 <__gethex+0x46a>
 800fe70:	08011fec 	.word	0x08011fec

0800fe74 <L_shift>:
 800fe74:	f1c2 0208 	rsb	r2, r2, #8
 800fe78:	0092      	lsls	r2, r2, #2
 800fe7a:	b570      	push	{r4, r5, r6, lr}
 800fe7c:	f1c2 0620 	rsb	r6, r2, #32
 800fe80:	6843      	ldr	r3, [r0, #4]
 800fe82:	6804      	ldr	r4, [r0, #0]
 800fe84:	fa03 f506 	lsl.w	r5, r3, r6
 800fe88:	432c      	orrs	r4, r5
 800fe8a:	40d3      	lsrs	r3, r2
 800fe8c:	6004      	str	r4, [r0, #0]
 800fe8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe92:	4288      	cmp	r0, r1
 800fe94:	d3f4      	bcc.n	800fe80 <L_shift+0xc>
 800fe96:	bd70      	pop	{r4, r5, r6, pc}

0800fe98 <__match>:
 800fe98:	b530      	push	{r4, r5, lr}
 800fe9a:	6803      	ldr	r3, [r0, #0]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fea2:	b914      	cbnz	r4, 800feaa <__match+0x12>
 800fea4:	6003      	str	r3, [r0, #0]
 800fea6:	2001      	movs	r0, #1
 800fea8:	bd30      	pop	{r4, r5, pc}
 800feaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800feae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800feb2:	2d19      	cmp	r5, #25
 800feb4:	bf98      	it	ls
 800feb6:	3220      	addls	r2, #32
 800feb8:	42a2      	cmp	r2, r4
 800feba:	d0f0      	beq.n	800fe9e <__match+0x6>
 800febc:	2000      	movs	r0, #0
 800febe:	e7f3      	b.n	800fea8 <__match+0x10>

0800fec0 <__hexnan>:
 800fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	680b      	ldr	r3, [r1, #0]
 800fec6:	6801      	ldr	r1, [r0, #0]
 800fec8:	115e      	asrs	r6, r3, #5
 800feca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fece:	f013 031f 	ands.w	r3, r3, #31
 800fed2:	b087      	sub	sp, #28
 800fed4:	bf18      	it	ne
 800fed6:	3604      	addne	r6, #4
 800fed8:	2500      	movs	r5, #0
 800feda:	1f37      	subs	r7, r6, #4
 800fedc:	4682      	mov	sl, r0
 800fede:	4690      	mov	r8, r2
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	f846 5c04 	str.w	r5, [r6, #-4]
 800fee6:	46b9      	mov	r9, r7
 800fee8:	463c      	mov	r4, r7
 800feea:	9502      	str	r5, [sp, #8]
 800feec:	46ab      	mov	fp, r5
 800feee:	784a      	ldrb	r2, [r1, #1]
 800fef0:	1c4b      	adds	r3, r1, #1
 800fef2:	9303      	str	r3, [sp, #12]
 800fef4:	b342      	cbz	r2, 800ff48 <__hexnan+0x88>
 800fef6:	4610      	mov	r0, r2
 800fef8:	9105      	str	r1, [sp, #20]
 800fefa:	9204      	str	r2, [sp, #16]
 800fefc:	f7ff fd5e 	bl	800f9bc <__hexdig_fun>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d14f      	bne.n	800ffa4 <__hexnan+0xe4>
 800ff04:	9a04      	ldr	r2, [sp, #16]
 800ff06:	9905      	ldr	r1, [sp, #20]
 800ff08:	2a20      	cmp	r2, #32
 800ff0a:	d818      	bhi.n	800ff3e <__hexnan+0x7e>
 800ff0c:	9b02      	ldr	r3, [sp, #8]
 800ff0e:	459b      	cmp	fp, r3
 800ff10:	dd13      	ble.n	800ff3a <__hexnan+0x7a>
 800ff12:	454c      	cmp	r4, r9
 800ff14:	d206      	bcs.n	800ff24 <__hexnan+0x64>
 800ff16:	2d07      	cmp	r5, #7
 800ff18:	dc04      	bgt.n	800ff24 <__hexnan+0x64>
 800ff1a:	462a      	mov	r2, r5
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f7ff ffa8 	bl	800fe74 <L_shift>
 800ff24:	4544      	cmp	r4, r8
 800ff26:	d950      	bls.n	800ffca <__hexnan+0x10a>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f1a4 0904 	sub.w	r9, r4, #4
 800ff2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff32:	f8cd b008 	str.w	fp, [sp, #8]
 800ff36:	464c      	mov	r4, r9
 800ff38:	461d      	mov	r5, r3
 800ff3a:	9903      	ldr	r1, [sp, #12]
 800ff3c:	e7d7      	b.n	800feee <__hexnan+0x2e>
 800ff3e:	2a29      	cmp	r2, #41	; 0x29
 800ff40:	d156      	bne.n	800fff0 <__hexnan+0x130>
 800ff42:	3102      	adds	r1, #2
 800ff44:	f8ca 1000 	str.w	r1, [sl]
 800ff48:	f1bb 0f00 	cmp.w	fp, #0
 800ff4c:	d050      	beq.n	800fff0 <__hexnan+0x130>
 800ff4e:	454c      	cmp	r4, r9
 800ff50:	d206      	bcs.n	800ff60 <__hexnan+0xa0>
 800ff52:	2d07      	cmp	r5, #7
 800ff54:	dc04      	bgt.n	800ff60 <__hexnan+0xa0>
 800ff56:	462a      	mov	r2, r5
 800ff58:	4649      	mov	r1, r9
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f7ff ff8a 	bl	800fe74 <L_shift>
 800ff60:	4544      	cmp	r4, r8
 800ff62:	d934      	bls.n	800ffce <__hexnan+0x10e>
 800ff64:	f1a8 0204 	sub.w	r2, r8, #4
 800ff68:	4623      	mov	r3, r4
 800ff6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff72:	429f      	cmp	r7, r3
 800ff74:	d2f9      	bcs.n	800ff6a <__hexnan+0xaa>
 800ff76:	1b3b      	subs	r3, r7, r4
 800ff78:	f023 0303 	bic.w	r3, r3, #3
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	3401      	adds	r4, #1
 800ff80:	3e03      	subs	r6, #3
 800ff82:	42b4      	cmp	r4, r6
 800ff84:	bf88      	it	hi
 800ff86:	2304      	movhi	r3, #4
 800ff88:	4443      	add	r3, r8
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f843 2b04 	str.w	r2, [r3], #4
 800ff90:	429f      	cmp	r7, r3
 800ff92:	d2fb      	bcs.n	800ff8c <__hexnan+0xcc>
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	b91b      	cbnz	r3, 800ffa0 <__hexnan+0xe0>
 800ff98:	4547      	cmp	r7, r8
 800ff9a:	d127      	bne.n	800ffec <__hexnan+0x12c>
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	603b      	str	r3, [r7, #0]
 800ffa0:	2005      	movs	r0, #5
 800ffa2:	e026      	b.n	800fff2 <__hexnan+0x132>
 800ffa4:	3501      	adds	r5, #1
 800ffa6:	2d08      	cmp	r5, #8
 800ffa8:	f10b 0b01 	add.w	fp, fp, #1
 800ffac:	dd06      	ble.n	800ffbc <__hexnan+0xfc>
 800ffae:	4544      	cmp	r4, r8
 800ffb0:	d9c3      	bls.n	800ff3a <__hexnan+0x7a>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f844 3c04 	str.w	r3, [r4, #-4]
 800ffb8:	2501      	movs	r5, #1
 800ffba:	3c04      	subs	r4, #4
 800ffbc:	6822      	ldr	r2, [r4, #0]
 800ffbe:	f000 000f 	and.w	r0, r0, #15
 800ffc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ffc6:	6022      	str	r2, [r4, #0]
 800ffc8:	e7b7      	b.n	800ff3a <__hexnan+0x7a>
 800ffca:	2508      	movs	r5, #8
 800ffcc:	e7b5      	b.n	800ff3a <__hexnan+0x7a>
 800ffce:	9b01      	ldr	r3, [sp, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d0df      	beq.n	800ff94 <__hexnan+0xd4>
 800ffd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd8:	f1c3 0320 	rsb	r3, r3, #32
 800ffdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ffe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ffe4:	401a      	ands	r2, r3
 800ffe6:	f846 2c04 	str.w	r2, [r6, #-4]
 800ffea:	e7d3      	b.n	800ff94 <__hexnan+0xd4>
 800ffec:	3f04      	subs	r7, #4
 800ffee:	e7d1      	b.n	800ff94 <__hexnan+0xd4>
 800fff0:	2004      	movs	r0, #4
 800fff2:	b007      	add	sp, #28
 800fff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fff8 <_localeconv_r>:
 800fff8:	4800      	ldr	r0, [pc, #0]	; (800fffc <_localeconv_r+0x4>)
 800fffa:	4770      	bx	lr
 800fffc:	2000018c 	.word	0x2000018c

08010000 <malloc>:
 8010000:	4b02      	ldr	r3, [pc, #8]	; (801000c <malloc+0xc>)
 8010002:	4601      	mov	r1, r0
 8010004:	6818      	ldr	r0, [r3, #0]
 8010006:	f000 bd3d 	b.w	8010a84 <_malloc_r>
 801000a:	bf00      	nop
 801000c:	20000034 	.word	0x20000034

08010010 <__ascii_mbtowc>:
 8010010:	b082      	sub	sp, #8
 8010012:	b901      	cbnz	r1, 8010016 <__ascii_mbtowc+0x6>
 8010014:	a901      	add	r1, sp, #4
 8010016:	b142      	cbz	r2, 801002a <__ascii_mbtowc+0x1a>
 8010018:	b14b      	cbz	r3, 801002e <__ascii_mbtowc+0x1e>
 801001a:	7813      	ldrb	r3, [r2, #0]
 801001c:	600b      	str	r3, [r1, #0]
 801001e:	7812      	ldrb	r2, [r2, #0]
 8010020:	1e10      	subs	r0, r2, #0
 8010022:	bf18      	it	ne
 8010024:	2001      	movne	r0, #1
 8010026:	b002      	add	sp, #8
 8010028:	4770      	bx	lr
 801002a:	4610      	mov	r0, r2
 801002c:	e7fb      	b.n	8010026 <__ascii_mbtowc+0x16>
 801002e:	f06f 0001 	mvn.w	r0, #1
 8010032:	e7f8      	b.n	8010026 <__ascii_mbtowc+0x16>

08010034 <memcpy>:
 8010034:	440a      	add	r2, r1
 8010036:	4291      	cmp	r1, r2
 8010038:	f100 33ff 	add.w	r3, r0, #4294967295
 801003c:	d100      	bne.n	8010040 <memcpy+0xc>
 801003e:	4770      	bx	lr
 8010040:	b510      	push	{r4, lr}
 8010042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010046:	f803 4f01 	strb.w	r4, [r3, #1]!
 801004a:	4291      	cmp	r1, r2
 801004c:	d1f9      	bne.n	8010042 <memcpy+0xe>
 801004e:	bd10      	pop	{r4, pc}

08010050 <_Balloc>:
 8010050:	b570      	push	{r4, r5, r6, lr}
 8010052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010054:	4604      	mov	r4, r0
 8010056:	460d      	mov	r5, r1
 8010058:	b976      	cbnz	r6, 8010078 <_Balloc+0x28>
 801005a:	2010      	movs	r0, #16
 801005c:	f7ff ffd0 	bl	8010000 <malloc>
 8010060:	4602      	mov	r2, r0
 8010062:	6260      	str	r0, [r4, #36]	; 0x24
 8010064:	b920      	cbnz	r0, 8010070 <_Balloc+0x20>
 8010066:	4b18      	ldr	r3, [pc, #96]	; (80100c8 <_Balloc+0x78>)
 8010068:	4818      	ldr	r0, [pc, #96]	; (80100cc <_Balloc+0x7c>)
 801006a:	2166      	movs	r1, #102	; 0x66
 801006c:	f000 fef8 	bl	8010e60 <__assert_func>
 8010070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010074:	6006      	str	r6, [r0, #0]
 8010076:	60c6      	str	r6, [r0, #12]
 8010078:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801007a:	68f3      	ldr	r3, [r6, #12]
 801007c:	b183      	cbz	r3, 80100a0 <_Balloc+0x50>
 801007e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010086:	b9b8      	cbnz	r0, 80100b8 <_Balloc+0x68>
 8010088:	2101      	movs	r1, #1
 801008a:	fa01 f605 	lsl.w	r6, r1, r5
 801008e:	1d72      	adds	r2, r6, #5
 8010090:	0092      	lsls	r2, r2, #2
 8010092:	4620      	mov	r0, r4
 8010094:	f000 fc97 	bl	80109c6 <_calloc_r>
 8010098:	b160      	cbz	r0, 80100b4 <_Balloc+0x64>
 801009a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801009e:	e00e      	b.n	80100be <_Balloc+0x6e>
 80100a0:	2221      	movs	r2, #33	; 0x21
 80100a2:	2104      	movs	r1, #4
 80100a4:	4620      	mov	r0, r4
 80100a6:	f000 fc8e 	bl	80109c6 <_calloc_r>
 80100aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100ac:	60f0      	str	r0, [r6, #12]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1e4      	bne.n	801007e <_Balloc+0x2e>
 80100b4:	2000      	movs	r0, #0
 80100b6:	bd70      	pop	{r4, r5, r6, pc}
 80100b8:	6802      	ldr	r2, [r0, #0]
 80100ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100be:	2300      	movs	r3, #0
 80100c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80100c4:	e7f7      	b.n	80100b6 <_Balloc+0x66>
 80100c6:	bf00      	nop
 80100c8:	08011f76 	.word	0x08011f76
 80100cc:	0801207c 	.word	0x0801207c

080100d0 <_Bfree>:
 80100d0:	b570      	push	{r4, r5, r6, lr}
 80100d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80100d4:	4605      	mov	r5, r0
 80100d6:	460c      	mov	r4, r1
 80100d8:	b976      	cbnz	r6, 80100f8 <_Bfree+0x28>
 80100da:	2010      	movs	r0, #16
 80100dc:	f7ff ff90 	bl	8010000 <malloc>
 80100e0:	4602      	mov	r2, r0
 80100e2:	6268      	str	r0, [r5, #36]	; 0x24
 80100e4:	b920      	cbnz	r0, 80100f0 <_Bfree+0x20>
 80100e6:	4b09      	ldr	r3, [pc, #36]	; (801010c <_Bfree+0x3c>)
 80100e8:	4809      	ldr	r0, [pc, #36]	; (8010110 <_Bfree+0x40>)
 80100ea:	218a      	movs	r1, #138	; 0x8a
 80100ec:	f000 feb8 	bl	8010e60 <__assert_func>
 80100f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100f4:	6006      	str	r6, [r0, #0]
 80100f6:	60c6      	str	r6, [r0, #12]
 80100f8:	b13c      	cbz	r4, 801010a <_Bfree+0x3a>
 80100fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100fc:	6862      	ldr	r2, [r4, #4]
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010104:	6021      	str	r1, [r4, #0]
 8010106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	08011f76 	.word	0x08011f76
 8010110:	0801207c 	.word	0x0801207c

08010114 <__multadd>:
 8010114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010118:	690e      	ldr	r6, [r1, #16]
 801011a:	4607      	mov	r7, r0
 801011c:	4698      	mov	r8, r3
 801011e:	460c      	mov	r4, r1
 8010120:	f101 0014 	add.w	r0, r1, #20
 8010124:	2300      	movs	r3, #0
 8010126:	6805      	ldr	r5, [r0, #0]
 8010128:	b2a9      	uxth	r1, r5
 801012a:	fb02 8101 	mla	r1, r2, r1, r8
 801012e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010132:	0c2d      	lsrs	r5, r5, #16
 8010134:	fb02 c505 	mla	r5, r2, r5, ip
 8010138:	b289      	uxth	r1, r1
 801013a:	3301      	adds	r3, #1
 801013c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010140:	429e      	cmp	r6, r3
 8010142:	f840 1b04 	str.w	r1, [r0], #4
 8010146:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801014a:	dcec      	bgt.n	8010126 <__multadd+0x12>
 801014c:	f1b8 0f00 	cmp.w	r8, #0
 8010150:	d022      	beq.n	8010198 <__multadd+0x84>
 8010152:	68a3      	ldr	r3, [r4, #8]
 8010154:	42b3      	cmp	r3, r6
 8010156:	dc19      	bgt.n	801018c <__multadd+0x78>
 8010158:	6861      	ldr	r1, [r4, #4]
 801015a:	4638      	mov	r0, r7
 801015c:	3101      	adds	r1, #1
 801015e:	f7ff ff77 	bl	8010050 <_Balloc>
 8010162:	4605      	mov	r5, r0
 8010164:	b928      	cbnz	r0, 8010172 <__multadd+0x5e>
 8010166:	4602      	mov	r2, r0
 8010168:	4b0d      	ldr	r3, [pc, #52]	; (80101a0 <__multadd+0x8c>)
 801016a:	480e      	ldr	r0, [pc, #56]	; (80101a4 <__multadd+0x90>)
 801016c:	21b5      	movs	r1, #181	; 0xb5
 801016e:	f000 fe77 	bl	8010e60 <__assert_func>
 8010172:	6922      	ldr	r2, [r4, #16]
 8010174:	3202      	adds	r2, #2
 8010176:	f104 010c 	add.w	r1, r4, #12
 801017a:	0092      	lsls	r2, r2, #2
 801017c:	300c      	adds	r0, #12
 801017e:	f7ff ff59 	bl	8010034 <memcpy>
 8010182:	4621      	mov	r1, r4
 8010184:	4638      	mov	r0, r7
 8010186:	f7ff ffa3 	bl	80100d0 <_Bfree>
 801018a:	462c      	mov	r4, r5
 801018c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010190:	3601      	adds	r6, #1
 8010192:	f8c3 8014 	str.w	r8, [r3, #20]
 8010196:	6126      	str	r6, [r4, #16]
 8010198:	4620      	mov	r0, r4
 801019a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801019e:	bf00      	nop
 80101a0:	08011fec 	.word	0x08011fec
 80101a4:	0801207c 	.word	0x0801207c

080101a8 <__s2b>:
 80101a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ac:	460c      	mov	r4, r1
 80101ae:	4615      	mov	r5, r2
 80101b0:	461f      	mov	r7, r3
 80101b2:	2209      	movs	r2, #9
 80101b4:	3308      	adds	r3, #8
 80101b6:	4606      	mov	r6, r0
 80101b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80101bc:	2100      	movs	r1, #0
 80101be:	2201      	movs	r2, #1
 80101c0:	429a      	cmp	r2, r3
 80101c2:	db09      	blt.n	80101d8 <__s2b+0x30>
 80101c4:	4630      	mov	r0, r6
 80101c6:	f7ff ff43 	bl	8010050 <_Balloc>
 80101ca:	b940      	cbnz	r0, 80101de <__s2b+0x36>
 80101cc:	4602      	mov	r2, r0
 80101ce:	4b19      	ldr	r3, [pc, #100]	; (8010234 <__s2b+0x8c>)
 80101d0:	4819      	ldr	r0, [pc, #100]	; (8010238 <__s2b+0x90>)
 80101d2:	21ce      	movs	r1, #206	; 0xce
 80101d4:	f000 fe44 	bl	8010e60 <__assert_func>
 80101d8:	0052      	lsls	r2, r2, #1
 80101da:	3101      	adds	r1, #1
 80101dc:	e7f0      	b.n	80101c0 <__s2b+0x18>
 80101de:	9b08      	ldr	r3, [sp, #32]
 80101e0:	6143      	str	r3, [r0, #20]
 80101e2:	2d09      	cmp	r5, #9
 80101e4:	f04f 0301 	mov.w	r3, #1
 80101e8:	6103      	str	r3, [r0, #16]
 80101ea:	dd16      	ble.n	801021a <__s2b+0x72>
 80101ec:	f104 0909 	add.w	r9, r4, #9
 80101f0:	46c8      	mov	r8, r9
 80101f2:	442c      	add	r4, r5
 80101f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80101f8:	4601      	mov	r1, r0
 80101fa:	3b30      	subs	r3, #48	; 0x30
 80101fc:	220a      	movs	r2, #10
 80101fe:	4630      	mov	r0, r6
 8010200:	f7ff ff88 	bl	8010114 <__multadd>
 8010204:	45a0      	cmp	r8, r4
 8010206:	d1f5      	bne.n	80101f4 <__s2b+0x4c>
 8010208:	f1a5 0408 	sub.w	r4, r5, #8
 801020c:	444c      	add	r4, r9
 801020e:	1b2d      	subs	r5, r5, r4
 8010210:	1963      	adds	r3, r4, r5
 8010212:	42bb      	cmp	r3, r7
 8010214:	db04      	blt.n	8010220 <__s2b+0x78>
 8010216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801021a:	340a      	adds	r4, #10
 801021c:	2509      	movs	r5, #9
 801021e:	e7f6      	b.n	801020e <__s2b+0x66>
 8010220:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010224:	4601      	mov	r1, r0
 8010226:	3b30      	subs	r3, #48	; 0x30
 8010228:	220a      	movs	r2, #10
 801022a:	4630      	mov	r0, r6
 801022c:	f7ff ff72 	bl	8010114 <__multadd>
 8010230:	e7ee      	b.n	8010210 <__s2b+0x68>
 8010232:	bf00      	nop
 8010234:	08011fec 	.word	0x08011fec
 8010238:	0801207c 	.word	0x0801207c

0801023c <__hi0bits>:
 801023c:	0c03      	lsrs	r3, r0, #16
 801023e:	041b      	lsls	r3, r3, #16
 8010240:	b9d3      	cbnz	r3, 8010278 <__hi0bits+0x3c>
 8010242:	0400      	lsls	r0, r0, #16
 8010244:	2310      	movs	r3, #16
 8010246:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801024a:	bf04      	itt	eq
 801024c:	0200      	lsleq	r0, r0, #8
 801024e:	3308      	addeq	r3, #8
 8010250:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010254:	bf04      	itt	eq
 8010256:	0100      	lsleq	r0, r0, #4
 8010258:	3304      	addeq	r3, #4
 801025a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801025e:	bf04      	itt	eq
 8010260:	0080      	lsleq	r0, r0, #2
 8010262:	3302      	addeq	r3, #2
 8010264:	2800      	cmp	r0, #0
 8010266:	db05      	blt.n	8010274 <__hi0bits+0x38>
 8010268:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801026c:	f103 0301 	add.w	r3, r3, #1
 8010270:	bf08      	it	eq
 8010272:	2320      	moveq	r3, #32
 8010274:	4618      	mov	r0, r3
 8010276:	4770      	bx	lr
 8010278:	2300      	movs	r3, #0
 801027a:	e7e4      	b.n	8010246 <__hi0bits+0xa>

0801027c <__lo0bits>:
 801027c:	6803      	ldr	r3, [r0, #0]
 801027e:	f013 0207 	ands.w	r2, r3, #7
 8010282:	4601      	mov	r1, r0
 8010284:	d00b      	beq.n	801029e <__lo0bits+0x22>
 8010286:	07da      	lsls	r2, r3, #31
 8010288:	d424      	bmi.n	80102d4 <__lo0bits+0x58>
 801028a:	0798      	lsls	r0, r3, #30
 801028c:	bf49      	itett	mi
 801028e:	085b      	lsrmi	r3, r3, #1
 8010290:	089b      	lsrpl	r3, r3, #2
 8010292:	2001      	movmi	r0, #1
 8010294:	600b      	strmi	r3, [r1, #0]
 8010296:	bf5c      	itt	pl
 8010298:	600b      	strpl	r3, [r1, #0]
 801029a:	2002      	movpl	r0, #2
 801029c:	4770      	bx	lr
 801029e:	b298      	uxth	r0, r3
 80102a0:	b9b0      	cbnz	r0, 80102d0 <__lo0bits+0x54>
 80102a2:	0c1b      	lsrs	r3, r3, #16
 80102a4:	2010      	movs	r0, #16
 80102a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80102aa:	bf04      	itt	eq
 80102ac:	0a1b      	lsreq	r3, r3, #8
 80102ae:	3008      	addeq	r0, #8
 80102b0:	071a      	lsls	r2, r3, #28
 80102b2:	bf04      	itt	eq
 80102b4:	091b      	lsreq	r3, r3, #4
 80102b6:	3004      	addeq	r0, #4
 80102b8:	079a      	lsls	r2, r3, #30
 80102ba:	bf04      	itt	eq
 80102bc:	089b      	lsreq	r3, r3, #2
 80102be:	3002      	addeq	r0, #2
 80102c0:	07da      	lsls	r2, r3, #31
 80102c2:	d403      	bmi.n	80102cc <__lo0bits+0x50>
 80102c4:	085b      	lsrs	r3, r3, #1
 80102c6:	f100 0001 	add.w	r0, r0, #1
 80102ca:	d005      	beq.n	80102d8 <__lo0bits+0x5c>
 80102cc:	600b      	str	r3, [r1, #0]
 80102ce:	4770      	bx	lr
 80102d0:	4610      	mov	r0, r2
 80102d2:	e7e8      	b.n	80102a6 <__lo0bits+0x2a>
 80102d4:	2000      	movs	r0, #0
 80102d6:	4770      	bx	lr
 80102d8:	2020      	movs	r0, #32
 80102da:	4770      	bx	lr

080102dc <__i2b>:
 80102dc:	b510      	push	{r4, lr}
 80102de:	460c      	mov	r4, r1
 80102e0:	2101      	movs	r1, #1
 80102e2:	f7ff feb5 	bl	8010050 <_Balloc>
 80102e6:	4602      	mov	r2, r0
 80102e8:	b928      	cbnz	r0, 80102f6 <__i2b+0x1a>
 80102ea:	4b05      	ldr	r3, [pc, #20]	; (8010300 <__i2b+0x24>)
 80102ec:	4805      	ldr	r0, [pc, #20]	; (8010304 <__i2b+0x28>)
 80102ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80102f2:	f000 fdb5 	bl	8010e60 <__assert_func>
 80102f6:	2301      	movs	r3, #1
 80102f8:	6144      	str	r4, [r0, #20]
 80102fa:	6103      	str	r3, [r0, #16]
 80102fc:	bd10      	pop	{r4, pc}
 80102fe:	bf00      	nop
 8010300:	08011fec 	.word	0x08011fec
 8010304:	0801207c 	.word	0x0801207c

08010308 <__multiply>:
 8010308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030c:	4614      	mov	r4, r2
 801030e:	690a      	ldr	r2, [r1, #16]
 8010310:	6923      	ldr	r3, [r4, #16]
 8010312:	429a      	cmp	r2, r3
 8010314:	bfb8      	it	lt
 8010316:	460b      	movlt	r3, r1
 8010318:	460d      	mov	r5, r1
 801031a:	bfbc      	itt	lt
 801031c:	4625      	movlt	r5, r4
 801031e:	461c      	movlt	r4, r3
 8010320:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010324:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010328:	68ab      	ldr	r3, [r5, #8]
 801032a:	6869      	ldr	r1, [r5, #4]
 801032c:	eb0a 0709 	add.w	r7, sl, r9
 8010330:	42bb      	cmp	r3, r7
 8010332:	b085      	sub	sp, #20
 8010334:	bfb8      	it	lt
 8010336:	3101      	addlt	r1, #1
 8010338:	f7ff fe8a 	bl	8010050 <_Balloc>
 801033c:	b930      	cbnz	r0, 801034c <__multiply+0x44>
 801033e:	4602      	mov	r2, r0
 8010340:	4b42      	ldr	r3, [pc, #264]	; (801044c <__multiply+0x144>)
 8010342:	4843      	ldr	r0, [pc, #268]	; (8010450 <__multiply+0x148>)
 8010344:	f240 115d 	movw	r1, #349	; 0x15d
 8010348:	f000 fd8a 	bl	8010e60 <__assert_func>
 801034c:	f100 0614 	add.w	r6, r0, #20
 8010350:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010354:	4633      	mov	r3, r6
 8010356:	2200      	movs	r2, #0
 8010358:	4543      	cmp	r3, r8
 801035a:	d31e      	bcc.n	801039a <__multiply+0x92>
 801035c:	f105 0c14 	add.w	ip, r5, #20
 8010360:	f104 0314 	add.w	r3, r4, #20
 8010364:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010368:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801036c:	9202      	str	r2, [sp, #8]
 801036e:	ebac 0205 	sub.w	r2, ip, r5
 8010372:	3a15      	subs	r2, #21
 8010374:	f022 0203 	bic.w	r2, r2, #3
 8010378:	3204      	adds	r2, #4
 801037a:	f105 0115 	add.w	r1, r5, #21
 801037e:	458c      	cmp	ip, r1
 8010380:	bf38      	it	cc
 8010382:	2204      	movcc	r2, #4
 8010384:	9201      	str	r2, [sp, #4]
 8010386:	9a02      	ldr	r2, [sp, #8]
 8010388:	9303      	str	r3, [sp, #12]
 801038a:	429a      	cmp	r2, r3
 801038c:	d808      	bhi.n	80103a0 <__multiply+0x98>
 801038e:	2f00      	cmp	r7, #0
 8010390:	dc55      	bgt.n	801043e <__multiply+0x136>
 8010392:	6107      	str	r7, [r0, #16]
 8010394:	b005      	add	sp, #20
 8010396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039a:	f843 2b04 	str.w	r2, [r3], #4
 801039e:	e7db      	b.n	8010358 <__multiply+0x50>
 80103a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80103a4:	f1ba 0f00 	cmp.w	sl, #0
 80103a8:	d020      	beq.n	80103ec <__multiply+0xe4>
 80103aa:	f105 0e14 	add.w	lr, r5, #20
 80103ae:	46b1      	mov	r9, r6
 80103b0:	2200      	movs	r2, #0
 80103b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80103b6:	f8d9 b000 	ldr.w	fp, [r9]
 80103ba:	b2a1      	uxth	r1, r4
 80103bc:	fa1f fb8b 	uxth.w	fp, fp
 80103c0:	fb0a b101 	mla	r1, sl, r1, fp
 80103c4:	4411      	add	r1, r2
 80103c6:	f8d9 2000 	ldr.w	r2, [r9]
 80103ca:	0c24      	lsrs	r4, r4, #16
 80103cc:	0c12      	lsrs	r2, r2, #16
 80103ce:	fb0a 2404 	mla	r4, sl, r4, r2
 80103d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80103d6:	b289      	uxth	r1, r1
 80103d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80103dc:	45f4      	cmp	ip, lr
 80103de:	f849 1b04 	str.w	r1, [r9], #4
 80103e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80103e6:	d8e4      	bhi.n	80103b2 <__multiply+0xaa>
 80103e8:	9901      	ldr	r1, [sp, #4]
 80103ea:	5072      	str	r2, [r6, r1]
 80103ec:	9a03      	ldr	r2, [sp, #12]
 80103ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80103f2:	3304      	adds	r3, #4
 80103f4:	f1b9 0f00 	cmp.w	r9, #0
 80103f8:	d01f      	beq.n	801043a <__multiply+0x132>
 80103fa:	6834      	ldr	r4, [r6, #0]
 80103fc:	f105 0114 	add.w	r1, r5, #20
 8010400:	46b6      	mov	lr, r6
 8010402:	f04f 0a00 	mov.w	sl, #0
 8010406:	880a      	ldrh	r2, [r1, #0]
 8010408:	f8be b002 	ldrh.w	fp, [lr, #2]
 801040c:	fb09 b202 	mla	r2, r9, r2, fp
 8010410:	4492      	add	sl, r2
 8010412:	b2a4      	uxth	r4, r4
 8010414:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010418:	f84e 4b04 	str.w	r4, [lr], #4
 801041c:	f851 4b04 	ldr.w	r4, [r1], #4
 8010420:	f8be 2000 	ldrh.w	r2, [lr]
 8010424:	0c24      	lsrs	r4, r4, #16
 8010426:	fb09 2404 	mla	r4, r9, r4, r2
 801042a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801042e:	458c      	cmp	ip, r1
 8010430:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010434:	d8e7      	bhi.n	8010406 <__multiply+0xfe>
 8010436:	9a01      	ldr	r2, [sp, #4]
 8010438:	50b4      	str	r4, [r6, r2]
 801043a:	3604      	adds	r6, #4
 801043c:	e7a3      	b.n	8010386 <__multiply+0x7e>
 801043e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010442:	2b00      	cmp	r3, #0
 8010444:	d1a5      	bne.n	8010392 <__multiply+0x8a>
 8010446:	3f01      	subs	r7, #1
 8010448:	e7a1      	b.n	801038e <__multiply+0x86>
 801044a:	bf00      	nop
 801044c:	08011fec 	.word	0x08011fec
 8010450:	0801207c 	.word	0x0801207c

08010454 <__pow5mult>:
 8010454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010458:	4615      	mov	r5, r2
 801045a:	f012 0203 	ands.w	r2, r2, #3
 801045e:	4606      	mov	r6, r0
 8010460:	460f      	mov	r7, r1
 8010462:	d007      	beq.n	8010474 <__pow5mult+0x20>
 8010464:	4c25      	ldr	r4, [pc, #148]	; (80104fc <__pow5mult+0xa8>)
 8010466:	3a01      	subs	r2, #1
 8010468:	2300      	movs	r3, #0
 801046a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801046e:	f7ff fe51 	bl	8010114 <__multadd>
 8010472:	4607      	mov	r7, r0
 8010474:	10ad      	asrs	r5, r5, #2
 8010476:	d03d      	beq.n	80104f4 <__pow5mult+0xa0>
 8010478:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801047a:	b97c      	cbnz	r4, 801049c <__pow5mult+0x48>
 801047c:	2010      	movs	r0, #16
 801047e:	f7ff fdbf 	bl	8010000 <malloc>
 8010482:	4602      	mov	r2, r0
 8010484:	6270      	str	r0, [r6, #36]	; 0x24
 8010486:	b928      	cbnz	r0, 8010494 <__pow5mult+0x40>
 8010488:	4b1d      	ldr	r3, [pc, #116]	; (8010500 <__pow5mult+0xac>)
 801048a:	481e      	ldr	r0, [pc, #120]	; (8010504 <__pow5mult+0xb0>)
 801048c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010490:	f000 fce6 	bl	8010e60 <__assert_func>
 8010494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010498:	6004      	str	r4, [r0, #0]
 801049a:	60c4      	str	r4, [r0, #12]
 801049c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104a4:	b94c      	cbnz	r4, 80104ba <__pow5mult+0x66>
 80104a6:	f240 2171 	movw	r1, #625	; 0x271
 80104aa:	4630      	mov	r0, r6
 80104ac:	f7ff ff16 	bl	80102dc <__i2b>
 80104b0:	2300      	movs	r3, #0
 80104b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80104b6:	4604      	mov	r4, r0
 80104b8:	6003      	str	r3, [r0, #0]
 80104ba:	f04f 0900 	mov.w	r9, #0
 80104be:	07eb      	lsls	r3, r5, #31
 80104c0:	d50a      	bpl.n	80104d8 <__pow5mult+0x84>
 80104c2:	4639      	mov	r1, r7
 80104c4:	4622      	mov	r2, r4
 80104c6:	4630      	mov	r0, r6
 80104c8:	f7ff ff1e 	bl	8010308 <__multiply>
 80104cc:	4639      	mov	r1, r7
 80104ce:	4680      	mov	r8, r0
 80104d0:	4630      	mov	r0, r6
 80104d2:	f7ff fdfd 	bl	80100d0 <_Bfree>
 80104d6:	4647      	mov	r7, r8
 80104d8:	106d      	asrs	r5, r5, #1
 80104da:	d00b      	beq.n	80104f4 <__pow5mult+0xa0>
 80104dc:	6820      	ldr	r0, [r4, #0]
 80104de:	b938      	cbnz	r0, 80104f0 <__pow5mult+0x9c>
 80104e0:	4622      	mov	r2, r4
 80104e2:	4621      	mov	r1, r4
 80104e4:	4630      	mov	r0, r6
 80104e6:	f7ff ff0f 	bl	8010308 <__multiply>
 80104ea:	6020      	str	r0, [r4, #0]
 80104ec:	f8c0 9000 	str.w	r9, [r0]
 80104f0:	4604      	mov	r4, r0
 80104f2:	e7e4      	b.n	80104be <__pow5mult+0x6a>
 80104f4:	4638      	mov	r0, r7
 80104f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fa:	bf00      	nop
 80104fc:	080121d0 	.word	0x080121d0
 8010500:	08011f76 	.word	0x08011f76
 8010504:	0801207c 	.word	0x0801207c

08010508 <__lshift>:
 8010508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801050c:	460c      	mov	r4, r1
 801050e:	6849      	ldr	r1, [r1, #4]
 8010510:	6923      	ldr	r3, [r4, #16]
 8010512:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010516:	68a3      	ldr	r3, [r4, #8]
 8010518:	4607      	mov	r7, r0
 801051a:	4691      	mov	r9, r2
 801051c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010520:	f108 0601 	add.w	r6, r8, #1
 8010524:	42b3      	cmp	r3, r6
 8010526:	db0b      	blt.n	8010540 <__lshift+0x38>
 8010528:	4638      	mov	r0, r7
 801052a:	f7ff fd91 	bl	8010050 <_Balloc>
 801052e:	4605      	mov	r5, r0
 8010530:	b948      	cbnz	r0, 8010546 <__lshift+0x3e>
 8010532:	4602      	mov	r2, r0
 8010534:	4b28      	ldr	r3, [pc, #160]	; (80105d8 <__lshift+0xd0>)
 8010536:	4829      	ldr	r0, [pc, #164]	; (80105dc <__lshift+0xd4>)
 8010538:	f240 11d9 	movw	r1, #473	; 0x1d9
 801053c:	f000 fc90 	bl	8010e60 <__assert_func>
 8010540:	3101      	adds	r1, #1
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	e7ee      	b.n	8010524 <__lshift+0x1c>
 8010546:	2300      	movs	r3, #0
 8010548:	f100 0114 	add.w	r1, r0, #20
 801054c:	f100 0210 	add.w	r2, r0, #16
 8010550:	4618      	mov	r0, r3
 8010552:	4553      	cmp	r3, sl
 8010554:	db33      	blt.n	80105be <__lshift+0xb6>
 8010556:	6920      	ldr	r0, [r4, #16]
 8010558:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801055c:	f104 0314 	add.w	r3, r4, #20
 8010560:	f019 091f 	ands.w	r9, r9, #31
 8010564:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010568:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801056c:	d02b      	beq.n	80105c6 <__lshift+0xbe>
 801056e:	f1c9 0e20 	rsb	lr, r9, #32
 8010572:	468a      	mov	sl, r1
 8010574:	2200      	movs	r2, #0
 8010576:	6818      	ldr	r0, [r3, #0]
 8010578:	fa00 f009 	lsl.w	r0, r0, r9
 801057c:	4302      	orrs	r2, r0
 801057e:	f84a 2b04 	str.w	r2, [sl], #4
 8010582:	f853 2b04 	ldr.w	r2, [r3], #4
 8010586:	459c      	cmp	ip, r3
 8010588:	fa22 f20e 	lsr.w	r2, r2, lr
 801058c:	d8f3      	bhi.n	8010576 <__lshift+0x6e>
 801058e:	ebac 0304 	sub.w	r3, ip, r4
 8010592:	3b15      	subs	r3, #21
 8010594:	f023 0303 	bic.w	r3, r3, #3
 8010598:	3304      	adds	r3, #4
 801059a:	f104 0015 	add.w	r0, r4, #21
 801059e:	4584      	cmp	ip, r0
 80105a0:	bf38      	it	cc
 80105a2:	2304      	movcc	r3, #4
 80105a4:	50ca      	str	r2, [r1, r3]
 80105a6:	b10a      	cbz	r2, 80105ac <__lshift+0xa4>
 80105a8:	f108 0602 	add.w	r6, r8, #2
 80105ac:	3e01      	subs	r6, #1
 80105ae:	4638      	mov	r0, r7
 80105b0:	612e      	str	r6, [r5, #16]
 80105b2:	4621      	mov	r1, r4
 80105b4:	f7ff fd8c 	bl	80100d0 <_Bfree>
 80105b8:	4628      	mov	r0, r5
 80105ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105be:	f842 0f04 	str.w	r0, [r2, #4]!
 80105c2:	3301      	adds	r3, #1
 80105c4:	e7c5      	b.n	8010552 <__lshift+0x4a>
 80105c6:	3904      	subs	r1, #4
 80105c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80105cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80105d0:	459c      	cmp	ip, r3
 80105d2:	d8f9      	bhi.n	80105c8 <__lshift+0xc0>
 80105d4:	e7ea      	b.n	80105ac <__lshift+0xa4>
 80105d6:	bf00      	nop
 80105d8:	08011fec 	.word	0x08011fec
 80105dc:	0801207c 	.word	0x0801207c

080105e0 <__mcmp>:
 80105e0:	b530      	push	{r4, r5, lr}
 80105e2:	6902      	ldr	r2, [r0, #16]
 80105e4:	690c      	ldr	r4, [r1, #16]
 80105e6:	1b12      	subs	r2, r2, r4
 80105e8:	d10e      	bne.n	8010608 <__mcmp+0x28>
 80105ea:	f100 0314 	add.w	r3, r0, #20
 80105ee:	3114      	adds	r1, #20
 80105f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80105f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80105f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80105fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010600:	42a5      	cmp	r5, r4
 8010602:	d003      	beq.n	801060c <__mcmp+0x2c>
 8010604:	d305      	bcc.n	8010612 <__mcmp+0x32>
 8010606:	2201      	movs	r2, #1
 8010608:	4610      	mov	r0, r2
 801060a:	bd30      	pop	{r4, r5, pc}
 801060c:	4283      	cmp	r3, r0
 801060e:	d3f3      	bcc.n	80105f8 <__mcmp+0x18>
 8010610:	e7fa      	b.n	8010608 <__mcmp+0x28>
 8010612:	f04f 32ff 	mov.w	r2, #4294967295
 8010616:	e7f7      	b.n	8010608 <__mcmp+0x28>

08010618 <__mdiff>:
 8010618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061c:	460c      	mov	r4, r1
 801061e:	4606      	mov	r6, r0
 8010620:	4611      	mov	r1, r2
 8010622:	4620      	mov	r0, r4
 8010624:	4617      	mov	r7, r2
 8010626:	f7ff ffdb 	bl	80105e0 <__mcmp>
 801062a:	1e05      	subs	r5, r0, #0
 801062c:	d110      	bne.n	8010650 <__mdiff+0x38>
 801062e:	4629      	mov	r1, r5
 8010630:	4630      	mov	r0, r6
 8010632:	f7ff fd0d 	bl	8010050 <_Balloc>
 8010636:	b930      	cbnz	r0, 8010646 <__mdiff+0x2e>
 8010638:	4b39      	ldr	r3, [pc, #228]	; (8010720 <__mdiff+0x108>)
 801063a:	4602      	mov	r2, r0
 801063c:	f240 2132 	movw	r1, #562	; 0x232
 8010640:	4838      	ldr	r0, [pc, #224]	; (8010724 <__mdiff+0x10c>)
 8010642:	f000 fc0d 	bl	8010e60 <__assert_func>
 8010646:	2301      	movs	r3, #1
 8010648:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801064c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010650:	bfa4      	itt	ge
 8010652:	463b      	movge	r3, r7
 8010654:	4627      	movge	r7, r4
 8010656:	4630      	mov	r0, r6
 8010658:	6879      	ldr	r1, [r7, #4]
 801065a:	bfa6      	itte	ge
 801065c:	461c      	movge	r4, r3
 801065e:	2500      	movge	r5, #0
 8010660:	2501      	movlt	r5, #1
 8010662:	f7ff fcf5 	bl	8010050 <_Balloc>
 8010666:	b920      	cbnz	r0, 8010672 <__mdiff+0x5a>
 8010668:	4b2d      	ldr	r3, [pc, #180]	; (8010720 <__mdiff+0x108>)
 801066a:	4602      	mov	r2, r0
 801066c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010670:	e7e6      	b.n	8010640 <__mdiff+0x28>
 8010672:	693e      	ldr	r6, [r7, #16]
 8010674:	60c5      	str	r5, [r0, #12]
 8010676:	6925      	ldr	r5, [r4, #16]
 8010678:	f107 0114 	add.w	r1, r7, #20
 801067c:	f104 0914 	add.w	r9, r4, #20
 8010680:	f100 0e14 	add.w	lr, r0, #20
 8010684:	f107 0210 	add.w	r2, r7, #16
 8010688:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801068c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010690:	46f2      	mov	sl, lr
 8010692:	2700      	movs	r7, #0
 8010694:	f859 3b04 	ldr.w	r3, [r9], #4
 8010698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801069c:	fa1f f883 	uxth.w	r8, r3
 80106a0:	fa17 f78b 	uxtah	r7, r7, fp
 80106a4:	0c1b      	lsrs	r3, r3, #16
 80106a6:	eba7 0808 	sub.w	r8, r7, r8
 80106aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80106ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80106b2:	fa1f f888 	uxth.w	r8, r8
 80106b6:	141f      	asrs	r7, r3, #16
 80106b8:	454d      	cmp	r5, r9
 80106ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80106be:	f84a 3b04 	str.w	r3, [sl], #4
 80106c2:	d8e7      	bhi.n	8010694 <__mdiff+0x7c>
 80106c4:	1b2b      	subs	r3, r5, r4
 80106c6:	3b15      	subs	r3, #21
 80106c8:	f023 0303 	bic.w	r3, r3, #3
 80106cc:	3304      	adds	r3, #4
 80106ce:	3415      	adds	r4, #21
 80106d0:	42a5      	cmp	r5, r4
 80106d2:	bf38      	it	cc
 80106d4:	2304      	movcc	r3, #4
 80106d6:	4419      	add	r1, r3
 80106d8:	4473      	add	r3, lr
 80106da:	469e      	mov	lr, r3
 80106dc:	460d      	mov	r5, r1
 80106de:	4565      	cmp	r5, ip
 80106e0:	d30e      	bcc.n	8010700 <__mdiff+0xe8>
 80106e2:	f10c 0203 	add.w	r2, ip, #3
 80106e6:	1a52      	subs	r2, r2, r1
 80106e8:	f022 0203 	bic.w	r2, r2, #3
 80106ec:	3903      	subs	r1, #3
 80106ee:	458c      	cmp	ip, r1
 80106f0:	bf38      	it	cc
 80106f2:	2200      	movcc	r2, #0
 80106f4:	441a      	add	r2, r3
 80106f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80106fa:	b17b      	cbz	r3, 801071c <__mdiff+0x104>
 80106fc:	6106      	str	r6, [r0, #16]
 80106fe:	e7a5      	b.n	801064c <__mdiff+0x34>
 8010700:	f855 8b04 	ldr.w	r8, [r5], #4
 8010704:	fa17 f488 	uxtah	r4, r7, r8
 8010708:	1422      	asrs	r2, r4, #16
 801070a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801070e:	b2a4      	uxth	r4, r4
 8010710:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010714:	f84e 4b04 	str.w	r4, [lr], #4
 8010718:	1417      	asrs	r7, r2, #16
 801071a:	e7e0      	b.n	80106de <__mdiff+0xc6>
 801071c:	3e01      	subs	r6, #1
 801071e:	e7ea      	b.n	80106f6 <__mdiff+0xde>
 8010720:	08011fec 	.word	0x08011fec
 8010724:	0801207c 	.word	0x0801207c

08010728 <__ulp>:
 8010728:	b082      	sub	sp, #8
 801072a:	ed8d 0b00 	vstr	d0, [sp]
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	4912      	ldr	r1, [pc, #72]	; (801077c <__ulp+0x54>)
 8010732:	4019      	ands	r1, r3
 8010734:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010738:	2900      	cmp	r1, #0
 801073a:	dd05      	ble.n	8010748 <__ulp+0x20>
 801073c:	2200      	movs	r2, #0
 801073e:	460b      	mov	r3, r1
 8010740:	ec43 2b10 	vmov	d0, r2, r3
 8010744:	b002      	add	sp, #8
 8010746:	4770      	bx	lr
 8010748:	4249      	negs	r1, r1
 801074a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801074e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010752:	f04f 0200 	mov.w	r2, #0
 8010756:	f04f 0300 	mov.w	r3, #0
 801075a:	da04      	bge.n	8010766 <__ulp+0x3e>
 801075c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010760:	fa41 f300 	asr.w	r3, r1, r0
 8010764:	e7ec      	b.n	8010740 <__ulp+0x18>
 8010766:	f1a0 0114 	sub.w	r1, r0, #20
 801076a:	291e      	cmp	r1, #30
 801076c:	bfda      	itte	le
 801076e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010772:	fa20 f101 	lsrle.w	r1, r0, r1
 8010776:	2101      	movgt	r1, #1
 8010778:	460a      	mov	r2, r1
 801077a:	e7e1      	b.n	8010740 <__ulp+0x18>
 801077c:	7ff00000 	.word	0x7ff00000

08010780 <__b2d>:
 8010780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010782:	6905      	ldr	r5, [r0, #16]
 8010784:	f100 0714 	add.w	r7, r0, #20
 8010788:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801078c:	1f2e      	subs	r6, r5, #4
 801078e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010792:	4620      	mov	r0, r4
 8010794:	f7ff fd52 	bl	801023c <__hi0bits>
 8010798:	f1c0 0320 	rsb	r3, r0, #32
 801079c:	280a      	cmp	r0, #10
 801079e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801081c <__b2d+0x9c>
 80107a2:	600b      	str	r3, [r1, #0]
 80107a4:	dc14      	bgt.n	80107d0 <__b2d+0x50>
 80107a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80107aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80107ae:	42b7      	cmp	r7, r6
 80107b0:	ea41 030c 	orr.w	r3, r1, ip
 80107b4:	bf34      	ite	cc
 80107b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80107ba:	2100      	movcs	r1, #0
 80107bc:	3015      	adds	r0, #21
 80107be:	fa04 f000 	lsl.w	r0, r4, r0
 80107c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80107c6:	ea40 0201 	orr.w	r2, r0, r1
 80107ca:	ec43 2b10 	vmov	d0, r2, r3
 80107ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d0:	42b7      	cmp	r7, r6
 80107d2:	bf3a      	itte	cc
 80107d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80107d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80107dc:	2100      	movcs	r1, #0
 80107de:	380b      	subs	r0, #11
 80107e0:	d017      	beq.n	8010812 <__b2d+0x92>
 80107e2:	f1c0 0c20 	rsb	ip, r0, #32
 80107e6:	fa04 f500 	lsl.w	r5, r4, r0
 80107ea:	42be      	cmp	r6, r7
 80107ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80107f0:	ea45 0504 	orr.w	r5, r5, r4
 80107f4:	bf8c      	ite	hi
 80107f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80107fa:	2400      	movls	r4, #0
 80107fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010800:	fa01 f000 	lsl.w	r0, r1, r0
 8010804:	fa24 f40c 	lsr.w	r4, r4, ip
 8010808:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801080c:	ea40 0204 	orr.w	r2, r0, r4
 8010810:	e7db      	b.n	80107ca <__b2d+0x4a>
 8010812:	ea44 030c 	orr.w	r3, r4, ip
 8010816:	460a      	mov	r2, r1
 8010818:	e7d7      	b.n	80107ca <__b2d+0x4a>
 801081a:	bf00      	nop
 801081c:	3ff00000 	.word	0x3ff00000

08010820 <__d2b>:
 8010820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010824:	4689      	mov	r9, r1
 8010826:	2101      	movs	r1, #1
 8010828:	ec57 6b10 	vmov	r6, r7, d0
 801082c:	4690      	mov	r8, r2
 801082e:	f7ff fc0f 	bl	8010050 <_Balloc>
 8010832:	4604      	mov	r4, r0
 8010834:	b930      	cbnz	r0, 8010844 <__d2b+0x24>
 8010836:	4602      	mov	r2, r0
 8010838:	4b25      	ldr	r3, [pc, #148]	; (80108d0 <__d2b+0xb0>)
 801083a:	4826      	ldr	r0, [pc, #152]	; (80108d4 <__d2b+0xb4>)
 801083c:	f240 310a 	movw	r1, #778	; 0x30a
 8010840:	f000 fb0e 	bl	8010e60 <__assert_func>
 8010844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801084c:	bb35      	cbnz	r5, 801089c <__d2b+0x7c>
 801084e:	2e00      	cmp	r6, #0
 8010850:	9301      	str	r3, [sp, #4]
 8010852:	d028      	beq.n	80108a6 <__d2b+0x86>
 8010854:	4668      	mov	r0, sp
 8010856:	9600      	str	r6, [sp, #0]
 8010858:	f7ff fd10 	bl	801027c <__lo0bits>
 801085c:	9900      	ldr	r1, [sp, #0]
 801085e:	b300      	cbz	r0, 80108a2 <__d2b+0x82>
 8010860:	9a01      	ldr	r2, [sp, #4]
 8010862:	f1c0 0320 	rsb	r3, r0, #32
 8010866:	fa02 f303 	lsl.w	r3, r2, r3
 801086a:	430b      	orrs	r3, r1
 801086c:	40c2      	lsrs	r2, r0
 801086e:	6163      	str	r3, [r4, #20]
 8010870:	9201      	str	r2, [sp, #4]
 8010872:	9b01      	ldr	r3, [sp, #4]
 8010874:	61a3      	str	r3, [r4, #24]
 8010876:	2b00      	cmp	r3, #0
 8010878:	bf14      	ite	ne
 801087a:	2202      	movne	r2, #2
 801087c:	2201      	moveq	r2, #1
 801087e:	6122      	str	r2, [r4, #16]
 8010880:	b1d5      	cbz	r5, 80108b8 <__d2b+0x98>
 8010882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010886:	4405      	add	r5, r0
 8010888:	f8c9 5000 	str.w	r5, [r9]
 801088c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010890:	f8c8 0000 	str.w	r0, [r8]
 8010894:	4620      	mov	r0, r4
 8010896:	b003      	add	sp, #12
 8010898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801089c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80108a0:	e7d5      	b.n	801084e <__d2b+0x2e>
 80108a2:	6161      	str	r1, [r4, #20]
 80108a4:	e7e5      	b.n	8010872 <__d2b+0x52>
 80108a6:	a801      	add	r0, sp, #4
 80108a8:	f7ff fce8 	bl	801027c <__lo0bits>
 80108ac:	9b01      	ldr	r3, [sp, #4]
 80108ae:	6163      	str	r3, [r4, #20]
 80108b0:	2201      	movs	r2, #1
 80108b2:	6122      	str	r2, [r4, #16]
 80108b4:	3020      	adds	r0, #32
 80108b6:	e7e3      	b.n	8010880 <__d2b+0x60>
 80108b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80108c0:	f8c9 0000 	str.w	r0, [r9]
 80108c4:	6918      	ldr	r0, [r3, #16]
 80108c6:	f7ff fcb9 	bl	801023c <__hi0bits>
 80108ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108ce:	e7df      	b.n	8010890 <__d2b+0x70>
 80108d0:	08011fec 	.word	0x08011fec
 80108d4:	0801207c 	.word	0x0801207c

080108d8 <__ratio>:
 80108d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108dc:	4688      	mov	r8, r1
 80108de:	4669      	mov	r1, sp
 80108e0:	4681      	mov	r9, r0
 80108e2:	f7ff ff4d 	bl	8010780 <__b2d>
 80108e6:	a901      	add	r1, sp, #4
 80108e8:	4640      	mov	r0, r8
 80108ea:	ec55 4b10 	vmov	r4, r5, d0
 80108ee:	f7ff ff47 	bl	8010780 <__b2d>
 80108f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80108fa:	eba3 0c02 	sub.w	ip, r3, r2
 80108fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010902:	1a9b      	subs	r3, r3, r2
 8010904:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010908:	ec51 0b10 	vmov	r0, r1, d0
 801090c:	2b00      	cmp	r3, #0
 801090e:	bfd6      	itet	le
 8010910:	460a      	movle	r2, r1
 8010912:	462a      	movgt	r2, r5
 8010914:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010918:	468b      	mov	fp, r1
 801091a:	462f      	mov	r7, r5
 801091c:	bfd4      	ite	le
 801091e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010922:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010926:	4620      	mov	r0, r4
 8010928:	ee10 2a10 	vmov	r2, s0
 801092c:	465b      	mov	r3, fp
 801092e:	4639      	mov	r1, r7
 8010930:	f7ef ffac 	bl	800088c <__aeabi_ddiv>
 8010934:	ec41 0b10 	vmov	d0, r0, r1
 8010938:	b003      	add	sp, #12
 801093a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801093e <__copybits>:
 801093e:	3901      	subs	r1, #1
 8010940:	b570      	push	{r4, r5, r6, lr}
 8010942:	1149      	asrs	r1, r1, #5
 8010944:	6914      	ldr	r4, [r2, #16]
 8010946:	3101      	adds	r1, #1
 8010948:	f102 0314 	add.w	r3, r2, #20
 801094c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010954:	1f05      	subs	r5, r0, #4
 8010956:	42a3      	cmp	r3, r4
 8010958:	d30c      	bcc.n	8010974 <__copybits+0x36>
 801095a:	1aa3      	subs	r3, r4, r2
 801095c:	3b11      	subs	r3, #17
 801095e:	f023 0303 	bic.w	r3, r3, #3
 8010962:	3211      	adds	r2, #17
 8010964:	42a2      	cmp	r2, r4
 8010966:	bf88      	it	hi
 8010968:	2300      	movhi	r3, #0
 801096a:	4418      	add	r0, r3
 801096c:	2300      	movs	r3, #0
 801096e:	4288      	cmp	r0, r1
 8010970:	d305      	bcc.n	801097e <__copybits+0x40>
 8010972:	bd70      	pop	{r4, r5, r6, pc}
 8010974:	f853 6b04 	ldr.w	r6, [r3], #4
 8010978:	f845 6f04 	str.w	r6, [r5, #4]!
 801097c:	e7eb      	b.n	8010956 <__copybits+0x18>
 801097e:	f840 3b04 	str.w	r3, [r0], #4
 8010982:	e7f4      	b.n	801096e <__copybits+0x30>

08010984 <__any_on>:
 8010984:	f100 0214 	add.w	r2, r0, #20
 8010988:	6900      	ldr	r0, [r0, #16]
 801098a:	114b      	asrs	r3, r1, #5
 801098c:	4298      	cmp	r0, r3
 801098e:	b510      	push	{r4, lr}
 8010990:	db11      	blt.n	80109b6 <__any_on+0x32>
 8010992:	dd0a      	ble.n	80109aa <__any_on+0x26>
 8010994:	f011 011f 	ands.w	r1, r1, #31
 8010998:	d007      	beq.n	80109aa <__any_on+0x26>
 801099a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801099e:	fa24 f001 	lsr.w	r0, r4, r1
 80109a2:	fa00 f101 	lsl.w	r1, r0, r1
 80109a6:	428c      	cmp	r4, r1
 80109a8:	d10b      	bne.n	80109c2 <__any_on+0x3e>
 80109aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d803      	bhi.n	80109ba <__any_on+0x36>
 80109b2:	2000      	movs	r0, #0
 80109b4:	bd10      	pop	{r4, pc}
 80109b6:	4603      	mov	r3, r0
 80109b8:	e7f7      	b.n	80109aa <__any_on+0x26>
 80109ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80109be:	2900      	cmp	r1, #0
 80109c0:	d0f5      	beq.n	80109ae <__any_on+0x2a>
 80109c2:	2001      	movs	r0, #1
 80109c4:	e7f6      	b.n	80109b4 <__any_on+0x30>

080109c6 <_calloc_r>:
 80109c6:	b513      	push	{r0, r1, r4, lr}
 80109c8:	434a      	muls	r2, r1
 80109ca:	4611      	mov	r1, r2
 80109cc:	9201      	str	r2, [sp, #4]
 80109ce:	f000 f859 	bl	8010a84 <_malloc_r>
 80109d2:	4604      	mov	r4, r0
 80109d4:	b118      	cbz	r0, 80109de <_calloc_r+0x18>
 80109d6:	9a01      	ldr	r2, [sp, #4]
 80109d8:	2100      	movs	r1, #0
 80109da:	f7fc fbc7 	bl	800d16c <memset>
 80109de:	4620      	mov	r0, r4
 80109e0:	b002      	add	sp, #8
 80109e2:	bd10      	pop	{r4, pc}

080109e4 <_free_r>:
 80109e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109e6:	2900      	cmp	r1, #0
 80109e8:	d048      	beq.n	8010a7c <_free_r+0x98>
 80109ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109ee:	9001      	str	r0, [sp, #4]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f1a1 0404 	sub.w	r4, r1, #4
 80109f6:	bfb8      	it	lt
 80109f8:	18e4      	addlt	r4, r4, r3
 80109fa:	f000 fa7b 	bl	8010ef4 <__malloc_lock>
 80109fe:	4a20      	ldr	r2, [pc, #128]	; (8010a80 <_free_r+0x9c>)
 8010a00:	9801      	ldr	r0, [sp, #4]
 8010a02:	6813      	ldr	r3, [r2, #0]
 8010a04:	4615      	mov	r5, r2
 8010a06:	b933      	cbnz	r3, 8010a16 <_free_r+0x32>
 8010a08:	6063      	str	r3, [r4, #4]
 8010a0a:	6014      	str	r4, [r2, #0]
 8010a0c:	b003      	add	sp, #12
 8010a0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a12:	f000 ba75 	b.w	8010f00 <__malloc_unlock>
 8010a16:	42a3      	cmp	r3, r4
 8010a18:	d90b      	bls.n	8010a32 <_free_r+0x4e>
 8010a1a:	6821      	ldr	r1, [r4, #0]
 8010a1c:	1862      	adds	r2, r4, r1
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	bf04      	itt	eq
 8010a22:	681a      	ldreq	r2, [r3, #0]
 8010a24:	685b      	ldreq	r3, [r3, #4]
 8010a26:	6063      	str	r3, [r4, #4]
 8010a28:	bf04      	itt	eq
 8010a2a:	1852      	addeq	r2, r2, r1
 8010a2c:	6022      	streq	r2, [r4, #0]
 8010a2e:	602c      	str	r4, [r5, #0]
 8010a30:	e7ec      	b.n	8010a0c <_free_r+0x28>
 8010a32:	461a      	mov	r2, r3
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	b10b      	cbz	r3, 8010a3c <_free_r+0x58>
 8010a38:	42a3      	cmp	r3, r4
 8010a3a:	d9fa      	bls.n	8010a32 <_free_r+0x4e>
 8010a3c:	6811      	ldr	r1, [r2, #0]
 8010a3e:	1855      	adds	r5, r2, r1
 8010a40:	42a5      	cmp	r5, r4
 8010a42:	d10b      	bne.n	8010a5c <_free_r+0x78>
 8010a44:	6824      	ldr	r4, [r4, #0]
 8010a46:	4421      	add	r1, r4
 8010a48:	1854      	adds	r4, r2, r1
 8010a4a:	42a3      	cmp	r3, r4
 8010a4c:	6011      	str	r1, [r2, #0]
 8010a4e:	d1dd      	bne.n	8010a0c <_free_r+0x28>
 8010a50:	681c      	ldr	r4, [r3, #0]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	6053      	str	r3, [r2, #4]
 8010a56:	4421      	add	r1, r4
 8010a58:	6011      	str	r1, [r2, #0]
 8010a5a:	e7d7      	b.n	8010a0c <_free_r+0x28>
 8010a5c:	d902      	bls.n	8010a64 <_free_r+0x80>
 8010a5e:	230c      	movs	r3, #12
 8010a60:	6003      	str	r3, [r0, #0]
 8010a62:	e7d3      	b.n	8010a0c <_free_r+0x28>
 8010a64:	6825      	ldr	r5, [r4, #0]
 8010a66:	1961      	adds	r1, r4, r5
 8010a68:	428b      	cmp	r3, r1
 8010a6a:	bf04      	itt	eq
 8010a6c:	6819      	ldreq	r1, [r3, #0]
 8010a6e:	685b      	ldreq	r3, [r3, #4]
 8010a70:	6063      	str	r3, [r4, #4]
 8010a72:	bf04      	itt	eq
 8010a74:	1949      	addeq	r1, r1, r5
 8010a76:	6021      	streq	r1, [r4, #0]
 8010a78:	6054      	str	r4, [r2, #4]
 8010a7a:	e7c7      	b.n	8010a0c <_free_r+0x28>
 8010a7c:	b003      	add	sp, #12
 8010a7e:	bd30      	pop	{r4, r5, pc}
 8010a80:	2000025c 	.word	0x2000025c

08010a84 <_malloc_r>:
 8010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a86:	1ccd      	adds	r5, r1, #3
 8010a88:	f025 0503 	bic.w	r5, r5, #3
 8010a8c:	3508      	adds	r5, #8
 8010a8e:	2d0c      	cmp	r5, #12
 8010a90:	bf38      	it	cc
 8010a92:	250c      	movcc	r5, #12
 8010a94:	2d00      	cmp	r5, #0
 8010a96:	4606      	mov	r6, r0
 8010a98:	db01      	blt.n	8010a9e <_malloc_r+0x1a>
 8010a9a:	42a9      	cmp	r1, r5
 8010a9c:	d903      	bls.n	8010aa6 <_malloc_r+0x22>
 8010a9e:	230c      	movs	r3, #12
 8010aa0:	6033      	str	r3, [r6, #0]
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aa6:	f000 fa25 	bl	8010ef4 <__malloc_lock>
 8010aaa:	4921      	ldr	r1, [pc, #132]	; (8010b30 <_malloc_r+0xac>)
 8010aac:	680a      	ldr	r2, [r1, #0]
 8010aae:	4614      	mov	r4, r2
 8010ab0:	b99c      	cbnz	r4, 8010ada <_malloc_r+0x56>
 8010ab2:	4f20      	ldr	r7, [pc, #128]	; (8010b34 <_malloc_r+0xb0>)
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	b923      	cbnz	r3, 8010ac2 <_malloc_r+0x3e>
 8010ab8:	4621      	mov	r1, r4
 8010aba:	4630      	mov	r0, r6
 8010abc:	f000 f9a0 	bl	8010e00 <_sbrk_r>
 8010ac0:	6038      	str	r0, [r7, #0]
 8010ac2:	4629      	mov	r1, r5
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	f000 f99b 	bl	8010e00 <_sbrk_r>
 8010aca:	1c43      	adds	r3, r0, #1
 8010acc:	d123      	bne.n	8010b16 <_malloc_r+0x92>
 8010ace:	230c      	movs	r3, #12
 8010ad0:	6033      	str	r3, [r6, #0]
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f000 fa14 	bl	8010f00 <__malloc_unlock>
 8010ad8:	e7e3      	b.n	8010aa2 <_malloc_r+0x1e>
 8010ada:	6823      	ldr	r3, [r4, #0]
 8010adc:	1b5b      	subs	r3, r3, r5
 8010ade:	d417      	bmi.n	8010b10 <_malloc_r+0x8c>
 8010ae0:	2b0b      	cmp	r3, #11
 8010ae2:	d903      	bls.n	8010aec <_malloc_r+0x68>
 8010ae4:	6023      	str	r3, [r4, #0]
 8010ae6:	441c      	add	r4, r3
 8010ae8:	6025      	str	r5, [r4, #0]
 8010aea:	e004      	b.n	8010af6 <_malloc_r+0x72>
 8010aec:	6863      	ldr	r3, [r4, #4]
 8010aee:	42a2      	cmp	r2, r4
 8010af0:	bf0c      	ite	eq
 8010af2:	600b      	streq	r3, [r1, #0]
 8010af4:	6053      	strne	r3, [r2, #4]
 8010af6:	4630      	mov	r0, r6
 8010af8:	f000 fa02 	bl	8010f00 <__malloc_unlock>
 8010afc:	f104 000b 	add.w	r0, r4, #11
 8010b00:	1d23      	adds	r3, r4, #4
 8010b02:	f020 0007 	bic.w	r0, r0, #7
 8010b06:	1ac2      	subs	r2, r0, r3
 8010b08:	d0cc      	beq.n	8010aa4 <_malloc_r+0x20>
 8010b0a:	1a1b      	subs	r3, r3, r0
 8010b0c:	50a3      	str	r3, [r4, r2]
 8010b0e:	e7c9      	b.n	8010aa4 <_malloc_r+0x20>
 8010b10:	4622      	mov	r2, r4
 8010b12:	6864      	ldr	r4, [r4, #4]
 8010b14:	e7cc      	b.n	8010ab0 <_malloc_r+0x2c>
 8010b16:	1cc4      	adds	r4, r0, #3
 8010b18:	f024 0403 	bic.w	r4, r4, #3
 8010b1c:	42a0      	cmp	r0, r4
 8010b1e:	d0e3      	beq.n	8010ae8 <_malloc_r+0x64>
 8010b20:	1a21      	subs	r1, r4, r0
 8010b22:	4630      	mov	r0, r6
 8010b24:	f000 f96c 	bl	8010e00 <_sbrk_r>
 8010b28:	3001      	adds	r0, #1
 8010b2a:	d1dd      	bne.n	8010ae8 <_malloc_r+0x64>
 8010b2c:	e7cf      	b.n	8010ace <_malloc_r+0x4a>
 8010b2e:	bf00      	nop
 8010b30:	2000025c 	.word	0x2000025c
 8010b34:	20000260 	.word	0x20000260

08010b38 <__ssputs_r>:
 8010b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3c:	688e      	ldr	r6, [r1, #8]
 8010b3e:	429e      	cmp	r6, r3
 8010b40:	4682      	mov	sl, r0
 8010b42:	460c      	mov	r4, r1
 8010b44:	4690      	mov	r8, r2
 8010b46:	461f      	mov	r7, r3
 8010b48:	d838      	bhi.n	8010bbc <__ssputs_r+0x84>
 8010b4a:	898a      	ldrh	r2, [r1, #12]
 8010b4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b50:	d032      	beq.n	8010bb8 <__ssputs_r+0x80>
 8010b52:	6825      	ldr	r5, [r4, #0]
 8010b54:	6909      	ldr	r1, [r1, #16]
 8010b56:	eba5 0901 	sub.w	r9, r5, r1
 8010b5a:	6965      	ldr	r5, [r4, #20]
 8010b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b64:	3301      	adds	r3, #1
 8010b66:	444b      	add	r3, r9
 8010b68:	106d      	asrs	r5, r5, #1
 8010b6a:	429d      	cmp	r5, r3
 8010b6c:	bf38      	it	cc
 8010b6e:	461d      	movcc	r5, r3
 8010b70:	0553      	lsls	r3, r2, #21
 8010b72:	d531      	bpl.n	8010bd8 <__ssputs_r+0xa0>
 8010b74:	4629      	mov	r1, r5
 8010b76:	f7ff ff85 	bl	8010a84 <_malloc_r>
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	b950      	cbnz	r0, 8010b94 <__ssputs_r+0x5c>
 8010b7e:	230c      	movs	r3, #12
 8010b80:	f8ca 3000 	str.w	r3, [sl]
 8010b84:	89a3      	ldrh	r3, [r4, #12]
 8010b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b8a:	81a3      	strh	r3, [r4, #12]
 8010b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b94:	6921      	ldr	r1, [r4, #16]
 8010b96:	464a      	mov	r2, r9
 8010b98:	f7ff fa4c 	bl	8010034 <memcpy>
 8010b9c:	89a3      	ldrh	r3, [r4, #12]
 8010b9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ba6:	81a3      	strh	r3, [r4, #12]
 8010ba8:	6126      	str	r6, [r4, #16]
 8010baa:	6165      	str	r5, [r4, #20]
 8010bac:	444e      	add	r6, r9
 8010bae:	eba5 0509 	sub.w	r5, r5, r9
 8010bb2:	6026      	str	r6, [r4, #0]
 8010bb4:	60a5      	str	r5, [r4, #8]
 8010bb6:	463e      	mov	r6, r7
 8010bb8:	42be      	cmp	r6, r7
 8010bba:	d900      	bls.n	8010bbe <__ssputs_r+0x86>
 8010bbc:	463e      	mov	r6, r7
 8010bbe:	4632      	mov	r2, r6
 8010bc0:	6820      	ldr	r0, [r4, #0]
 8010bc2:	4641      	mov	r1, r8
 8010bc4:	f000 f97c 	bl	8010ec0 <memmove>
 8010bc8:	68a3      	ldr	r3, [r4, #8]
 8010bca:	6822      	ldr	r2, [r4, #0]
 8010bcc:	1b9b      	subs	r3, r3, r6
 8010bce:	4432      	add	r2, r6
 8010bd0:	60a3      	str	r3, [r4, #8]
 8010bd2:	6022      	str	r2, [r4, #0]
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	e7db      	b.n	8010b90 <__ssputs_r+0x58>
 8010bd8:	462a      	mov	r2, r5
 8010bda:	f000 f997 	bl	8010f0c <_realloc_r>
 8010bde:	4606      	mov	r6, r0
 8010be0:	2800      	cmp	r0, #0
 8010be2:	d1e1      	bne.n	8010ba8 <__ssputs_r+0x70>
 8010be4:	6921      	ldr	r1, [r4, #16]
 8010be6:	4650      	mov	r0, sl
 8010be8:	f7ff fefc 	bl	80109e4 <_free_r>
 8010bec:	e7c7      	b.n	8010b7e <__ssputs_r+0x46>
	...

08010bf0 <_svfiprintf_r>:
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	4698      	mov	r8, r3
 8010bf6:	898b      	ldrh	r3, [r1, #12]
 8010bf8:	061b      	lsls	r3, r3, #24
 8010bfa:	b09d      	sub	sp, #116	; 0x74
 8010bfc:	4607      	mov	r7, r0
 8010bfe:	460d      	mov	r5, r1
 8010c00:	4614      	mov	r4, r2
 8010c02:	d50e      	bpl.n	8010c22 <_svfiprintf_r+0x32>
 8010c04:	690b      	ldr	r3, [r1, #16]
 8010c06:	b963      	cbnz	r3, 8010c22 <_svfiprintf_r+0x32>
 8010c08:	2140      	movs	r1, #64	; 0x40
 8010c0a:	f7ff ff3b 	bl	8010a84 <_malloc_r>
 8010c0e:	6028      	str	r0, [r5, #0]
 8010c10:	6128      	str	r0, [r5, #16]
 8010c12:	b920      	cbnz	r0, 8010c1e <_svfiprintf_r+0x2e>
 8010c14:	230c      	movs	r3, #12
 8010c16:	603b      	str	r3, [r7, #0]
 8010c18:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1c:	e0d1      	b.n	8010dc2 <_svfiprintf_r+0x1d2>
 8010c1e:	2340      	movs	r3, #64	; 0x40
 8010c20:	616b      	str	r3, [r5, #20]
 8010c22:	2300      	movs	r3, #0
 8010c24:	9309      	str	r3, [sp, #36]	; 0x24
 8010c26:	2320      	movs	r3, #32
 8010c28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c30:	2330      	movs	r3, #48	; 0x30
 8010c32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010ddc <_svfiprintf_r+0x1ec>
 8010c36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c3a:	f04f 0901 	mov.w	r9, #1
 8010c3e:	4623      	mov	r3, r4
 8010c40:	469a      	mov	sl, r3
 8010c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c46:	b10a      	cbz	r2, 8010c4c <_svfiprintf_r+0x5c>
 8010c48:	2a25      	cmp	r2, #37	; 0x25
 8010c4a:	d1f9      	bne.n	8010c40 <_svfiprintf_r+0x50>
 8010c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8010c50:	d00b      	beq.n	8010c6a <_svfiprintf_r+0x7a>
 8010c52:	465b      	mov	r3, fp
 8010c54:	4622      	mov	r2, r4
 8010c56:	4629      	mov	r1, r5
 8010c58:	4638      	mov	r0, r7
 8010c5a:	f7ff ff6d 	bl	8010b38 <__ssputs_r>
 8010c5e:	3001      	adds	r0, #1
 8010c60:	f000 80aa 	beq.w	8010db8 <_svfiprintf_r+0x1c8>
 8010c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c66:	445a      	add	r2, fp
 8010c68:	9209      	str	r2, [sp, #36]	; 0x24
 8010c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f000 80a2 	beq.w	8010db8 <_svfiprintf_r+0x1c8>
 8010c74:	2300      	movs	r3, #0
 8010c76:	f04f 32ff 	mov.w	r2, #4294967295
 8010c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c7e:	f10a 0a01 	add.w	sl, sl, #1
 8010c82:	9304      	str	r3, [sp, #16]
 8010c84:	9307      	str	r3, [sp, #28]
 8010c86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c8a:	931a      	str	r3, [sp, #104]	; 0x68
 8010c8c:	4654      	mov	r4, sl
 8010c8e:	2205      	movs	r2, #5
 8010c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c94:	4851      	ldr	r0, [pc, #324]	; (8010ddc <_svfiprintf_r+0x1ec>)
 8010c96:	f7ef fac3 	bl	8000220 <memchr>
 8010c9a:	9a04      	ldr	r2, [sp, #16]
 8010c9c:	b9d8      	cbnz	r0, 8010cd6 <_svfiprintf_r+0xe6>
 8010c9e:	06d0      	lsls	r0, r2, #27
 8010ca0:	bf44      	itt	mi
 8010ca2:	2320      	movmi	r3, #32
 8010ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ca8:	0711      	lsls	r1, r2, #28
 8010caa:	bf44      	itt	mi
 8010cac:	232b      	movmi	r3, #43	; 0x2b
 8010cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8010cb8:	d015      	beq.n	8010ce6 <_svfiprintf_r+0xf6>
 8010cba:	9a07      	ldr	r2, [sp, #28]
 8010cbc:	4654      	mov	r4, sl
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	f04f 0c0a 	mov.w	ip, #10
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cca:	3b30      	subs	r3, #48	; 0x30
 8010ccc:	2b09      	cmp	r3, #9
 8010cce:	d94e      	bls.n	8010d6e <_svfiprintf_r+0x17e>
 8010cd0:	b1b0      	cbz	r0, 8010d00 <_svfiprintf_r+0x110>
 8010cd2:	9207      	str	r2, [sp, #28]
 8010cd4:	e014      	b.n	8010d00 <_svfiprintf_r+0x110>
 8010cd6:	eba0 0308 	sub.w	r3, r0, r8
 8010cda:	fa09 f303 	lsl.w	r3, r9, r3
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	9304      	str	r3, [sp, #16]
 8010ce2:	46a2      	mov	sl, r4
 8010ce4:	e7d2      	b.n	8010c8c <_svfiprintf_r+0x9c>
 8010ce6:	9b03      	ldr	r3, [sp, #12]
 8010ce8:	1d19      	adds	r1, r3, #4
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	9103      	str	r1, [sp, #12]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	bfbb      	ittet	lt
 8010cf2:	425b      	neglt	r3, r3
 8010cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8010cf8:	9307      	strge	r3, [sp, #28]
 8010cfa:	9307      	strlt	r3, [sp, #28]
 8010cfc:	bfb8      	it	lt
 8010cfe:	9204      	strlt	r2, [sp, #16]
 8010d00:	7823      	ldrb	r3, [r4, #0]
 8010d02:	2b2e      	cmp	r3, #46	; 0x2e
 8010d04:	d10c      	bne.n	8010d20 <_svfiprintf_r+0x130>
 8010d06:	7863      	ldrb	r3, [r4, #1]
 8010d08:	2b2a      	cmp	r3, #42	; 0x2a
 8010d0a:	d135      	bne.n	8010d78 <_svfiprintf_r+0x188>
 8010d0c:	9b03      	ldr	r3, [sp, #12]
 8010d0e:	1d1a      	adds	r2, r3, #4
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	9203      	str	r2, [sp, #12]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	bfb8      	it	lt
 8010d18:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d1c:	3402      	adds	r4, #2
 8010d1e:	9305      	str	r3, [sp, #20]
 8010d20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010dec <_svfiprintf_r+0x1fc>
 8010d24:	7821      	ldrb	r1, [r4, #0]
 8010d26:	2203      	movs	r2, #3
 8010d28:	4650      	mov	r0, sl
 8010d2a:	f7ef fa79 	bl	8000220 <memchr>
 8010d2e:	b140      	cbz	r0, 8010d42 <_svfiprintf_r+0x152>
 8010d30:	2340      	movs	r3, #64	; 0x40
 8010d32:	eba0 000a 	sub.w	r0, r0, sl
 8010d36:	fa03 f000 	lsl.w	r0, r3, r0
 8010d3a:	9b04      	ldr	r3, [sp, #16]
 8010d3c:	4303      	orrs	r3, r0
 8010d3e:	3401      	adds	r4, #1
 8010d40:	9304      	str	r3, [sp, #16]
 8010d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d46:	4826      	ldr	r0, [pc, #152]	; (8010de0 <_svfiprintf_r+0x1f0>)
 8010d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d4c:	2206      	movs	r2, #6
 8010d4e:	f7ef fa67 	bl	8000220 <memchr>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	d038      	beq.n	8010dc8 <_svfiprintf_r+0x1d8>
 8010d56:	4b23      	ldr	r3, [pc, #140]	; (8010de4 <_svfiprintf_r+0x1f4>)
 8010d58:	bb1b      	cbnz	r3, 8010da2 <_svfiprintf_r+0x1b2>
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	3307      	adds	r3, #7
 8010d5e:	f023 0307 	bic.w	r3, r3, #7
 8010d62:	3308      	adds	r3, #8
 8010d64:	9303      	str	r3, [sp, #12]
 8010d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d68:	4433      	add	r3, r6
 8010d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6c:	e767      	b.n	8010c3e <_svfiprintf_r+0x4e>
 8010d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d72:	460c      	mov	r4, r1
 8010d74:	2001      	movs	r0, #1
 8010d76:	e7a5      	b.n	8010cc4 <_svfiprintf_r+0xd4>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	3401      	adds	r4, #1
 8010d7c:	9305      	str	r3, [sp, #20]
 8010d7e:	4619      	mov	r1, r3
 8010d80:	f04f 0c0a 	mov.w	ip, #10
 8010d84:	4620      	mov	r0, r4
 8010d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d8a:	3a30      	subs	r2, #48	; 0x30
 8010d8c:	2a09      	cmp	r2, #9
 8010d8e:	d903      	bls.n	8010d98 <_svfiprintf_r+0x1a8>
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d0c5      	beq.n	8010d20 <_svfiprintf_r+0x130>
 8010d94:	9105      	str	r1, [sp, #20]
 8010d96:	e7c3      	b.n	8010d20 <_svfiprintf_r+0x130>
 8010d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	2301      	movs	r3, #1
 8010da0:	e7f0      	b.n	8010d84 <_svfiprintf_r+0x194>
 8010da2:	ab03      	add	r3, sp, #12
 8010da4:	9300      	str	r3, [sp, #0]
 8010da6:	462a      	mov	r2, r5
 8010da8:	4b0f      	ldr	r3, [pc, #60]	; (8010de8 <_svfiprintf_r+0x1f8>)
 8010daa:	a904      	add	r1, sp, #16
 8010dac:	4638      	mov	r0, r7
 8010dae:	f7fc fa85 	bl	800d2bc <_printf_float>
 8010db2:	1c42      	adds	r2, r0, #1
 8010db4:	4606      	mov	r6, r0
 8010db6:	d1d6      	bne.n	8010d66 <_svfiprintf_r+0x176>
 8010db8:	89ab      	ldrh	r3, [r5, #12]
 8010dba:	065b      	lsls	r3, r3, #25
 8010dbc:	f53f af2c 	bmi.w	8010c18 <_svfiprintf_r+0x28>
 8010dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dc2:	b01d      	add	sp, #116	; 0x74
 8010dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc8:	ab03      	add	r3, sp, #12
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	462a      	mov	r2, r5
 8010dce:	4b06      	ldr	r3, [pc, #24]	; (8010de8 <_svfiprintf_r+0x1f8>)
 8010dd0:	a904      	add	r1, sp, #16
 8010dd2:	4638      	mov	r0, r7
 8010dd4:	f7fc fd16 	bl	800d804 <_printf_i>
 8010dd8:	e7eb      	b.n	8010db2 <_svfiprintf_r+0x1c2>
 8010dda:	bf00      	nop
 8010ddc:	080121dc 	.word	0x080121dc
 8010de0:	080121e6 	.word	0x080121e6
 8010de4:	0800d2bd 	.word	0x0800d2bd
 8010de8:	08010b39 	.word	0x08010b39
 8010dec:	080121e2 	.word	0x080121e2

08010df0 <nan>:
 8010df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010df8 <nan+0x8>
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	00000000 	.word	0x00000000
 8010dfc:	7ff80000 	.word	0x7ff80000

08010e00 <_sbrk_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4d06      	ldr	r5, [pc, #24]	; (8010e1c <_sbrk_r+0x1c>)
 8010e04:	2300      	movs	r3, #0
 8010e06:	4604      	mov	r4, r0
 8010e08:	4608      	mov	r0, r1
 8010e0a:	602b      	str	r3, [r5, #0]
 8010e0c:	f7f2 fef6 	bl	8003bfc <_sbrk>
 8010e10:	1c43      	adds	r3, r0, #1
 8010e12:	d102      	bne.n	8010e1a <_sbrk_r+0x1a>
 8010e14:	682b      	ldr	r3, [r5, #0]
 8010e16:	b103      	cbz	r3, 8010e1a <_sbrk_r+0x1a>
 8010e18:	6023      	str	r3, [r4, #0]
 8010e1a:	bd38      	pop	{r3, r4, r5, pc}
 8010e1c:	20000958 	.word	0x20000958

08010e20 <strncmp>:
 8010e20:	b510      	push	{r4, lr}
 8010e22:	b16a      	cbz	r2, 8010e40 <strncmp+0x20>
 8010e24:	3901      	subs	r1, #1
 8010e26:	1884      	adds	r4, r0, r2
 8010e28:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010e2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d103      	bne.n	8010e3c <strncmp+0x1c>
 8010e34:	42a0      	cmp	r0, r4
 8010e36:	d001      	beq.n	8010e3c <strncmp+0x1c>
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1f5      	bne.n	8010e28 <strncmp+0x8>
 8010e3c:	1a98      	subs	r0, r3, r2
 8010e3e:	bd10      	pop	{r4, pc}
 8010e40:	4610      	mov	r0, r2
 8010e42:	e7fc      	b.n	8010e3e <strncmp+0x1e>

08010e44 <__ascii_wctomb>:
 8010e44:	b149      	cbz	r1, 8010e5a <__ascii_wctomb+0x16>
 8010e46:	2aff      	cmp	r2, #255	; 0xff
 8010e48:	bf85      	ittet	hi
 8010e4a:	238a      	movhi	r3, #138	; 0x8a
 8010e4c:	6003      	strhi	r3, [r0, #0]
 8010e4e:	700a      	strbls	r2, [r1, #0]
 8010e50:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e54:	bf98      	it	ls
 8010e56:	2001      	movls	r0, #1
 8010e58:	4770      	bx	lr
 8010e5a:	4608      	mov	r0, r1
 8010e5c:	4770      	bx	lr
	...

08010e60 <__assert_func>:
 8010e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e62:	4614      	mov	r4, r2
 8010e64:	461a      	mov	r2, r3
 8010e66:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <__assert_func+0x2c>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	68d8      	ldr	r0, [r3, #12]
 8010e6e:	b14c      	cbz	r4, 8010e84 <__assert_func+0x24>
 8010e70:	4b07      	ldr	r3, [pc, #28]	; (8010e90 <__assert_func+0x30>)
 8010e72:	9100      	str	r1, [sp, #0]
 8010e74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e78:	4906      	ldr	r1, [pc, #24]	; (8010e94 <__assert_func+0x34>)
 8010e7a:	462b      	mov	r3, r5
 8010e7c:	f000 f80e 	bl	8010e9c <fiprintf>
 8010e80:	f000 fa84 	bl	801138c <abort>
 8010e84:	4b04      	ldr	r3, [pc, #16]	; (8010e98 <__assert_func+0x38>)
 8010e86:	461c      	mov	r4, r3
 8010e88:	e7f3      	b.n	8010e72 <__assert_func+0x12>
 8010e8a:	bf00      	nop
 8010e8c:	20000034 	.word	0x20000034
 8010e90:	080121ed 	.word	0x080121ed
 8010e94:	080121fa 	.word	0x080121fa
 8010e98:	08012228 	.word	0x08012228

08010e9c <fiprintf>:
 8010e9c:	b40e      	push	{r1, r2, r3}
 8010e9e:	b503      	push	{r0, r1, lr}
 8010ea0:	4601      	mov	r1, r0
 8010ea2:	ab03      	add	r3, sp, #12
 8010ea4:	4805      	ldr	r0, [pc, #20]	; (8010ebc <fiprintf+0x20>)
 8010ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eaa:	6800      	ldr	r0, [r0, #0]
 8010eac:	9301      	str	r3, [sp, #4]
 8010eae:	f000 f87d 	bl	8010fac <_vfiprintf_r>
 8010eb2:	b002      	add	sp, #8
 8010eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010eb8:	b003      	add	sp, #12
 8010eba:	4770      	bx	lr
 8010ebc:	20000034 	.word	0x20000034

08010ec0 <memmove>:
 8010ec0:	4288      	cmp	r0, r1
 8010ec2:	b510      	push	{r4, lr}
 8010ec4:	eb01 0402 	add.w	r4, r1, r2
 8010ec8:	d902      	bls.n	8010ed0 <memmove+0x10>
 8010eca:	4284      	cmp	r4, r0
 8010ecc:	4623      	mov	r3, r4
 8010ece:	d807      	bhi.n	8010ee0 <memmove+0x20>
 8010ed0:	1e43      	subs	r3, r0, #1
 8010ed2:	42a1      	cmp	r1, r4
 8010ed4:	d008      	beq.n	8010ee8 <memmove+0x28>
 8010ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ede:	e7f8      	b.n	8010ed2 <memmove+0x12>
 8010ee0:	4402      	add	r2, r0
 8010ee2:	4601      	mov	r1, r0
 8010ee4:	428a      	cmp	r2, r1
 8010ee6:	d100      	bne.n	8010eea <memmove+0x2a>
 8010ee8:	bd10      	pop	{r4, pc}
 8010eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ef2:	e7f7      	b.n	8010ee4 <memmove+0x24>

08010ef4 <__malloc_lock>:
 8010ef4:	4801      	ldr	r0, [pc, #4]	; (8010efc <__malloc_lock+0x8>)
 8010ef6:	f000 bc09 	b.w	801170c <__retarget_lock_acquire_recursive>
 8010efa:	bf00      	nop
 8010efc:	20000960 	.word	0x20000960

08010f00 <__malloc_unlock>:
 8010f00:	4801      	ldr	r0, [pc, #4]	; (8010f08 <__malloc_unlock+0x8>)
 8010f02:	f000 bc04 	b.w	801170e <__retarget_lock_release_recursive>
 8010f06:	bf00      	nop
 8010f08:	20000960 	.word	0x20000960

08010f0c <_realloc_r>:
 8010f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f0e:	4607      	mov	r7, r0
 8010f10:	4614      	mov	r4, r2
 8010f12:	460e      	mov	r6, r1
 8010f14:	b921      	cbnz	r1, 8010f20 <_realloc_r+0x14>
 8010f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010f1a:	4611      	mov	r1, r2
 8010f1c:	f7ff bdb2 	b.w	8010a84 <_malloc_r>
 8010f20:	b922      	cbnz	r2, 8010f2c <_realloc_r+0x20>
 8010f22:	f7ff fd5f 	bl	80109e4 <_free_r>
 8010f26:	4625      	mov	r5, r4
 8010f28:	4628      	mov	r0, r5
 8010f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f2c:	f000 fc54 	bl	80117d8 <_malloc_usable_size_r>
 8010f30:	42a0      	cmp	r0, r4
 8010f32:	d20f      	bcs.n	8010f54 <_realloc_r+0x48>
 8010f34:	4621      	mov	r1, r4
 8010f36:	4638      	mov	r0, r7
 8010f38:	f7ff fda4 	bl	8010a84 <_malloc_r>
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	d0f2      	beq.n	8010f28 <_realloc_r+0x1c>
 8010f42:	4631      	mov	r1, r6
 8010f44:	4622      	mov	r2, r4
 8010f46:	f7ff f875 	bl	8010034 <memcpy>
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	4638      	mov	r0, r7
 8010f4e:	f7ff fd49 	bl	80109e4 <_free_r>
 8010f52:	e7e9      	b.n	8010f28 <_realloc_r+0x1c>
 8010f54:	4635      	mov	r5, r6
 8010f56:	e7e7      	b.n	8010f28 <_realloc_r+0x1c>

08010f58 <__sfputc_r>:
 8010f58:	6893      	ldr	r3, [r2, #8]
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	b410      	push	{r4}
 8010f60:	6093      	str	r3, [r2, #8]
 8010f62:	da08      	bge.n	8010f76 <__sfputc_r+0x1e>
 8010f64:	6994      	ldr	r4, [r2, #24]
 8010f66:	42a3      	cmp	r3, r4
 8010f68:	db01      	blt.n	8010f6e <__sfputc_r+0x16>
 8010f6a:	290a      	cmp	r1, #10
 8010f6c:	d103      	bne.n	8010f76 <__sfputc_r+0x1e>
 8010f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f72:	f000 b94b 	b.w	801120c <__swbuf_r>
 8010f76:	6813      	ldr	r3, [r2, #0]
 8010f78:	1c58      	adds	r0, r3, #1
 8010f7a:	6010      	str	r0, [r2, #0]
 8010f7c:	7019      	strb	r1, [r3, #0]
 8010f7e:	4608      	mov	r0, r1
 8010f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <__sfputs_r>:
 8010f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f88:	4606      	mov	r6, r0
 8010f8a:	460f      	mov	r7, r1
 8010f8c:	4614      	mov	r4, r2
 8010f8e:	18d5      	adds	r5, r2, r3
 8010f90:	42ac      	cmp	r4, r5
 8010f92:	d101      	bne.n	8010f98 <__sfputs_r+0x12>
 8010f94:	2000      	movs	r0, #0
 8010f96:	e007      	b.n	8010fa8 <__sfputs_r+0x22>
 8010f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f9c:	463a      	mov	r2, r7
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f7ff ffda 	bl	8010f58 <__sfputc_r>
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	d1f3      	bne.n	8010f90 <__sfputs_r+0xa>
 8010fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010fac <_vfiprintf_r>:
 8010fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb0:	460d      	mov	r5, r1
 8010fb2:	b09d      	sub	sp, #116	; 0x74
 8010fb4:	4614      	mov	r4, r2
 8010fb6:	4698      	mov	r8, r3
 8010fb8:	4606      	mov	r6, r0
 8010fba:	b118      	cbz	r0, 8010fc4 <_vfiprintf_r+0x18>
 8010fbc:	6983      	ldr	r3, [r0, #24]
 8010fbe:	b90b      	cbnz	r3, 8010fc4 <_vfiprintf_r+0x18>
 8010fc0:	f000 fb06 	bl	80115d0 <__sinit>
 8010fc4:	4b89      	ldr	r3, [pc, #548]	; (80111ec <_vfiprintf_r+0x240>)
 8010fc6:	429d      	cmp	r5, r3
 8010fc8:	d11b      	bne.n	8011002 <_vfiprintf_r+0x56>
 8010fca:	6875      	ldr	r5, [r6, #4]
 8010fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fce:	07d9      	lsls	r1, r3, #31
 8010fd0:	d405      	bmi.n	8010fde <_vfiprintf_r+0x32>
 8010fd2:	89ab      	ldrh	r3, [r5, #12]
 8010fd4:	059a      	lsls	r2, r3, #22
 8010fd6:	d402      	bmi.n	8010fde <_vfiprintf_r+0x32>
 8010fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fda:	f000 fb97 	bl	801170c <__retarget_lock_acquire_recursive>
 8010fde:	89ab      	ldrh	r3, [r5, #12]
 8010fe0:	071b      	lsls	r3, r3, #28
 8010fe2:	d501      	bpl.n	8010fe8 <_vfiprintf_r+0x3c>
 8010fe4:	692b      	ldr	r3, [r5, #16]
 8010fe6:	b9eb      	cbnz	r3, 8011024 <_vfiprintf_r+0x78>
 8010fe8:	4629      	mov	r1, r5
 8010fea:	4630      	mov	r0, r6
 8010fec:	f000 f960 	bl	80112b0 <__swsetup_r>
 8010ff0:	b1c0      	cbz	r0, 8011024 <_vfiprintf_r+0x78>
 8010ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ff4:	07dc      	lsls	r4, r3, #31
 8010ff6:	d50e      	bpl.n	8011016 <_vfiprintf_r+0x6a>
 8010ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ffc:	b01d      	add	sp, #116	; 0x74
 8010ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011002:	4b7b      	ldr	r3, [pc, #492]	; (80111f0 <_vfiprintf_r+0x244>)
 8011004:	429d      	cmp	r5, r3
 8011006:	d101      	bne.n	801100c <_vfiprintf_r+0x60>
 8011008:	68b5      	ldr	r5, [r6, #8]
 801100a:	e7df      	b.n	8010fcc <_vfiprintf_r+0x20>
 801100c:	4b79      	ldr	r3, [pc, #484]	; (80111f4 <_vfiprintf_r+0x248>)
 801100e:	429d      	cmp	r5, r3
 8011010:	bf08      	it	eq
 8011012:	68f5      	ldreq	r5, [r6, #12]
 8011014:	e7da      	b.n	8010fcc <_vfiprintf_r+0x20>
 8011016:	89ab      	ldrh	r3, [r5, #12]
 8011018:	0598      	lsls	r0, r3, #22
 801101a:	d4ed      	bmi.n	8010ff8 <_vfiprintf_r+0x4c>
 801101c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801101e:	f000 fb76 	bl	801170e <__retarget_lock_release_recursive>
 8011022:	e7e9      	b.n	8010ff8 <_vfiprintf_r+0x4c>
 8011024:	2300      	movs	r3, #0
 8011026:	9309      	str	r3, [sp, #36]	; 0x24
 8011028:	2320      	movs	r3, #32
 801102a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801102e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011032:	2330      	movs	r3, #48	; 0x30
 8011034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80111f8 <_vfiprintf_r+0x24c>
 8011038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801103c:	f04f 0901 	mov.w	r9, #1
 8011040:	4623      	mov	r3, r4
 8011042:	469a      	mov	sl, r3
 8011044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011048:	b10a      	cbz	r2, 801104e <_vfiprintf_r+0xa2>
 801104a:	2a25      	cmp	r2, #37	; 0x25
 801104c:	d1f9      	bne.n	8011042 <_vfiprintf_r+0x96>
 801104e:	ebba 0b04 	subs.w	fp, sl, r4
 8011052:	d00b      	beq.n	801106c <_vfiprintf_r+0xc0>
 8011054:	465b      	mov	r3, fp
 8011056:	4622      	mov	r2, r4
 8011058:	4629      	mov	r1, r5
 801105a:	4630      	mov	r0, r6
 801105c:	f7ff ff93 	bl	8010f86 <__sfputs_r>
 8011060:	3001      	adds	r0, #1
 8011062:	f000 80aa 	beq.w	80111ba <_vfiprintf_r+0x20e>
 8011066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011068:	445a      	add	r2, fp
 801106a:	9209      	str	r2, [sp, #36]	; 0x24
 801106c:	f89a 3000 	ldrb.w	r3, [sl]
 8011070:	2b00      	cmp	r3, #0
 8011072:	f000 80a2 	beq.w	80111ba <_vfiprintf_r+0x20e>
 8011076:	2300      	movs	r3, #0
 8011078:	f04f 32ff 	mov.w	r2, #4294967295
 801107c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011080:	f10a 0a01 	add.w	sl, sl, #1
 8011084:	9304      	str	r3, [sp, #16]
 8011086:	9307      	str	r3, [sp, #28]
 8011088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801108c:	931a      	str	r3, [sp, #104]	; 0x68
 801108e:	4654      	mov	r4, sl
 8011090:	2205      	movs	r2, #5
 8011092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011096:	4858      	ldr	r0, [pc, #352]	; (80111f8 <_vfiprintf_r+0x24c>)
 8011098:	f7ef f8c2 	bl	8000220 <memchr>
 801109c:	9a04      	ldr	r2, [sp, #16]
 801109e:	b9d8      	cbnz	r0, 80110d8 <_vfiprintf_r+0x12c>
 80110a0:	06d1      	lsls	r1, r2, #27
 80110a2:	bf44      	itt	mi
 80110a4:	2320      	movmi	r3, #32
 80110a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110aa:	0713      	lsls	r3, r2, #28
 80110ac:	bf44      	itt	mi
 80110ae:	232b      	movmi	r3, #43	; 0x2b
 80110b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110b4:	f89a 3000 	ldrb.w	r3, [sl]
 80110b8:	2b2a      	cmp	r3, #42	; 0x2a
 80110ba:	d015      	beq.n	80110e8 <_vfiprintf_r+0x13c>
 80110bc:	9a07      	ldr	r2, [sp, #28]
 80110be:	4654      	mov	r4, sl
 80110c0:	2000      	movs	r0, #0
 80110c2:	f04f 0c0a 	mov.w	ip, #10
 80110c6:	4621      	mov	r1, r4
 80110c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110cc:	3b30      	subs	r3, #48	; 0x30
 80110ce:	2b09      	cmp	r3, #9
 80110d0:	d94e      	bls.n	8011170 <_vfiprintf_r+0x1c4>
 80110d2:	b1b0      	cbz	r0, 8011102 <_vfiprintf_r+0x156>
 80110d4:	9207      	str	r2, [sp, #28]
 80110d6:	e014      	b.n	8011102 <_vfiprintf_r+0x156>
 80110d8:	eba0 0308 	sub.w	r3, r0, r8
 80110dc:	fa09 f303 	lsl.w	r3, r9, r3
 80110e0:	4313      	orrs	r3, r2
 80110e2:	9304      	str	r3, [sp, #16]
 80110e4:	46a2      	mov	sl, r4
 80110e6:	e7d2      	b.n	801108e <_vfiprintf_r+0xe2>
 80110e8:	9b03      	ldr	r3, [sp, #12]
 80110ea:	1d19      	adds	r1, r3, #4
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	9103      	str	r1, [sp, #12]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	bfbb      	ittet	lt
 80110f4:	425b      	neglt	r3, r3
 80110f6:	f042 0202 	orrlt.w	r2, r2, #2
 80110fa:	9307      	strge	r3, [sp, #28]
 80110fc:	9307      	strlt	r3, [sp, #28]
 80110fe:	bfb8      	it	lt
 8011100:	9204      	strlt	r2, [sp, #16]
 8011102:	7823      	ldrb	r3, [r4, #0]
 8011104:	2b2e      	cmp	r3, #46	; 0x2e
 8011106:	d10c      	bne.n	8011122 <_vfiprintf_r+0x176>
 8011108:	7863      	ldrb	r3, [r4, #1]
 801110a:	2b2a      	cmp	r3, #42	; 0x2a
 801110c:	d135      	bne.n	801117a <_vfiprintf_r+0x1ce>
 801110e:	9b03      	ldr	r3, [sp, #12]
 8011110:	1d1a      	adds	r2, r3, #4
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	9203      	str	r2, [sp, #12]
 8011116:	2b00      	cmp	r3, #0
 8011118:	bfb8      	it	lt
 801111a:	f04f 33ff 	movlt.w	r3, #4294967295
 801111e:	3402      	adds	r4, #2
 8011120:	9305      	str	r3, [sp, #20]
 8011122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011208 <_vfiprintf_r+0x25c>
 8011126:	7821      	ldrb	r1, [r4, #0]
 8011128:	2203      	movs	r2, #3
 801112a:	4650      	mov	r0, sl
 801112c:	f7ef f878 	bl	8000220 <memchr>
 8011130:	b140      	cbz	r0, 8011144 <_vfiprintf_r+0x198>
 8011132:	2340      	movs	r3, #64	; 0x40
 8011134:	eba0 000a 	sub.w	r0, r0, sl
 8011138:	fa03 f000 	lsl.w	r0, r3, r0
 801113c:	9b04      	ldr	r3, [sp, #16]
 801113e:	4303      	orrs	r3, r0
 8011140:	3401      	adds	r4, #1
 8011142:	9304      	str	r3, [sp, #16]
 8011144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011148:	482c      	ldr	r0, [pc, #176]	; (80111fc <_vfiprintf_r+0x250>)
 801114a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801114e:	2206      	movs	r2, #6
 8011150:	f7ef f866 	bl	8000220 <memchr>
 8011154:	2800      	cmp	r0, #0
 8011156:	d03f      	beq.n	80111d8 <_vfiprintf_r+0x22c>
 8011158:	4b29      	ldr	r3, [pc, #164]	; (8011200 <_vfiprintf_r+0x254>)
 801115a:	bb1b      	cbnz	r3, 80111a4 <_vfiprintf_r+0x1f8>
 801115c:	9b03      	ldr	r3, [sp, #12]
 801115e:	3307      	adds	r3, #7
 8011160:	f023 0307 	bic.w	r3, r3, #7
 8011164:	3308      	adds	r3, #8
 8011166:	9303      	str	r3, [sp, #12]
 8011168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801116a:	443b      	add	r3, r7
 801116c:	9309      	str	r3, [sp, #36]	; 0x24
 801116e:	e767      	b.n	8011040 <_vfiprintf_r+0x94>
 8011170:	fb0c 3202 	mla	r2, ip, r2, r3
 8011174:	460c      	mov	r4, r1
 8011176:	2001      	movs	r0, #1
 8011178:	e7a5      	b.n	80110c6 <_vfiprintf_r+0x11a>
 801117a:	2300      	movs	r3, #0
 801117c:	3401      	adds	r4, #1
 801117e:	9305      	str	r3, [sp, #20]
 8011180:	4619      	mov	r1, r3
 8011182:	f04f 0c0a 	mov.w	ip, #10
 8011186:	4620      	mov	r0, r4
 8011188:	f810 2b01 	ldrb.w	r2, [r0], #1
 801118c:	3a30      	subs	r2, #48	; 0x30
 801118e:	2a09      	cmp	r2, #9
 8011190:	d903      	bls.n	801119a <_vfiprintf_r+0x1ee>
 8011192:	2b00      	cmp	r3, #0
 8011194:	d0c5      	beq.n	8011122 <_vfiprintf_r+0x176>
 8011196:	9105      	str	r1, [sp, #20]
 8011198:	e7c3      	b.n	8011122 <_vfiprintf_r+0x176>
 801119a:	fb0c 2101 	mla	r1, ip, r1, r2
 801119e:	4604      	mov	r4, r0
 80111a0:	2301      	movs	r3, #1
 80111a2:	e7f0      	b.n	8011186 <_vfiprintf_r+0x1da>
 80111a4:	ab03      	add	r3, sp, #12
 80111a6:	9300      	str	r3, [sp, #0]
 80111a8:	462a      	mov	r2, r5
 80111aa:	4b16      	ldr	r3, [pc, #88]	; (8011204 <_vfiprintf_r+0x258>)
 80111ac:	a904      	add	r1, sp, #16
 80111ae:	4630      	mov	r0, r6
 80111b0:	f7fc f884 	bl	800d2bc <_printf_float>
 80111b4:	4607      	mov	r7, r0
 80111b6:	1c78      	adds	r0, r7, #1
 80111b8:	d1d6      	bne.n	8011168 <_vfiprintf_r+0x1bc>
 80111ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111bc:	07d9      	lsls	r1, r3, #31
 80111be:	d405      	bmi.n	80111cc <_vfiprintf_r+0x220>
 80111c0:	89ab      	ldrh	r3, [r5, #12]
 80111c2:	059a      	lsls	r2, r3, #22
 80111c4:	d402      	bmi.n	80111cc <_vfiprintf_r+0x220>
 80111c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111c8:	f000 faa1 	bl	801170e <__retarget_lock_release_recursive>
 80111cc:	89ab      	ldrh	r3, [r5, #12]
 80111ce:	065b      	lsls	r3, r3, #25
 80111d0:	f53f af12 	bmi.w	8010ff8 <_vfiprintf_r+0x4c>
 80111d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111d6:	e711      	b.n	8010ffc <_vfiprintf_r+0x50>
 80111d8:	ab03      	add	r3, sp, #12
 80111da:	9300      	str	r3, [sp, #0]
 80111dc:	462a      	mov	r2, r5
 80111de:	4b09      	ldr	r3, [pc, #36]	; (8011204 <_vfiprintf_r+0x258>)
 80111e0:	a904      	add	r1, sp, #16
 80111e2:	4630      	mov	r0, r6
 80111e4:	f7fc fb0e 	bl	800d804 <_printf_i>
 80111e8:	e7e4      	b.n	80111b4 <_vfiprintf_r+0x208>
 80111ea:	bf00      	nop
 80111ec:	0801224c 	.word	0x0801224c
 80111f0:	0801226c 	.word	0x0801226c
 80111f4:	0801222c 	.word	0x0801222c
 80111f8:	080121dc 	.word	0x080121dc
 80111fc:	080121e6 	.word	0x080121e6
 8011200:	0800d2bd 	.word	0x0800d2bd
 8011204:	08010f87 	.word	0x08010f87
 8011208:	080121e2 	.word	0x080121e2

0801120c <__swbuf_r>:
 801120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120e:	460e      	mov	r6, r1
 8011210:	4614      	mov	r4, r2
 8011212:	4605      	mov	r5, r0
 8011214:	b118      	cbz	r0, 801121e <__swbuf_r+0x12>
 8011216:	6983      	ldr	r3, [r0, #24]
 8011218:	b90b      	cbnz	r3, 801121e <__swbuf_r+0x12>
 801121a:	f000 f9d9 	bl	80115d0 <__sinit>
 801121e:	4b21      	ldr	r3, [pc, #132]	; (80112a4 <__swbuf_r+0x98>)
 8011220:	429c      	cmp	r4, r3
 8011222:	d12b      	bne.n	801127c <__swbuf_r+0x70>
 8011224:	686c      	ldr	r4, [r5, #4]
 8011226:	69a3      	ldr	r3, [r4, #24]
 8011228:	60a3      	str	r3, [r4, #8]
 801122a:	89a3      	ldrh	r3, [r4, #12]
 801122c:	071a      	lsls	r2, r3, #28
 801122e:	d52f      	bpl.n	8011290 <__swbuf_r+0x84>
 8011230:	6923      	ldr	r3, [r4, #16]
 8011232:	b36b      	cbz	r3, 8011290 <__swbuf_r+0x84>
 8011234:	6923      	ldr	r3, [r4, #16]
 8011236:	6820      	ldr	r0, [r4, #0]
 8011238:	1ac0      	subs	r0, r0, r3
 801123a:	6963      	ldr	r3, [r4, #20]
 801123c:	b2f6      	uxtb	r6, r6
 801123e:	4283      	cmp	r3, r0
 8011240:	4637      	mov	r7, r6
 8011242:	dc04      	bgt.n	801124e <__swbuf_r+0x42>
 8011244:	4621      	mov	r1, r4
 8011246:	4628      	mov	r0, r5
 8011248:	f000 f92e 	bl	80114a8 <_fflush_r>
 801124c:	bb30      	cbnz	r0, 801129c <__swbuf_r+0x90>
 801124e:	68a3      	ldr	r3, [r4, #8]
 8011250:	3b01      	subs	r3, #1
 8011252:	60a3      	str	r3, [r4, #8]
 8011254:	6823      	ldr	r3, [r4, #0]
 8011256:	1c5a      	adds	r2, r3, #1
 8011258:	6022      	str	r2, [r4, #0]
 801125a:	701e      	strb	r6, [r3, #0]
 801125c:	6963      	ldr	r3, [r4, #20]
 801125e:	3001      	adds	r0, #1
 8011260:	4283      	cmp	r3, r0
 8011262:	d004      	beq.n	801126e <__swbuf_r+0x62>
 8011264:	89a3      	ldrh	r3, [r4, #12]
 8011266:	07db      	lsls	r3, r3, #31
 8011268:	d506      	bpl.n	8011278 <__swbuf_r+0x6c>
 801126a:	2e0a      	cmp	r6, #10
 801126c:	d104      	bne.n	8011278 <__swbuf_r+0x6c>
 801126e:	4621      	mov	r1, r4
 8011270:	4628      	mov	r0, r5
 8011272:	f000 f919 	bl	80114a8 <_fflush_r>
 8011276:	b988      	cbnz	r0, 801129c <__swbuf_r+0x90>
 8011278:	4638      	mov	r0, r7
 801127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801127c:	4b0a      	ldr	r3, [pc, #40]	; (80112a8 <__swbuf_r+0x9c>)
 801127e:	429c      	cmp	r4, r3
 8011280:	d101      	bne.n	8011286 <__swbuf_r+0x7a>
 8011282:	68ac      	ldr	r4, [r5, #8]
 8011284:	e7cf      	b.n	8011226 <__swbuf_r+0x1a>
 8011286:	4b09      	ldr	r3, [pc, #36]	; (80112ac <__swbuf_r+0xa0>)
 8011288:	429c      	cmp	r4, r3
 801128a:	bf08      	it	eq
 801128c:	68ec      	ldreq	r4, [r5, #12]
 801128e:	e7ca      	b.n	8011226 <__swbuf_r+0x1a>
 8011290:	4621      	mov	r1, r4
 8011292:	4628      	mov	r0, r5
 8011294:	f000 f80c 	bl	80112b0 <__swsetup_r>
 8011298:	2800      	cmp	r0, #0
 801129a:	d0cb      	beq.n	8011234 <__swbuf_r+0x28>
 801129c:	f04f 37ff 	mov.w	r7, #4294967295
 80112a0:	e7ea      	b.n	8011278 <__swbuf_r+0x6c>
 80112a2:	bf00      	nop
 80112a4:	0801224c 	.word	0x0801224c
 80112a8:	0801226c 	.word	0x0801226c
 80112ac:	0801222c 	.word	0x0801222c

080112b0 <__swsetup_r>:
 80112b0:	4b32      	ldr	r3, [pc, #200]	; (801137c <__swsetup_r+0xcc>)
 80112b2:	b570      	push	{r4, r5, r6, lr}
 80112b4:	681d      	ldr	r5, [r3, #0]
 80112b6:	4606      	mov	r6, r0
 80112b8:	460c      	mov	r4, r1
 80112ba:	b125      	cbz	r5, 80112c6 <__swsetup_r+0x16>
 80112bc:	69ab      	ldr	r3, [r5, #24]
 80112be:	b913      	cbnz	r3, 80112c6 <__swsetup_r+0x16>
 80112c0:	4628      	mov	r0, r5
 80112c2:	f000 f985 	bl	80115d0 <__sinit>
 80112c6:	4b2e      	ldr	r3, [pc, #184]	; (8011380 <__swsetup_r+0xd0>)
 80112c8:	429c      	cmp	r4, r3
 80112ca:	d10f      	bne.n	80112ec <__swsetup_r+0x3c>
 80112cc:	686c      	ldr	r4, [r5, #4]
 80112ce:	89a3      	ldrh	r3, [r4, #12]
 80112d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112d4:	0719      	lsls	r1, r3, #28
 80112d6:	d42c      	bmi.n	8011332 <__swsetup_r+0x82>
 80112d8:	06dd      	lsls	r5, r3, #27
 80112da:	d411      	bmi.n	8011300 <__swsetup_r+0x50>
 80112dc:	2309      	movs	r3, #9
 80112de:	6033      	str	r3, [r6, #0]
 80112e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80112e4:	81a3      	strh	r3, [r4, #12]
 80112e6:	f04f 30ff 	mov.w	r0, #4294967295
 80112ea:	e03e      	b.n	801136a <__swsetup_r+0xba>
 80112ec:	4b25      	ldr	r3, [pc, #148]	; (8011384 <__swsetup_r+0xd4>)
 80112ee:	429c      	cmp	r4, r3
 80112f0:	d101      	bne.n	80112f6 <__swsetup_r+0x46>
 80112f2:	68ac      	ldr	r4, [r5, #8]
 80112f4:	e7eb      	b.n	80112ce <__swsetup_r+0x1e>
 80112f6:	4b24      	ldr	r3, [pc, #144]	; (8011388 <__swsetup_r+0xd8>)
 80112f8:	429c      	cmp	r4, r3
 80112fa:	bf08      	it	eq
 80112fc:	68ec      	ldreq	r4, [r5, #12]
 80112fe:	e7e6      	b.n	80112ce <__swsetup_r+0x1e>
 8011300:	0758      	lsls	r0, r3, #29
 8011302:	d512      	bpl.n	801132a <__swsetup_r+0x7a>
 8011304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011306:	b141      	cbz	r1, 801131a <__swsetup_r+0x6a>
 8011308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801130c:	4299      	cmp	r1, r3
 801130e:	d002      	beq.n	8011316 <__swsetup_r+0x66>
 8011310:	4630      	mov	r0, r6
 8011312:	f7ff fb67 	bl	80109e4 <_free_r>
 8011316:	2300      	movs	r3, #0
 8011318:	6363      	str	r3, [r4, #52]	; 0x34
 801131a:	89a3      	ldrh	r3, [r4, #12]
 801131c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011320:	81a3      	strh	r3, [r4, #12]
 8011322:	2300      	movs	r3, #0
 8011324:	6063      	str	r3, [r4, #4]
 8011326:	6923      	ldr	r3, [r4, #16]
 8011328:	6023      	str	r3, [r4, #0]
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	f043 0308 	orr.w	r3, r3, #8
 8011330:	81a3      	strh	r3, [r4, #12]
 8011332:	6923      	ldr	r3, [r4, #16]
 8011334:	b94b      	cbnz	r3, 801134a <__swsetup_r+0x9a>
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011340:	d003      	beq.n	801134a <__swsetup_r+0x9a>
 8011342:	4621      	mov	r1, r4
 8011344:	4630      	mov	r0, r6
 8011346:	f000 fa07 	bl	8011758 <__smakebuf_r>
 801134a:	89a0      	ldrh	r0, [r4, #12]
 801134c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011350:	f010 0301 	ands.w	r3, r0, #1
 8011354:	d00a      	beq.n	801136c <__swsetup_r+0xbc>
 8011356:	2300      	movs	r3, #0
 8011358:	60a3      	str	r3, [r4, #8]
 801135a:	6963      	ldr	r3, [r4, #20]
 801135c:	425b      	negs	r3, r3
 801135e:	61a3      	str	r3, [r4, #24]
 8011360:	6923      	ldr	r3, [r4, #16]
 8011362:	b943      	cbnz	r3, 8011376 <__swsetup_r+0xc6>
 8011364:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011368:	d1ba      	bne.n	80112e0 <__swsetup_r+0x30>
 801136a:	bd70      	pop	{r4, r5, r6, pc}
 801136c:	0781      	lsls	r1, r0, #30
 801136e:	bf58      	it	pl
 8011370:	6963      	ldrpl	r3, [r4, #20]
 8011372:	60a3      	str	r3, [r4, #8]
 8011374:	e7f4      	b.n	8011360 <__swsetup_r+0xb0>
 8011376:	2000      	movs	r0, #0
 8011378:	e7f7      	b.n	801136a <__swsetup_r+0xba>
 801137a:	bf00      	nop
 801137c:	20000034 	.word	0x20000034
 8011380:	0801224c 	.word	0x0801224c
 8011384:	0801226c 	.word	0x0801226c
 8011388:	0801222c 	.word	0x0801222c

0801138c <abort>:
 801138c:	b508      	push	{r3, lr}
 801138e:	2006      	movs	r0, #6
 8011390:	f000 fa52 	bl	8011838 <raise>
 8011394:	2001      	movs	r0, #1
 8011396:	f7f2 fbb9 	bl	8003b0c <_exit>
	...

0801139c <__sflush_r>:
 801139c:	898a      	ldrh	r2, [r1, #12]
 801139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a2:	4605      	mov	r5, r0
 80113a4:	0710      	lsls	r0, r2, #28
 80113a6:	460c      	mov	r4, r1
 80113a8:	d458      	bmi.n	801145c <__sflush_r+0xc0>
 80113aa:	684b      	ldr	r3, [r1, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	dc05      	bgt.n	80113bc <__sflush_r+0x20>
 80113b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	dc02      	bgt.n	80113bc <__sflush_r+0x20>
 80113b6:	2000      	movs	r0, #0
 80113b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113be:	2e00      	cmp	r6, #0
 80113c0:	d0f9      	beq.n	80113b6 <__sflush_r+0x1a>
 80113c2:	2300      	movs	r3, #0
 80113c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113c8:	682f      	ldr	r7, [r5, #0]
 80113ca:	602b      	str	r3, [r5, #0]
 80113cc:	d032      	beq.n	8011434 <__sflush_r+0x98>
 80113ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113d0:	89a3      	ldrh	r3, [r4, #12]
 80113d2:	075a      	lsls	r2, r3, #29
 80113d4:	d505      	bpl.n	80113e2 <__sflush_r+0x46>
 80113d6:	6863      	ldr	r3, [r4, #4]
 80113d8:	1ac0      	subs	r0, r0, r3
 80113da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113dc:	b10b      	cbz	r3, 80113e2 <__sflush_r+0x46>
 80113de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113e0:	1ac0      	subs	r0, r0, r3
 80113e2:	2300      	movs	r3, #0
 80113e4:	4602      	mov	r2, r0
 80113e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113e8:	6a21      	ldr	r1, [r4, #32]
 80113ea:	4628      	mov	r0, r5
 80113ec:	47b0      	blx	r6
 80113ee:	1c43      	adds	r3, r0, #1
 80113f0:	89a3      	ldrh	r3, [r4, #12]
 80113f2:	d106      	bne.n	8011402 <__sflush_r+0x66>
 80113f4:	6829      	ldr	r1, [r5, #0]
 80113f6:	291d      	cmp	r1, #29
 80113f8:	d82c      	bhi.n	8011454 <__sflush_r+0xb8>
 80113fa:	4a2a      	ldr	r2, [pc, #168]	; (80114a4 <__sflush_r+0x108>)
 80113fc:	40ca      	lsrs	r2, r1
 80113fe:	07d6      	lsls	r6, r2, #31
 8011400:	d528      	bpl.n	8011454 <__sflush_r+0xb8>
 8011402:	2200      	movs	r2, #0
 8011404:	6062      	str	r2, [r4, #4]
 8011406:	04d9      	lsls	r1, r3, #19
 8011408:	6922      	ldr	r2, [r4, #16]
 801140a:	6022      	str	r2, [r4, #0]
 801140c:	d504      	bpl.n	8011418 <__sflush_r+0x7c>
 801140e:	1c42      	adds	r2, r0, #1
 8011410:	d101      	bne.n	8011416 <__sflush_r+0x7a>
 8011412:	682b      	ldr	r3, [r5, #0]
 8011414:	b903      	cbnz	r3, 8011418 <__sflush_r+0x7c>
 8011416:	6560      	str	r0, [r4, #84]	; 0x54
 8011418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801141a:	602f      	str	r7, [r5, #0]
 801141c:	2900      	cmp	r1, #0
 801141e:	d0ca      	beq.n	80113b6 <__sflush_r+0x1a>
 8011420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011424:	4299      	cmp	r1, r3
 8011426:	d002      	beq.n	801142e <__sflush_r+0x92>
 8011428:	4628      	mov	r0, r5
 801142a:	f7ff fadb 	bl	80109e4 <_free_r>
 801142e:	2000      	movs	r0, #0
 8011430:	6360      	str	r0, [r4, #52]	; 0x34
 8011432:	e7c1      	b.n	80113b8 <__sflush_r+0x1c>
 8011434:	6a21      	ldr	r1, [r4, #32]
 8011436:	2301      	movs	r3, #1
 8011438:	4628      	mov	r0, r5
 801143a:	47b0      	blx	r6
 801143c:	1c41      	adds	r1, r0, #1
 801143e:	d1c7      	bne.n	80113d0 <__sflush_r+0x34>
 8011440:	682b      	ldr	r3, [r5, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d0c4      	beq.n	80113d0 <__sflush_r+0x34>
 8011446:	2b1d      	cmp	r3, #29
 8011448:	d001      	beq.n	801144e <__sflush_r+0xb2>
 801144a:	2b16      	cmp	r3, #22
 801144c:	d101      	bne.n	8011452 <__sflush_r+0xb6>
 801144e:	602f      	str	r7, [r5, #0]
 8011450:	e7b1      	b.n	80113b6 <__sflush_r+0x1a>
 8011452:	89a3      	ldrh	r3, [r4, #12]
 8011454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011458:	81a3      	strh	r3, [r4, #12]
 801145a:	e7ad      	b.n	80113b8 <__sflush_r+0x1c>
 801145c:	690f      	ldr	r7, [r1, #16]
 801145e:	2f00      	cmp	r7, #0
 8011460:	d0a9      	beq.n	80113b6 <__sflush_r+0x1a>
 8011462:	0793      	lsls	r3, r2, #30
 8011464:	680e      	ldr	r6, [r1, #0]
 8011466:	bf08      	it	eq
 8011468:	694b      	ldreq	r3, [r1, #20]
 801146a:	600f      	str	r7, [r1, #0]
 801146c:	bf18      	it	ne
 801146e:	2300      	movne	r3, #0
 8011470:	eba6 0807 	sub.w	r8, r6, r7
 8011474:	608b      	str	r3, [r1, #8]
 8011476:	f1b8 0f00 	cmp.w	r8, #0
 801147a:	dd9c      	ble.n	80113b6 <__sflush_r+0x1a>
 801147c:	6a21      	ldr	r1, [r4, #32]
 801147e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011480:	4643      	mov	r3, r8
 8011482:	463a      	mov	r2, r7
 8011484:	4628      	mov	r0, r5
 8011486:	47b0      	blx	r6
 8011488:	2800      	cmp	r0, #0
 801148a:	dc06      	bgt.n	801149a <__sflush_r+0xfe>
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011492:	81a3      	strh	r3, [r4, #12]
 8011494:	f04f 30ff 	mov.w	r0, #4294967295
 8011498:	e78e      	b.n	80113b8 <__sflush_r+0x1c>
 801149a:	4407      	add	r7, r0
 801149c:	eba8 0800 	sub.w	r8, r8, r0
 80114a0:	e7e9      	b.n	8011476 <__sflush_r+0xda>
 80114a2:	bf00      	nop
 80114a4:	20400001 	.word	0x20400001

080114a8 <_fflush_r>:
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	690b      	ldr	r3, [r1, #16]
 80114ac:	4605      	mov	r5, r0
 80114ae:	460c      	mov	r4, r1
 80114b0:	b913      	cbnz	r3, 80114b8 <_fflush_r+0x10>
 80114b2:	2500      	movs	r5, #0
 80114b4:	4628      	mov	r0, r5
 80114b6:	bd38      	pop	{r3, r4, r5, pc}
 80114b8:	b118      	cbz	r0, 80114c2 <_fflush_r+0x1a>
 80114ba:	6983      	ldr	r3, [r0, #24]
 80114bc:	b90b      	cbnz	r3, 80114c2 <_fflush_r+0x1a>
 80114be:	f000 f887 	bl	80115d0 <__sinit>
 80114c2:	4b14      	ldr	r3, [pc, #80]	; (8011514 <_fflush_r+0x6c>)
 80114c4:	429c      	cmp	r4, r3
 80114c6:	d11b      	bne.n	8011500 <_fflush_r+0x58>
 80114c8:	686c      	ldr	r4, [r5, #4]
 80114ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d0ef      	beq.n	80114b2 <_fflush_r+0xa>
 80114d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114d4:	07d0      	lsls	r0, r2, #31
 80114d6:	d404      	bmi.n	80114e2 <_fflush_r+0x3a>
 80114d8:	0599      	lsls	r1, r3, #22
 80114da:	d402      	bmi.n	80114e2 <_fflush_r+0x3a>
 80114dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114de:	f000 f915 	bl	801170c <__retarget_lock_acquire_recursive>
 80114e2:	4628      	mov	r0, r5
 80114e4:	4621      	mov	r1, r4
 80114e6:	f7ff ff59 	bl	801139c <__sflush_r>
 80114ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114ec:	07da      	lsls	r2, r3, #31
 80114ee:	4605      	mov	r5, r0
 80114f0:	d4e0      	bmi.n	80114b4 <_fflush_r+0xc>
 80114f2:	89a3      	ldrh	r3, [r4, #12]
 80114f4:	059b      	lsls	r3, r3, #22
 80114f6:	d4dd      	bmi.n	80114b4 <_fflush_r+0xc>
 80114f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114fa:	f000 f908 	bl	801170e <__retarget_lock_release_recursive>
 80114fe:	e7d9      	b.n	80114b4 <_fflush_r+0xc>
 8011500:	4b05      	ldr	r3, [pc, #20]	; (8011518 <_fflush_r+0x70>)
 8011502:	429c      	cmp	r4, r3
 8011504:	d101      	bne.n	801150a <_fflush_r+0x62>
 8011506:	68ac      	ldr	r4, [r5, #8]
 8011508:	e7df      	b.n	80114ca <_fflush_r+0x22>
 801150a:	4b04      	ldr	r3, [pc, #16]	; (801151c <_fflush_r+0x74>)
 801150c:	429c      	cmp	r4, r3
 801150e:	bf08      	it	eq
 8011510:	68ec      	ldreq	r4, [r5, #12]
 8011512:	e7da      	b.n	80114ca <_fflush_r+0x22>
 8011514:	0801224c 	.word	0x0801224c
 8011518:	0801226c 	.word	0x0801226c
 801151c:	0801222c 	.word	0x0801222c

08011520 <std>:
 8011520:	2300      	movs	r3, #0
 8011522:	b510      	push	{r4, lr}
 8011524:	4604      	mov	r4, r0
 8011526:	e9c0 3300 	strd	r3, r3, [r0]
 801152a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801152e:	6083      	str	r3, [r0, #8]
 8011530:	8181      	strh	r1, [r0, #12]
 8011532:	6643      	str	r3, [r0, #100]	; 0x64
 8011534:	81c2      	strh	r2, [r0, #14]
 8011536:	6183      	str	r3, [r0, #24]
 8011538:	4619      	mov	r1, r3
 801153a:	2208      	movs	r2, #8
 801153c:	305c      	adds	r0, #92	; 0x5c
 801153e:	f7fb fe15 	bl	800d16c <memset>
 8011542:	4b05      	ldr	r3, [pc, #20]	; (8011558 <std+0x38>)
 8011544:	6263      	str	r3, [r4, #36]	; 0x24
 8011546:	4b05      	ldr	r3, [pc, #20]	; (801155c <std+0x3c>)
 8011548:	62a3      	str	r3, [r4, #40]	; 0x28
 801154a:	4b05      	ldr	r3, [pc, #20]	; (8011560 <std+0x40>)
 801154c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801154e:	4b05      	ldr	r3, [pc, #20]	; (8011564 <std+0x44>)
 8011550:	6224      	str	r4, [r4, #32]
 8011552:	6323      	str	r3, [r4, #48]	; 0x30
 8011554:	bd10      	pop	{r4, pc}
 8011556:	bf00      	nop
 8011558:	08011871 	.word	0x08011871
 801155c:	08011893 	.word	0x08011893
 8011560:	080118cb 	.word	0x080118cb
 8011564:	080118ef 	.word	0x080118ef

08011568 <_cleanup_r>:
 8011568:	4901      	ldr	r1, [pc, #4]	; (8011570 <_cleanup_r+0x8>)
 801156a:	f000 b8af 	b.w	80116cc <_fwalk_reent>
 801156e:	bf00      	nop
 8011570:	080114a9 	.word	0x080114a9

08011574 <__sfmoreglue>:
 8011574:	b570      	push	{r4, r5, r6, lr}
 8011576:	1e4a      	subs	r2, r1, #1
 8011578:	2568      	movs	r5, #104	; 0x68
 801157a:	4355      	muls	r5, r2
 801157c:	460e      	mov	r6, r1
 801157e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011582:	f7ff fa7f 	bl	8010a84 <_malloc_r>
 8011586:	4604      	mov	r4, r0
 8011588:	b140      	cbz	r0, 801159c <__sfmoreglue+0x28>
 801158a:	2100      	movs	r1, #0
 801158c:	e9c0 1600 	strd	r1, r6, [r0]
 8011590:	300c      	adds	r0, #12
 8011592:	60a0      	str	r0, [r4, #8]
 8011594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011598:	f7fb fde8 	bl	800d16c <memset>
 801159c:	4620      	mov	r0, r4
 801159e:	bd70      	pop	{r4, r5, r6, pc}

080115a0 <__sfp_lock_acquire>:
 80115a0:	4801      	ldr	r0, [pc, #4]	; (80115a8 <__sfp_lock_acquire+0x8>)
 80115a2:	f000 b8b3 	b.w	801170c <__retarget_lock_acquire_recursive>
 80115a6:	bf00      	nop
 80115a8:	20000964 	.word	0x20000964

080115ac <__sfp_lock_release>:
 80115ac:	4801      	ldr	r0, [pc, #4]	; (80115b4 <__sfp_lock_release+0x8>)
 80115ae:	f000 b8ae 	b.w	801170e <__retarget_lock_release_recursive>
 80115b2:	bf00      	nop
 80115b4:	20000964 	.word	0x20000964

080115b8 <__sinit_lock_acquire>:
 80115b8:	4801      	ldr	r0, [pc, #4]	; (80115c0 <__sinit_lock_acquire+0x8>)
 80115ba:	f000 b8a7 	b.w	801170c <__retarget_lock_acquire_recursive>
 80115be:	bf00      	nop
 80115c0:	2000095f 	.word	0x2000095f

080115c4 <__sinit_lock_release>:
 80115c4:	4801      	ldr	r0, [pc, #4]	; (80115cc <__sinit_lock_release+0x8>)
 80115c6:	f000 b8a2 	b.w	801170e <__retarget_lock_release_recursive>
 80115ca:	bf00      	nop
 80115cc:	2000095f 	.word	0x2000095f

080115d0 <__sinit>:
 80115d0:	b510      	push	{r4, lr}
 80115d2:	4604      	mov	r4, r0
 80115d4:	f7ff fff0 	bl	80115b8 <__sinit_lock_acquire>
 80115d8:	69a3      	ldr	r3, [r4, #24]
 80115da:	b11b      	cbz	r3, 80115e4 <__sinit+0x14>
 80115dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115e0:	f7ff bff0 	b.w	80115c4 <__sinit_lock_release>
 80115e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80115e8:	6523      	str	r3, [r4, #80]	; 0x50
 80115ea:	4b13      	ldr	r3, [pc, #76]	; (8011638 <__sinit+0x68>)
 80115ec:	4a13      	ldr	r2, [pc, #76]	; (801163c <__sinit+0x6c>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80115f2:	42a3      	cmp	r3, r4
 80115f4:	bf04      	itt	eq
 80115f6:	2301      	moveq	r3, #1
 80115f8:	61a3      	streq	r3, [r4, #24]
 80115fa:	4620      	mov	r0, r4
 80115fc:	f000 f820 	bl	8011640 <__sfp>
 8011600:	6060      	str	r0, [r4, #4]
 8011602:	4620      	mov	r0, r4
 8011604:	f000 f81c 	bl	8011640 <__sfp>
 8011608:	60a0      	str	r0, [r4, #8]
 801160a:	4620      	mov	r0, r4
 801160c:	f000 f818 	bl	8011640 <__sfp>
 8011610:	2200      	movs	r2, #0
 8011612:	60e0      	str	r0, [r4, #12]
 8011614:	2104      	movs	r1, #4
 8011616:	6860      	ldr	r0, [r4, #4]
 8011618:	f7ff ff82 	bl	8011520 <std>
 801161c:	68a0      	ldr	r0, [r4, #8]
 801161e:	2201      	movs	r2, #1
 8011620:	2109      	movs	r1, #9
 8011622:	f7ff ff7d 	bl	8011520 <std>
 8011626:	68e0      	ldr	r0, [r4, #12]
 8011628:	2202      	movs	r2, #2
 801162a:	2112      	movs	r1, #18
 801162c:	f7ff ff78 	bl	8011520 <std>
 8011630:	2301      	movs	r3, #1
 8011632:	61a3      	str	r3, [r4, #24]
 8011634:	e7d2      	b.n	80115dc <__sinit+0xc>
 8011636:	bf00      	nop
 8011638:	08011dd8 	.word	0x08011dd8
 801163c:	08011569 	.word	0x08011569

08011640 <__sfp>:
 8011640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011642:	4607      	mov	r7, r0
 8011644:	f7ff ffac 	bl	80115a0 <__sfp_lock_acquire>
 8011648:	4b1e      	ldr	r3, [pc, #120]	; (80116c4 <__sfp+0x84>)
 801164a:	681e      	ldr	r6, [r3, #0]
 801164c:	69b3      	ldr	r3, [r6, #24]
 801164e:	b913      	cbnz	r3, 8011656 <__sfp+0x16>
 8011650:	4630      	mov	r0, r6
 8011652:	f7ff ffbd 	bl	80115d0 <__sinit>
 8011656:	3648      	adds	r6, #72	; 0x48
 8011658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801165c:	3b01      	subs	r3, #1
 801165e:	d503      	bpl.n	8011668 <__sfp+0x28>
 8011660:	6833      	ldr	r3, [r6, #0]
 8011662:	b30b      	cbz	r3, 80116a8 <__sfp+0x68>
 8011664:	6836      	ldr	r6, [r6, #0]
 8011666:	e7f7      	b.n	8011658 <__sfp+0x18>
 8011668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801166c:	b9d5      	cbnz	r5, 80116a4 <__sfp+0x64>
 801166e:	4b16      	ldr	r3, [pc, #88]	; (80116c8 <__sfp+0x88>)
 8011670:	60e3      	str	r3, [r4, #12]
 8011672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011676:	6665      	str	r5, [r4, #100]	; 0x64
 8011678:	f000 f847 	bl	801170a <__retarget_lock_init_recursive>
 801167c:	f7ff ff96 	bl	80115ac <__sfp_lock_release>
 8011680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011688:	6025      	str	r5, [r4, #0]
 801168a:	61a5      	str	r5, [r4, #24]
 801168c:	2208      	movs	r2, #8
 801168e:	4629      	mov	r1, r5
 8011690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011694:	f7fb fd6a 	bl	800d16c <memset>
 8011698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801169c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116a0:	4620      	mov	r0, r4
 80116a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a4:	3468      	adds	r4, #104	; 0x68
 80116a6:	e7d9      	b.n	801165c <__sfp+0x1c>
 80116a8:	2104      	movs	r1, #4
 80116aa:	4638      	mov	r0, r7
 80116ac:	f7ff ff62 	bl	8011574 <__sfmoreglue>
 80116b0:	4604      	mov	r4, r0
 80116b2:	6030      	str	r0, [r6, #0]
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d1d5      	bne.n	8011664 <__sfp+0x24>
 80116b8:	f7ff ff78 	bl	80115ac <__sfp_lock_release>
 80116bc:	230c      	movs	r3, #12
 80116be:	603b      	str	r3, [r7, #0]
 80116c0:	e7ee      	b.n	80116a0 <__sfp+0x60>
 80116c2:	bf00      	nop
 80116c4:	08011dd8 	.word	0x08011dd8
 80116c8:	ffff0001 	.word	0xffff0001

080116cc <_fwalk_reent>:
 80116cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116d0:	4606      	mov	r6, r0
 80116d2:	4688      	mov	r8, r1
 80116d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80116d8:	2700      	movs	r7, #0
 80116da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116de:	f1b9 0901 	subs.w	r9, r9, #1
 80116e2:	d505      	bpl.n	80116f0 <_fwalk_reent+0x24>
 80116e4:	6824      	ldr	r4, [r4, #0]
 80116e6:	2c00      	cmp	r4, #0
 80116e8:	d1f7      	bne.n	80116da <_fwalk_reent+0xe>
 80116ea:	4638      	mov	r0, r7
 80116ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116f0:	89ab      	ldrh	r3, [r5, #12]
 80116f2:	2b01      	cmp	r3, #1
 80116f4:	d907      	bls.n	8011706 <_fwalk_reent+0x3a>
 80116f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116fa:	3301      	adds	r3, #1
 80116fc:	d003      	beq.n	8011706 <_fwalk_reent+0x3a>
 80116fe:	4629      	mov	r1, r5
 8011700:	4630      	mov	r0, r6
 8011702:	47c0      	blx	r8
 8011704:	4307      	orrs	r7, r0
 8011706:	3568      	adds	r5, #104	; 0x68
 8011708:	e7e9      	b.n	80116de <_fwalk_reent+0x12>

0801170a <__retarget_lock_init_recursive>:
 801170a:	4770      	bx	lr

0801170c <__retarget_lock_acquire_recursive>:
 801170c:	4770      	bx	lr

0801170e <__retarget_lock_release_recursive>:
 801170e:	4770      	bx	lr

08011710 <__swhatbuf_r>:
 8011710:	b570      	push	{r4, r5, r6, lr}
 8011712:	460e      	mov	r6, r1
 8011714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011718:	2900      	cmp	r1, #0
 801171a:	b096      	sub	sp, #88	; 0x58
 801171c:	4614      	mov	r4, r2
 801171e:	461d      	mov	r5, r3
 8011720:	da07      	bge.n	8011732 <__swhatbuf_r+0x22>
 8011722:	2300      	movs	r3, #0
 8011724:	602b      	str	r3, [r5, #0]
 8011726:	89b3      	ldrh	r3, [r6, #12]
 8011728:	061a      	lsls	r2, r3, #24
 801172a:	d410      	bmi.n	801174e <__swhatbuf_r+0x3e>
 801172c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011730:	e00e      	b.n	8011750 <__swhatbuf_r+0x40>
 8011732:	466a      	mov	r2, sp
 8011734:	f000 f902 	bl	801193c <_fstat_r>
 8011738:	2800      	cmp	r0, #0
 801173a:	dbf2      	blt.n	8011722 <__swhatbuf_r+0x12>
 801173c:	9a01      	ldr	r2, [sp, #4]
 801173e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011746:	425a      	negs	r2, r3
 8011748:	415a      	adcs	r2, r3
 801174a:	602a      	str	r2, [r5, #0]
 801174c:	e7ee      	b.n	801172c <__swhatbuf_r+0x1c>
 801174e:	2340      	movs	r3, #64	; 0x40
 8011750:	2000      	movs	r0, #0
 8011752:	6023      	str	r3, [r4, #0]
 8011754:	b016      	add	sp, #88	; 0x58
 8011756:	bd70      	pop	{r4, r5, r6, pc}

08011758 <__smakebuf_r>:
 8011758:	898b      	ldrh	r3, [r1, #12]
 801175a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801175c:	079d      	lsls	r5, r3, #30
 801175e:	4606      	mov	r6, r0
 8011760:	460c      	mov	r4, r1
 8011762:	d507      	bpl.n	8011774 <__smakebuf_r+0x1c>
 8011764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011768:	6023      	str	r3, [r4, #0]
 801176a:	6123      	str	r3, [r4, #16]
 801176c:	2301      	movs	r3, #1
 801176e:	6163      	str	r3, [r4, #20]
 8011770:	b002      	add	sp, #8
 8011772:	bd70      	pop	{r4, r5, r6, pc}
 8011774:	ab01      	add	r3, sp, #4
 8011776:	466a      	mov	r2, sp
 8011778:	f7ff ffca 	bl	8011710 <__swhatbuf_r>
 801177c:	9900      	ldr	r1, [sp, #0]
 801177e:	4605      	mov	r5, r0
 8011780:	4630      	mov	r0, r6
 8011782:	f7ff f97f 	bl	8010a84 <_malloc_r>
 8011786:	b948      	cbnz	r0, 801179c <__smakebuf_r+0x44>
 8011788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801178c:	059a      	lsls	r2, r3, #22
 801178e:	d4ef      	bmi.n	8011770 <__smakebuf_r+0x18>
 8011790:	f023 0303 	bic.w	r3, r3, #3
 8011794:	f043 0302 	orr.w	r3, r3, #2
 8011798:	81a3      	strh	r3, [r4, #12]
 801179a:	e7e3      	b.n	8011764 <__smakebuf_r+0xc>
 801179c:	4b0d      	ldr	r3, [pc, #52]	; (80117d4 <__smakebuf_r+0x7c>)
 801179e:	62b3      	str	r3, [r6, #40]	; 0x28
 80117a0:	89a3      	ldrh	r3, [r4, #12]
 80117a2:	6020      	str	r0, [r4, #0]
 80117a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117a8:	81a3      	strh	r3, [r4, #12]
 80117aa:	9b00      	ldr	r3, [sp, #0]
 80117ac:	6163      	str	r3, [r4, #20]
 80117ae:	9b01      	ldr	r3, [sp, #4]
 80117b0:	6120      	str	r0, [r4, #16]
 80117b2:	b15b      	cbz	r3, 80117cc <__smakebuf_r+0x74>
 80117b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117b8:	4630      	mov	r0, r6
 80117ba:	f000 f8d1 	bl	8011960 <_isatty_r>
 80117be:	b128      	cbz	r0, 80117cc <__smakebuf_r+0x74>
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	f023 0303 	bic.w	r3, r3, #3
 80117c6:	f043 0301 	orr.w	r3, r3, #1
 80117ca:	81a3      	strh	r3, [r4, #12]
 80117cc:	89a0      	ldrh	r0, [r4, #12]
 80117ce:	4305      	orrs	r5, r0
 80117d0:	81a5      	strh	r5, [r4, #12]
 80117d2:	e7cd      	b.n	8011770 <__smakebuf_r+0x18>
 80117d4:	08011569 	.word	0x08011569

080117d8 <_malloc_usable_size_r>:
 80117d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117dc:	1f18      	subs	r0, r3, #4
 80117de:	2b00      	cmp	r3, #0
 80117e0:	bfbc      	itt	lt
 80117e2:	580b      	ldrlt	r3, [r1, r0]
 80117e4:	18c0      	addlt	r0, r0, r3
 80117e6:	4770      	bx	lr

080117e8 <_raise_r>:
 80117e8:	291f      	cmp	r1, #31
 80117ea:	b538      	push	{r3, r4, r5, lr}
 80117ec:	4604      	mov	r4, r0
 80117ee:	460d      	mov	r5, r1
 80117f0:	d904      	bls.n	80117fc <_raise_r+0x14>
 80117f2:	2316      	movs	r3, #22
 80117f4:	6003      	str	r3, [r0, #0]
 80117f6:	f04f 30ff 	mov.w	r0, #4294967295
 80117fa:	bd38      	pop	{r3, r4, r5, pc}
 80117fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80117fe:	b112      	cbz	r2, 8011806 <_raise_r+0x1e>
 8011800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011804:	b94b      	cbnz	r3, 801181a <_raise_r+0x32>
 8011806:	4620      	mov	r0, r4
 8011808:	f000 f830 	bl	801186c <_getpid_r>
 801180c:	462a      	mov	r2, r5
 801180e:	4601      	mov	r1, r0
 8011810:	4620      	mov	r0, r4
 8011812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011816:	f000 b817 	b.w	8011848 <_kill_r>
 801181a:	2b01      	cmp	r3, #1
 801181c:	d00a      	beq.n	8011834 <_raise_r+0x4c>
 801181e:	1c59      	adds	r1, r3, #1
 8011820:	d103      	bne.n	801182a <_raise_r+0x42>
 8011822:	2316      	movs	r3, #22
 8011824:	6003      	str	r3, [r0, #0]
 8011826:	2001      	movs	r0, #1
 8011828:	e7e7      	b.n	80117fa <_raise_r+0x12>
 801182a:	2400      	movs	r4, #0
 801182c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011830:	4628      	mov	r0, r5
 8011832:	4798      	blx	r3
 8011834:	2000      	movs	r0, #0
 8011836:	e7e0      	b.n	80117fa <_raise_r+0x12>

08011838 <raise>:
 8011838:	4b02      	ldr	r3, [pc, #8]	; (8011844 <raise+0xc>)
 801183a:	4601      	mov	r1, r0
 801183c:	6818      	ldr	r0, [r3, #0]
 801183e:	f7ff bfd3 	b.w	80117e8 <_raise_r>
 8011842:	bf00      	nop
 8011844:	20000034 	.word	0x20000034

08011848 <_kill_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d07      	ldr	r5, [pc, #28]	; (8011868 <_kill_r+0x20>)
 801184c:	2300      	movs	r3, #0
 801184e:	4604      	mov	r4, r0
 8011850:	4608      	mov	r0, r1
 8011852:	4611      	mov	r1, r2
 8011854:	602b      	str	r3, [r5, #0]
 8011856:	f7f2 f949 	bl	8003aec <_kill>
 801185a:	1c43      	adds	r3, r0, #1
 801185c:	d102      	bne.n	8011864 <_kill_r+0x1c>
 801185e:	682b      	ldr	r3, [r5, #0]
 8011860:	b103      	cbz	r3, 8011864 <_kill_r+0x1c>
 8011862:	6023      	str	r3, [r4, #0]
 8011864:	bd38      	pop	{r3, r4, r5, pc}
 8011866:	bf00      	nop
 8011868:	20000958 	.word	0x20000958

0801186c <_getpid_r>:
 801186c:	f7f2 b936 	b.w	8003adc <_getpid>

08011870 <__sread>:
 8011870:	b510      	push	{r4, lr}
 8011872:	460c      	mov	r4, r1
 8011874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011878:	f000 f894 	bl	80119a4 <_read_r>
 801187c:	2800      	cmp	r0, #0
 801187e:	bfab      	itete	ge
 8011880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011882:	89a3      	ldrhlt	r3, [r4, #12]
 8011884:	181b      	addge	r3, r3, r0
 8011886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801188a:	bfac      	ite	ge
 801188c:	6563      	strge	r3, [r4, #84]	; 0x54
 801188e:	81a3      	strhlt	r3, [r4, #12]
 8011890:	bd10      	pop	{r4, pc}

08011892 <__swrite>:
 8011892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011896:	461f      	mov	r7, r3
 8011898:	898b      	ldrh	r3, [r1, #12]
 801189a:	05db      	lsls	r3, r3, #23
 801189c:	4605      	mov	r5, r0
 801189e:	460c      	mov	r4, r1
 80118a0:	4616      	mov	r6, r2
 80118a2:	d505      	bpl.n	80118b0 <__swrite+0x1e>
 80118a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118a8:	2302      	movs	r3, #2
 80118aa:	2200      	movs	r2, #0
 80118ac:	f000 f868 	bl	8011980 <_lseek_r>
 80118b0:	89a3      	ldrh	r3, [r4, #12]
 80118b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118ba:	81a3      	strh	r3, [r4, #12]
 80118bc:	4632      	mov	r2, r6
 80118be:	463b      	mov	r3, r7
 80118c0:	4628      	mov	r0, r5
 80118c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118c6:	f000 b817 	b.w	80118f8 <_write_r>

080118ca <__sseek>:
 80118ca:	b510      	push	{r4, lr}
 80118cc:	460c      	mov	r4, r1
 80118ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d2:	f000 f855 	bl	8011980 <_lseek_r>
 80118d6:	1c43      	adds	r3, r0, #1
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	bf15      	itete	ne
 80118dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80118de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118e6:	81a3      	strheq	r3, [r4, #12]
 80118e8:	bf18      	it	ne
 80118ea:	81a3      	strhne	r3, [r4, #12]
 80118ec:	bd10      	pop	{r4, pc}

080118ee <__sclose>:
 80118ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f2:	f000 b813 	b.w	801191c <_close_r>
	...

080118f8 <_write_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4d07      	ldr	r5, [pc, #28]	; (8011918 <_write_r+0x20>)
 80118fc:	4604      	mov	r4, r0
 80118fe:	4608      	mov	r0, r1
 8011900:	4611      	mov	r1, r2
 8011902:	2200      	movs	r2, #0
 8011904:	602a      	str	r2, [r5, #0]
 8011906:	461a      	mov	r2, r3
 8011908:	f7f2 f927 	bl	8003b5a <_write>
 801190c:	1c43      	adds	r3, r0, #1
 801190e:	d102      	bne.n	8011916 <_write_r+0x1e>
 8011910:	682b      	ldr	r3, [r5, #0]
 8011912:	b103      	cbz	r3, 8011916 <_write_r+0x1e>
 8011914:	6023      	str	r3, [r4, #0]
 8011916:	bd38      	pop	{r3, r4, r5, pc}
 8011918:	20000958 	.word	0x20000958

0801191c <_close_r>:
 801191c:	b538      	push	{r3, r4, r5, lr}
 801191e:	4d06      	ldr	r5, [pc, #24]	; (8011938 <_close_r+0x1c>)
 8011920:	2300      	movs	r3, #0
 8011922:	4604      	mov	r4, r0
 8011924:	4608      	mov	r0, r1
 8011926:	602b      	str	r3, [r5, #0]
 8011928:	f7f2 f933 	bl	8003b92 <_close>
 801192c:	1c43      	adds	r3, r0, #1
 801192e:	d102      	bne.n	8011936 <_close_r+0x1a>
 8011930:	682b      	ldr	r3, [r5, #0]
 8011932:	b103      	cbz	r3, 8011936 <_close_r+0x1a>
 8011934:	6023      	str	r3, [r4, #0]
 8011936:	bd38      	pop	{r3, r4, r5, pc}
 8011938:	20000958 	.word	0x20000958

0801193c <_fstat_r>:
 801193c:	b538      	push	{r3, r4, r5, lr}
 801193e:	4d07      	ldr	r5, [pc, #28]	; (801195c <_fstat_r+0x20>)
 8011940:	2300      	movs	r3, #0
 8011942:	4604      	mov	r4, r0
 8011944:	4608      	mov	r0, r1
 8011946:	4611      	mov	r1, r2
 8011948:	602b      	str	r3, [r5, #0]
 801194a:	f7f2 f92e 	bl	8003baa <_fstat>
 801194e:	1c43      	adds	r3, r0, #1
 8011950:	d102      	bne.n	8011958 <_fstat_r+0x1c>
 8011952:	682b      	ldr	r3, [r5, #0]
 8011954:	b103      	cbz	r3, 8011958 <_fstat_r+0x1c>
 8011956:	6023      	str	r3, [r4, #0]
 8011958:	bd38      	pop	{r3, r4, r5, pc}
 801195a:	bf00      	nop
 801195c:	20000958 	.word	0x20000958

08011960 <_isatty_r>:
 8011960:	b538      	push	{r3, r4, r5, lr}
 8011962:	4d06      	ldr	r5, [pc, #24]	; (801197c <_isatty_r+0x1c>)
 8011964:	2300      	movs	r3, #0
 8011966:	4604      	mov	r4, r0
 8011968:	4608      	mov	r0, r1
 801196a:	602b      	str	r3, [r5, #0]
 801196c:	f7f2 f92d 	bl	8003bca <_isatty>
 8011970:	1c43      	adds	r3, r0, #1
 8011972:	d102      	bne.n	801197a <_isatty_r+0x1a>
 8011974:	682b      	ldr	r3, [r5, #0]
 8011976:	b103      	cbz	r3, 801197a <_isatty_r+0x1a>
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	bd38      	pop	{r3, r4, r5, pc}
 801197c:	20000958 	.word	0x20000958

08011980 <_lseek_r>:
 8011980:	b538      	push	{r3, r4, r5, lr}
 8011982:	4d07      	ldr	r5, [pc, #28]	; (80119a0 <_lseek_r+0x20>)
 8011984:	4604      	mov	r4, r0
 8011986:	4608      	mov	r0, r1
 8011988:	4611      	mov	r1, r2
 801198a:	2200      	movs	r2, #0
 801198c:	602a      	str	r2, [r5, #0]
 801198e:	461a      	mov	r2, r3
 8011990:	f7f2 f926 	bl	8003be0 <_lseek>
 8011994:	1c43      	adds	r3, r0, #1
 8011996:	d102      	bne.n	801199e <_lseek_r+0x1e>
 8011998:	682b      	ldr	r3, [r5, #0]
 801199a:	b103      	cbz	r3, 801199e <_lseek_r+0x1e>
 801199c:	6023      	str	r3, [r4, #0]
 801199e:	bd38      	pop	{r3, r4, r5, pc}
 80119a0:	20000958 	.word	0x20000958

080119a4 <_read_r>:
 80119a4:	b538      	push	{r3, r4, r5, lr}
 80119a6:	4d07      	ldr	r5, [pc, #28]	; (80119c4 <_read_r+0x20>)
 80119a8:	4604      	mov	r4, r0
 80119aa:	4608      	mov	r0, r1
 80119ac:	4611      	mov	r1, r2
 80119ae:	2200      	movs	r2, #0
 80119b0:	602a      	str	r2, [r5, #0]
 80119b2:	461a      	mov	r2, r3
 80119b4:	f7f2 f8b4 	bl	8003b20 <_read>
 80119b8:	1c43      	adds	r3, r0, #1
 80119ba:	d102      	bne.n	80119c2 <_read_r+0x1e>
 80119bc:	682b      	ldr	r3, [r5, #0]
 80119be:	b103      	cbz	r3, 80119c2 <_read_r+0x1e>
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	bd38      	pop	{r3, r4, r5, pc}
 80119c4:	20000958 	.word	0x20000958

080119c8 <_init>:
 80119c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ca:	bf00      	nop
 80119cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ce:	bc08      	pop	{r3}
 80119d0:	469e      	mov	lr, r3
 80119d2:	4770      	bx	lr

080119d4 <_fini>:
 80119d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d6:	bf00      	nop
 80119d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119da:	bc08      	pop	{r3}
 80119dc:	469e      	mov	lr, r3
 80119de:	4770      	bx	lr
